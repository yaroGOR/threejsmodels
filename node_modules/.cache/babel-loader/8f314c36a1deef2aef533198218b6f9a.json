{"ast":null,"code":"import { Loader, FileLoader, NumberKeyframeTrack, AnimationClip, BufferAttribute } from 'three';\n/**\n * MDD is a special format that stores a position for every vertex in a model for every frame in an animation.\n * Similar to BVH, it can be used to transfer animation data between different 3D applications or engines.\n *\n * MDD stores its data in binary format (big endian) in the following way:\n *\n * number of frames (a single uint32)\n * number of vertices (a single uint32)\n * time values for each frame (sequence of float32)\n * vertex data for each frame (sequence of float32)\n */\n\nvar MDDLoader = function MDDLoader(manager) {\n  Loader.call(this, manager);\n};\n\nMDDLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: MDDLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (data) {\n      onLoad(scope.parse(data));\n    }, onProgress, onError);\n  },\n  parse: function parse(data) {\n    var view = new DataView(data);\n    var totalFrames = view.getUint32(0);\n    var totalPoints = view.getUint32(4);\n    var offset = 8; // animation clip\n\n    var times = new Float32Array(totalFrames);\n    var values = new Float32Array(totalFrames * totalFrames).fill(0);\n\n    for (var i = 0; i < totalFrames; i++) {\n      times[i] = view.getFloat32(offset);\n      offset += 4;\n      values[totalFrames * i + i] = 1;\n    }\n\n    var track = new NumberKeyframeTrack('.morphTargetInfluences', times, values);\n    var clip = new AnimationClip('default', times[times.length - 1], [track]); // morph targets\n\n    var morphTargets = [];\n\n    for (var _i = 0; _i < totalFrames; _i++) {\n      var morphTarget = new Float32Array(totalPoints * 3);\n\n      for (var j = 0; j < totalPoints; j++) {\n        var stride = j * 3;\n        morphTarget[stride + 0] = view.getFloat32(offset);\n        offset += 4; // x\n\n        morphTarget[stride + 1] = view.getFloat32(offset);\n        offset += 4; // y\n\n        morphTarget[stride + 2] = view.getFloat32(offset);\n        offset += 4; // z\n      }\n\n      var attribute = new BufferAttribute(morphTarget, 3);\n      attribute.name = 'morph_' + _i;\n      morphTargets.push(attribute);\n    }\n\n    return {\n      morphTargets: morphTargets,\n      clip: clip\n    };\n  }\n});\nexport { MDDLoader };","map":{"version":3,"names":["Loader","FileLoader","NumberKeyframeTrack","AnimationClip","BufferAttribute","MDDLoader","manager","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","data","parse","view","DataView","totalFrames","getUint32","totalPoints","offset","times","Float32Array","values","fill","i","getFloat32","track","clip","length","morphTargets","morphTarget","j","stride","attribute","name","push"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/loaders/MDDLoader.js"],"sourcesContent":["import { Loader, FileLoader, NumberKeyframeTrack, AnimationClip, BufferAttribute } from 'three';\n\n/**\n * MDD is a special format that stores a position for every vertex in a model for every frame in an animation.\n * Similar to BVH, it can be used to transfer animation data between different 3D applications or engines.\n *\n * MDD stores its data in binary format (big endian) in the following way:\n *\n * number of frames (a single uint32)\n * number of vertices (a single uint32)\n * time values for each frame (sequence of float32)\n * vertex data for each frame (sequence of float32)\n */\n\nvar MDDLoader = function (manager) {\n  Loader.call(this, manager);\n};\n\nMDDLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: MDDLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (data) {\n      onLoad(scope.parse(data));\n    }, onProgress, onError);\n  },\n  parse: function (data) {\n    var view = new DataView(data);\n    var totalFrames = view.getUint32(0);\n    var totalPoints = view.getUint32(4);\n    var offset = 8; // animation clip\n\n    var times = new Float32Array(totalFrames);\n    var values = new Float32Array(totalFrames * totalFrames).fill(0);\n\n    for (let i = 0; i < totalFrames; i++) {\n      times[i] = view.getFloat32(offset);\n      offset += 4;\n      values[totalFrames * i + i] = 1;\n    }\n\n    var track = new NumberKeyframeTrack('.morphTargetInfluences', times, values);\n    var clip = new AnimationClip('default', times[times.length - 1], [track]); // morph targets\n\n    var morphTargets = [];\n\n    for (let i = 0; i < totalFrames; i++) {\n      var morphTarget = new Float32Array(totalPoints * 3);\n\n      for (let j = 0; j < totalPoints; j++) {\n        var stride = j * 3;\n        morphTarget[stride + 0] = view.getFloat32(offset);\n        offset += 4; // x\n\n        morphTarget[stride + 1] = view.getFloat32(offset);\n        offset += 4; // y\n\n        morphTarget[stride + 2] = view.getFloat32(offset);\n        offset += 4; // z\n      }\n\n      var attribute = new BufferAttribute(morphTarget, 3);\n      attribute.name = 'morph_' + i;\n      morphTargets.push(attribute);\n    }\n\n    return {\n      morphTargets: morphTargets,\n      clip: clip\n    };\n  }\n});\n\nexport { MDDLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}