{"ast":null,"code":"import { Loader, FileLoader, TextureLoader, LoaderUtils, Group, Color, Matrix4, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, MeshStandardMaterial, sRGBEncoding, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter } from 'three';\nimport { unzipSync } from 'fflate';\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\n\nvar ThreeMFLoader = function ThreeMFLoader(manager) {\n  Loader.call(this, manager);\n  this.availableExtensions = [];\n};\n\nThreeMFLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: ThreeMFLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function parse(data) {\n    var scope = this;\n    var textureLoader = new TextureLoader(this.manager);\n\n    function loadDocument(data) {\n      var zip = null;\n      var file = null;\n      var relsName;\n      var modelRelsName;\n      var modelPartNames = [];\n      var texturesPartNames = [];\n      var rels;\n      var modelRels;\n      var modelParts = {};\n      var printTicketParts = {};\n      var texturesParts = {};\n      var otherParts = {};\n\n      try {\n        zip = unzipSync(new Uint8Array(data)); // eslint-disable-line no-undef\n      } catch (e) {\n        if (e instanceof ReferenceError) {\n          console.error('THREE.3MFLoader: fflate missing and file is compressed.');\n          return null;\n        }\n      }\n\n      for (file in zip) {\n        if (file.match(/\\_rels\\/.rels$/)) {\n          relsName = file;\n        } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n          modelRelsName = file;\n        } else if (file.match(/^3D\\/.*\\.model$/)) {\n          modelPartNames.push(file);\n        } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) ;else if (file.match(/^3D\\/Textures?\\/.*/)) {\n          texturesPartNames.push(file);\n        } else if (file.match(/^3D\\/Other\\/.*/)) ;\n      } //\n\n\n      var relsView = zip[relsName];\n      var relsFileText = LoaderUtils.decodeText(relsView);\n      rels = parseRelsXml(relsFileText); //\n\n      if (modelRelsName) {\n        var relsView = zip[modelRelsName];\n        var relsFileText = LoaderUtils.decodeText(relsView);\n        modelRels = parseRelsXml(relsFileText);\n      } //\n\n\n      for (var i = 0; i < modelPartNames.length; i++) {\n        var modelPart = modelPartNames[i];\n        var view = zip[modelPart];\n        var fileText = LoaderUtils.decodeText(view);\n        var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n        if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n          console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\n        }\n\n        var modelNode = xmlData.querySelector('model');\n        var extensions = {};\n\n        for (var _i = 0; _i < modelNode.attributes.length; _i++) {\n          var attr = modelNode.attributes[_i];\n\n          if (attr.name.match(/^xmlns:(.+)$/)) {\n            extensions[attr.value] = RegExp.$1;\n          }\n        }\n\n        var modelData = parseModelNode(modelNode);\n        modelData['xml'] = modelNode;\n\n        if (0 < Object.keys(extensions).length) {\n          modelData['extensions'] = extensions;\n        }\n\n        modelParts[modelPart] = modelData;\n      } //\n\n\n      for (var _i2 = 0; _i2 < texturesPartNames.length; _i2++) {\n        var texturesPartName = texturesPartNames[_i2];\n        texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n      }\n\n      return {\n        rels: rels,\n        modelRels: modelRels,\n        model: modelParts,\n        printTicket: printTicketParts,\n        texture: texturesParts,\n        other: otherParts\n      };\n    }\n\n    function parseRelsXml(relsFileText) {\n      var relationships = [];\n      var relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\n      var relsNodes = relsXmlData.querySelectorAll('Relationship');\n\n      for (var i = 0; i < relsNodes.length; i++) {\n        var relsNode = relsNodes[i];\n        var relationship = {\n          target: relsNode.getAttribute('Target'),\n          //required\n          id: relsNode.getAttribute('Id'),\n          //required\n          type: relsNode.getAttribute('Type') //required\n\n        };\n        relationships.push(relationship);\n      }\n\n      return relationships;\n    }\n\n    function parseMetadataNodes(metadataNodes) {\n      var metadataData = {};\n\n      for (var i = 0; i < metadataNodes.length; i++) {\n        var metadataNode = metadataNodes[i];\n        var name = metadataNode.getAttribute('name');\n        var validNames = ['Title', 'Designer', 'Description', 'Copyright', 'LicenseTerms', 'Rating', 'CreationDate', 'ModificationDate'];\n\n        if (0 <= validNames.indexOf(name)) {\n          metadataData[name] = metadataNode.textContent;\n        }\n      }\n\n      return metadataData;\n    }\n\n    function parseBasematerialsNode(basematerialsNode) {\n      var basematerialsData = {\n        id: basematerialsNode.getAttribute('id'),\n        // required\n        basematerials: []\n      };\n      var basematerialNodes = basematerialsNode.querySelectorAll('base');\n\n      for (var i = 0; i < basematerialNodes.length; i++) {\n        var basematerialNode = basematerialNodes[i];\n        var basematerialData = parseBasematerialNode(basematerialNode);\n        basematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\n        basematerialsData.basematerials.push(basematerialData);\n      }\n\n      return basematerialsData;\n    }\n\n    function parseTexture2DNode(texture2DNode) {\n      var texture2dData = {\n        id: texture2DNode.getAttribute('id'),\n        // required\n        path: texture2DNode.getAttribute('path'),\n        // required\n        contenttype: texture2DNode.getAttribute('contenttype'),\n        // required\n        tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n        tilestylev: texture2DNode.getAttribute('tilestylev'),\n        filter: texture2DNode.getAttribute('filter')\n      };\n      return texture2dData;\n    }\n\n    function parseTextures2DGroupNode(texture2DGroupNode) {\n      var texture2DGroupData = {\n        id: texture2DGroupNode.getAttribute('id'),\n        // required\n        texid: texture2DGroupNode.getAttribute('texid'),\n        // required\n        displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\n      };\n      var tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\n      var uvs = [];\n\n      for (var i = 0; i < tex2coordNodes.length; i++) {\n        var tex2coordNode = tex2coordNodes[i];\n        var u = tex2coordNode.getAttribute('u');\n        var v = tex2coordNode.getAttribute('v');\n        uvs.push(parseFloat(u), parseFloat(v));\n      }\n\n      texture2DGroupData['uvs'] = new Float32Array(uvs);\n      return texture2DGroupData;\n    }\n\n    function parseColorGroupNode(colorGroupNode) {\n      var colorGroupData = {\n        id: colorGroupNode.getAttribute('id'),\n        // required\n        displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\n      };\n      var colorNodes = colorGroupNode.querySelectorAll('color');\n      var colors = [];\n      var colorObject = new Color();\n\n      for (var i = 0; i < colorNodes.length; i++) {\n        var colorNode = colorNodes[i];\n        var color = colorNode.getAttribute('color');\n        colorObject.setStyle(color.substring(0, 7));\n        colorObject.convertSRGBToLinear(); // color is in sRGB\n\n        colors.push(colorObject.r, colorObject.g, colorObject.b);\n      }\n\n      colorGroupData['colors'] = new Float32Array(colors);\n      return colorGroupData;\n    }\n\n    function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n      var metallicDisplaypropertiesData = {\n        id: metallicDisplaypropetiesNode.getAttribute('id') // required\n\n      };\n      var metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\n      var metallicData = [];\n\n      for (var i = 0; i < metallicNodes.length; i++) {\n        var metallicNode = metallicNodes[i];\n        metallicData.push({\n          name: metallicNode.getAttribute('name'),\n          // required\n          metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\n          // required\n          roughness: parseFloat(metallicNode.getAttribute('roughness')) // required\n\n        });\n      }\n\n      metallicDisplaypropertiesData.data = metallicData;\n      return metallicDisplaypropertiesData;\n    }\n\n    function parseBasematerialNode(basematerialNode) {\n      var basematerialData = {};\n      basematerialData['name'] = basematerialNode.getAttribute('name'); // required\n\n      basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor'); // required\n\n      basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\n      return basematerialData;\n    }\n\n    function parseMeshNode(meshNode) {\n      var meshData = {};\n      var vertices = [];\n      var vertexNodes = meshNode.querySelectorAll('vertices vertex');\n\n      for (var i = 0; i < vertexNodes.length; i++) {\n        var vertexNode = vertexNodes[i];\n        var x = vertexNode.getAttribute('x');\n        var y = vertexNode.getAttribute('y');\n        var z = vertexNode.getAttribute('z');\n        vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n      }\n\n      meshData['vertices'] = new Float32Array(vertices);\n      var triangleProperties = [];\n      var triangles = [];\n      var triangleNodes = meshNode.querySelectorAll('triangles triangle');\n\n      for (var _i3 = 0; _i3 < triangleNodes.length; _i3++) {\n        var triangleNode = triangleNodes[_i3];\n        var v1 = triangleNode.getAttribute('v1');\n        var v2 = triangleNode.getAttribute('v2');\n        var v3 = triangleNode.getAttribute('v3');\n        var p1 = triangleNode.getAttribute('p1');\n        var p2 = triangleNode.getAttribute('p2');\n        var p3 = triangleNode.getAttribute('p3');\n        var pid = triangleNode.getAttribute('pid');\n        var triangleProperty = {};\n        triangleProperty['v1'] = parseInt(v1, 10);\n        triangleProperty['v2'] = parseInt(v2, 10);\n        triangleProperty['v3'] = parseInt(v3, 10);\n        triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']); // optional\n\n        if (p1) {\n          triangleProperty['p1'] = parseInt(p1, 10);\n        }\n\n        if (p2) {\n          triangleProperty['p2'] = parseInt(p2, 10);\n        }\n\n        if (p3) {\n          triangleProperty['p3'] = parseInt(p3, 10);\n        }\n\n        if (pid) {\n          triangleProperty['pid'] = pid;\n        }\n\n        if (0 < Object.keys(triangleProperty).length) {\n          triangleProperties.push(triangleProperty);\n        }\n      }\n\n      meshData['triangleProperties'] = triangleProperties;\n      meshData['triangles'] = new Uint32Array(triangles);\n      return meshData;\n    }\n\n    function parseComponentsNode(componentsNode) {\n      var components = [];\n      var componentNodes = componentsNode.querySelectorAll('component');\n\n      for (var i = 0; i < componentNodes.length; i++) {\n        var componentNode = componentNodes[i];\n        var componentData = parseComponentNode(componentNode);\n        components.push(componentData);\n      }\n\n      return components;\n    }\n\n    function parseComponentNode(componentNode) {\n      var componentData = {};\n      componentData['objectId'] = componentNode.getAttribute('objectid'); // required\n\n      var transform = componentNode.getAttribute('transform');\n\n      if (transform) {\n        componentData['transform'] = parseTransform(transform);\n      }\n\n      return componentData;\n    }\n\n    function parseTransform(transform) {\n      var t = [];\n      transform.split(' ').forEach(function (s) {\n        t.push(parseFloat(s));\n      });\n      var matrix = new Matrix4();\n      matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0.0, 0.0, 0.0, 1.0);\n      return matrix;\n    }\n\n    function parseObjectNode(objectNode) {\n      var objectData = {\n        type: objectNode.getAttribute('type')\n      };\n      var id = objectNode.getAttribute('id');\n\n      if (id) {\n        objectData['id'] = id;\n      }\n\n      var pid = objectNode.getAttribute('pid');\n\n      if (pid) {\n        objectData['pid'] = pid;\n      }\n\n      var pindex = objectNode.getAttribute('pindex');\n\n      if (pindex) {\n        objectData['pindex'] = pindex;\n      }\n\n      var thumbnail = objectNode.getAttribute('thumbnail');\n\n      if (thumbnail) {\n        objectData['thumbnail'] = thumbnail;\n      }\n\n      var partnumber = objectNode.getAttribute('partnumber');\n\n      if (partnumber) {\n        objectData['partnumber'] = partnumber;\n      }\n\n      var name = objectNode.getAttribute('name');\n\n      if (name) {\n        objectData['name'] = name;\n      }\n\n      var meshNode = objectNode.querySelector('mesh');\n\n      if (meshNode) {\n        objectData['mesh'] = parseMeshNode(meshNode);\n      }\n\n      var componentsNode = objectNode.querySelector('components');\n\n      if (componentsNode) {\n        objectData['components'] = parseComponentsNode(componentsNode);\n      }\n\n      return objectData;\n    }\n\n    function parseResourcesNode(resourcesNode) {\n      var resourcesData = {};\n      resourcesData['basematerials'] = {};\n      var basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\n\n      for (var i = 0; i < basematerialsNodes.length; i++) {\n        var basematerialsNode = basematerialsNodes[i];\n        var basematerialsData = parseBasematerialsNode(basematerialsNode);\n        resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\n      } //\n\n\n      resourcesData['texture2d'] = {};\n      var textures2DNodes = resourcesNode.querySelectorAll('texture2d');\n\n      for (var _i4 = 0; _i4 < textures2DNodes.length; _i4++) {\n        var textures2DNode = textures2DNodes[_i4];\n        var texture2DData = parseTexture2DNode(textures2DNode);\n        resourcesData['texture2d'][texture2DData['id']] = texture2DData;\n      } //\n\n\n      resourcesData['colorgroup'] = {};\n      var colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\n\n      for (var _i5 = 0; _i5 < colorGroupNodes.length; _i5++) {\n        var colorGroupNode = colorGroupNodes[_i5];\n        var colorGroupData = parseColorGroupNode(colorGroupNode);\n        resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\n      } //\n\n\n      resourcesData['pbmetallicdisplayproperties'] = {};\n      var pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\n\n      for (var _i6 = 0; _i6 < pbmetallicdisplaypropertiesNodes.length; _i6++) {\n        var pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[_i6];\n        var pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n        resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\n      } //\n\n\n      resourcesData['texture2dgroup'] = {};\n      var textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\n\n      for (var _i7 = 0; _i7 < textures2DGroupNodes.length; _i7++) {\n        var textures2DGroupNode = textures2DGroupNodes[_i7];\n        var textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n        resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\n      } //\n\n\n      resourcesData['object'] = {};\n      var objectNodes = resourcesNode.querySelectorAll('object');\n\n      for (var _i8 = 0; _i8 < objectNodes.length; _i8++) {\n        var objectNode = objectNodes[_i8];\n        var objectData = parseObjectNode(objectNode);\n        resourcesData['object'][objectData['id']] = objectData;\n      }\n\n      return resourcesData;\n    }\n\n    function parseBuildNode(buildNode) {\n      var buildData = [];\n      var itemNodes = buildNode.querySelectorAll('item');\n\n      for (var i = 0; i < itemNodes.length; i++) {\n        var itemNode = itemNodes[i];\n        var buildItem = {\n          objectId: itemNode.getAttribute('objectid')\n        };\n        var transform = itemNode.getAttribute('transform');\n\n        if (transform) {\n          buildItem['transform'] = parseTransform(transform);\n        }\n\n        buildData.push(buildItem);\n      }\n\n      return buildData;\n    }\n\n    function parseModelNode(modelNode) {\n      var modelData = {\n        unit: modelNode.getAttribute('unit') || 'millimeter'\n      };\n      var metadataNodes = modelNode.querySelectorAll('metadata');\n\n      if (metadataNodes) {\n        modelData['metadata'] = parseMetadataNodes(metadataNodes);\n      }\n\n      var resourcesNode = modelNode.querySelector('resources');\n\n      if (resourcesNode) {\n        modelData['resources'] = parseResourcesNode(resourcesNode);\n      }\n\n      var buildNode = modelNode.querySelector('build');\n\n      if (buildNode) {\n        modelData['build'] = parseBuildNode(buildNode);\n      }\n\n      return modelData;\n    }\n\n    function buildTexture(texture2dgroup, objects, modelData, textureData) {\n      var texid = texture2dgroup.texid;\n      var texture2ds = modelData.resources.texture2d;\n      var texture2d = texture2ds[texid];\n\n      if (texture2d) {\n        var data = textureData[texture2d.path];\n        var type = texture2d.contenttype;\n        var blob = new Blob([data], {\n          type: type\n        });\n        var sourceURI = URL.createObjectURL(blob);\n        var texture = textureLoader.load(sourceURI, function () {\n          URL.revokeObjectURL(sourceURI);\n        });\n        texture.encoding = sRGBEncoding; // texture parameters\n\n        switch (texture2d.tilestyleu) {\n          case 'wrap':\n            texture.wrapS = RepeatWrapping;\n            break;\n\n          case 'mirror':\n            texture.wrapS = MirroredRepeatWrapping;\n            break;\n\n          case 'none':\n          case 'clamp':\n            texture.wrapS = ClampToEdgeWrapping;\n            break;\n\n          default:\n            texture.wrapS = RepeatWrapping;\n        }\n\n        switch (texture2d.tilestylev) {\n          case 'wrap':\n            texture.wrapT = RepeatWrapping;\n            break;\n\n          case 'mirror':\n            texture.wrapT = MirroredRepeatWrapping;\n            break;\n\n          case 'none':\n          case 'clamp':\n            texture.wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            texture.wrapT = RepeatWrapping;\n        }\n\n        switch (texture2d.filter) {\n          case 'auto':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n            break;\n\n          case 'linear':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearFilter;\n            break;\n\n          case 'nearest':\n            texture.magFilter = NearestFilter;\n            texture.minFilter = NearestFilter;\n            break;\n\n          default:\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n        }\n\n        return texture;\n      } else {\n        return null;\n      }\n    }\n\n    function buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData) {\n      var objectPindex = objectData.pindex;\n      var materialMap = {};\n\n      for (var i = 0, l = triangleProperties.length; i < l; i++) {\n        var triangleProperty = triangleProperties[i];\n        var pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\n        if (materialMap[pindex] === undefined) materialMap[pindex] = [];\n        materialMap[pindex].push(triangleProperty);\n      } //\n\n\n      var keys = Object.keys(materialMap);\n      var meshes = [];\n\n      for (var _i9 = 0, _l = keys.length; _i9 < _l; _i9++) {\n        var materialIndex = keys[_i9];\n        var trianglePropertiesProps = materialMap[materialIndex];\n        var basematerialData = basematerials.basematerials[materialIndex];\n        var material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial); //\n\n        var geometry = new BufferGeometry();\n        var positionData = [];\n        var vertices = meshData.vertices;\n\n        for (var j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n          var triangleProperty = trianglePropertiesProps[j];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        }\n\n        geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3)); //\n\n        var mesh = new Mesh(geometry, material);\n        meshes.push(mesh);\n      }\n\n      return meshes;\n    }\n\n    function buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData) {\n      // geometry\n      var geometry = new BufferGeometry();\n      var positionData = [];\n      var uvData = [];\n      var vertices = meshData.vertices;\n      var uvs = texture2dgroup.uvs;\n\n      for (var i = 0, l = triangleProperties.length; i < l; i++) {\n        var triangleProperty = triangleProperties[i];\n        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 2]); //\n\n        uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('uv', new Float32BufferAttribute(uvData, 2)); // material\n\n      var texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\n      var material = new MeshPhongMaterial({\n        map: texture,\n        flatShading: true\n      }); // mesh\n\n      var mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData, objectData) {\n      // geometry\n      var geometry = new BufferGeometry();\n      var positionData = [];\n      var colorData = [];\n      var vertices = meshData.vertices;\n      var colors = colorgroup.colors;\n\n      for (var i = 0, l = triangleProperties.length; i < l; i++) {\n        var triangleProperty = triangleProperties[i];\n        var v1 = triangleProperty.v1;\n        var v2 = triangleProperty.v2;\n        var v3 = triangleProperty.v3;\n        positionData.push(vertices[v1 * 3 + 0]);\n        positionData.push(vertices[v1 * 3 + 1]);\n        positionData.push(vertices[v1 * 3 + 2]);\n        positionData.push(vertices[v2 * 3 + 0]);\n        positionData.push(vertices[v2 * 3 + 1]);\n        positionData.push(vertices[v2 * 3 + 2]);\n        positionData.push(vertices[v3 * 3 + 0]);\n        positionData.push(vertices[v3 * 3 + 1]);\n        positionData.push(vertices[v3 * 3 + 2]); //\n\n        var p1 = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectData.pindex;\n        var p2 = triangleProperty.p2 !== undefined ? triangleProperty.p2 : p1;\n        var p3 = triangleProperty.p3 !== undefined ? triangleProperty.p3 : p1;\n        colorData.push(colors[p1 * 3 + 0]);\n        colorData.push(colors[p1 * 3 + 1]);\n        colorData.push(colors[p1 * 3 + 2]);\n        colorData.push(colors[p2 * 3 + 0]);\n        colorData.push(colors[p2 * 3 + 1]);\n        colorData.push(colors[p2 * 3 + 2]);\n        colorData.push(colors[p3 * 3 + 0]);\n        colorData.push(colors[p3 * 3 + 1]);\n        colorData.push(colors[p3 * 3 + 2]);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colorData, 3)); // material\n\n      var material = new MeshPhongMaterial({\n        vertexColors: true,\n        flatShading: true\n      }); // mesh\n\n      var mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildDefaultMesh(meshData) {\n      var geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(meshData['triangles'], 1));\n      geometry.setAttribute('position', new BufferAttribute(meshData['vertices'], 3));\n      var material = new MeshPhongMaterial({\n        color: 0xaaaaff,\n        flatShading: true\n      });\n      var mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildMeshes(resourceMap, modelData, meshData, textureData, objectData) {\n      var keys = Object.keys(resourceMap);\n      var meshes = [];\n\n      for (var i = 0, il = keys.length; i < il; i++) {\n        var resourceId = keys[i];\n        var triangleProperties = resourceMap[resourceId];\n        var resourceType = getResourceType(resourceId, modelData);\n\n        switch (resourceType) {\n          case 'material':\n            var basematerials = modelData.resources.basematerials[resourceId];\n            var newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData);\n\n            for (var j = 0, jl = newMeshes.length; j < jl; j++) {\n              meshes.push(newMeshes[j]);\n            }\n\n            break;\n\n          case 'texture':\n            var texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n            meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData));\n            break;\n\n          case 'vertexColors':\n            var colorgroup = modelData.resources.colorgroup[resourceId];\n            meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData, objectData));\n            break;\n\n          case 'default':\n            meshes.push(buildDefaultMesh(meshData));\n            break;\n\n          default:\n            console.error('THREE.3MFLoader: Unsupported resource type.');\n        }\n      }\n\n      return meshes;\n    }\n\n    function getResourceType(pid, modelData) {\n      if (modelData.resources.texture2dgroup[pid] !== undefined) {\n        return 'texture';\n      } else if (modelData.resources.basematerials[pid] !== undefined) {\n        return 'material';\n      } else if (modelData.resources.colorgroup[pid] !== undefined) {\n        return 'vertexColors';\n      } else if (pid === 'default') {\n        return 'default';\n      } else {\n        return undefined;\n      }\n    }\n\n    function analyzeObject(modelData, meshData, objectData) {\n      var resourceMap = {};\n      var triangleProperties = meshData['triangleProperties'];\n      var objectPid = objectData.pid;\n\n      for (var i = 0, l = triangleProperties.length; i < l; i++) {\n        var triangleProperty = triangleProperties[i];\n        var pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\n        if (pid === undefined) pid = 'default';\n        if (resourceMap[pid] === undefined) resourceMap[pid] = [];\n        resourceMap[pid].push(triangleProperty);\n      }\n\n      return resourceMap;\n    }\n\n    function buildGroup(meshData, objects, modelData, textureData, objectData) {\n      var group = new Group();\n      var resourceMap = analyzeObject(modelData, meshData, objectData);\n      var meshes = buildMeshes(resourceMap, modelData, meshData, textureData, objectData);\n\n      for (var i = 0, l = meshes.length; i < l; i++) {\n        group.add(meshes[i]);\n      }\n\n      return group;\n    }\n\n    function applyExtensions(extensions, meshData, modelXml) {\n      if (!extensions) {\n        return;\n      }\n\n      var availableExtensions = [];\n      var keys = Object.keys(extensions);\n\n      for (var i = 0; i < keys.length; i++) {\n        var ns = keys[i];\n\n        for (var j = 0; j < scope.availableExtensions.length; j++) {\n          var extension = scope.availableExtensions[j];\n\n          if (extension.ns === ns) {\n            availableExtensions.push(extension);\n          }\n        }\n      }\n\n      for (var _i10 = 0; _i10 < availableExtensions.length; _i10++) {\n        var extension = availableExtensions[_i10];\n        extension.apply(modelXml, extensions[extension['ns']], meshData);\n      }\n    }\n\n    function getBuild(data, objects, modelData, textureData, objectData, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data, objects, modelData, textureData, objectData);\n      return data.build;\n    }\n\n    function buildBasematerial(materialData, objects, modelData) {\n      var material;\n      var displaypropertiesid = materialData.displaypropertiesid;\n      var pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n\n      if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n        // metallic display property, use StandardMaterial\n        var pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n        var metallicData = pbmetallicdisplayproperty.data[materialData.index];\n        material = new MeshStandardMaterial({\n          flatShading: true,\n          roughness: metallicData.roughness,\n          metalness: metallicData.metallicness\n        });\n      } else {\n        // otherwise use PhongMaterial\n        material = new MeshPhongMaterial({\n          flatShading: true\n        });\n      }\n\n      material.name = materialData.name; // displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n      var displaycolor = materialData.displaycolor;\n      var color = displaycolor.substring(0, 7);\n      material.color.setStyle(color);\n      material.color.convertSRGBToLinear(); // displaycolor is in sRGB\n      // process alpha if set\n\n      if (displaycolor.length === 9) {\n        material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n      }\n\n      return material;\n    }\n\n    function buildComposite(compositeData, objects, modelData, textureData) {\n      var composite = new Group();\n\n      for (var j = 0; j < compositeData.length; j++) {\n        var component = compositeData[j];\n        var build = objects[component.objectId];\n\n        if (build === undefined) {\n          buildObject(component.objectId, objects, modelData, textureData);\n          build = objects[component.objectId];\n        }\n\n        var object3D = build.clone(); // apply component transform\n\n        var transform = component.transform;\n\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n\n        composite.add(object3D);\n      }\n\n      return composite;\n    }\n\n    function buildObject(objectId, objects, modelData, textureData) {\n      var objectData = modelData['resources']['object'][objectId];\n\n      if (objectData['mesh']) {\n        var meshData = objectData['mesh'];\n        var extensions = modelData['extensions'];\n        var modelXml = modelData['xml'];\n        applyExtensions(extensions, meshData, modelXml);\n        objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\n      } else {\n        var compositeData = objectData['components'];\n        objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\n      }\n    }\n\n    function buildObjects(data3mf) {\n      var modelsData = data3mf.model;\n      var modelRels = data3mf.modelRels;\n      var objects = {};\n      var modelsKeys = Object.keys(modelsData);\n      var textureData = {}; // evaluate model relationships to textures\n\n      if (modelRels) {\n        for (var i = 0, l = modelRels.length; i < l; i++) {\n          var modelRel = modelRels[i];\n          var textureKey = modelRel.target.substring(1);\n\n          if (data3mf.texture[textureKey]) {\n            textureData[modelRel.target] = data3mf.texture[textureKey];\n          }\n        }\n      } // start build\n\n\n      for (var _i11 = 0; _i11 < modelsKeys.length; _i11++) {\n        var modelsKey = modelsKeys[_i11];\n        var modelData = modelsData[modelsKey];\n        var objectIds = Object.keys(modelData['resources']['object']);\n\n        for (var j = 0; j < objectIds.length; j++) {\n          var objectId = objectIds[j];\n          buildObject(objectId, objects, modelData, textureData);\n        }\n      }\n\n      return objects;\n    }\n\n    function fetch3DModelPart(rels) {\n      for (var i = 0; i < rels.length; i++) {\n        var rel = rels[i];\n        var extension = rel.target.split('.').pop();\n        if (extension.toLowerCase() === 'model') return rel;\n      }\n    }\n\n    function build(objects, data3mf) {\n      var group = new Group();\n      var relationship = fetch3DModelPart(data3mf['rels']);\n      var buildData = data3mf.model[relationship['target'].substring(1)]['build'];\n\n      for (var i = 0; i < buildData.length; i++) {\n        var buildItem = buildData[i];\n        var object3D = objects[buildItem['objectId']]; // apply transform\n\n        var transform = buildItem['transform'];\n\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n\n        group.add(object3D);\n      }\n\n      return group;\n    }\n\n    var data3mf = loadDocument(data);\n    var objects = buildObjects(data3mf);\n    return build(objects, data3mf);\n  },\n  addExtension: function addExtension(extension) {\n    this.availableExtensions.push(extension);\n  }\n});\nexport { ThreeMFLoader };","map":{"version":3,"names":["Loader","FileLoader","TextureLoader","LoaderUtils","Group","Color","Matrix4","BufferGeometry","Float32BufferAttribute","Mesh","MeshPhongMaterial","BufferAttribute","MeshStandardMaterial","sRGBEncoding","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","LinearFilter","LinearMipmapLinearFilter","NearestFilter","unzipSync","ThreeMFLoader","manager","call","availableExtensions","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","data","textureLoader","loadDocument","zip","file","relsName","modelRelsName","modelPartNames","texturesPartNames","rels","modelRels","modelParts","printTicketParts","texturesParts","otherParts","Uint8Array","ReferenceError","match","push","relsView","relsFileText","decodeText","parseRelsXml","i","length","modelPart","view","fileText","xmlData","DOMParser","parseFromString","documentElement","nodeName","toLowerCase","modelNode","querySelector","extensions","attributes","attr","name","value","RegExp","$1","modelData","parseModelNode","keys","texturesPartName","model","printTicket","texture","other","relationships","relsXmlData","relsNodes","querySelectorAll","relsNode","relationship","target","getAttribute","id","type","parseMetadataNodes","metadataNodes","metadataData","metadataNode","validNames","indexOf","textContent","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialNode","basematerialData","parseBasematerialNode","index","parseTexture2DNode","texture2DNode","texture2dData","contenttype","tilestyleu","tilestylev","filter","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","uvs","tex2coordNode","u","v","parseFloat","Float32Array","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colors","colorObject","colorNode","color","setStyle","substring","convertSRGBToLinear","r","g","b","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","metallicness","roughness","parseMeshNode","meshNode","meshData","vertices","vertexNodes","vertexNode","x","y","z","triangleProperties","triangles","triangleNodes","triangleNode","v1","v2","v3","p1","p2","p3","pid","triangleProperty","parseInt","Uint32Array","parseComponentsNode","componentsNode","components","componentNodes","componentNode","componentData","parseComponentNode","transform","parseTransform","t","split","forEach","s","matrix","set","parseObjectNode","objectNode","objectData","pindex","thumbnail","partnumber","parseResourcesNode","resourcesNode","resourcesData","basematerialsNodes","textures2DNodes","textures2DNode","texture2DData","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesNode","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupNode","textures2DGroupData","objectNodes","parseBuildNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","unit","buildTexture","texture2dgroup","objects","textureData","texture2ds","resources","texture2d","blob","Blob","sourceURI","URL","createObjectURL","revokeObjectURL","encoding","wrapS","wrapT","magFilter","minFilter","buildBasematerialsMeshes","objectPindex","materialMap","l","undefined","meshes","materialIndex","trianglePropertiesProps","material","getBuild","buildBasematerial","geometry","positionData","j","jl","setAttribute","mesh","buildTexturedMesh","uvData","map","flatShading","buildVertexColorMesh","colorgroup","colorData","vertexColors","buildDefaultMesh","setIndex","buildMeshes","resourceMap","il","resourceId","resourceType","getResourceType","newMeshes","analyzeObject","objectPid","buildGroup","group","add","applyExtensions","modelXml","ns","extension","apply","builder","build","materialData","pbmetallicdisplayproperties","pbmetallicdisplayproperty","metalness","displaycolor","opacity","charAt","buildComposite","compositeData","composite","component","buildObject","object3D","clone","applyMatrix4","buildObjects","data3mf","modelsData","modelsKeys","modelRel","textureKey","modelsKey","objectIds","fetch3DModelPart","rel","pop","addExtension"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/loaders/3MFLoader.js"],"sourcesContent":["import { Loader, FileLoader, TextureLoader, LoaderUtils, Group, Color, Matrix4, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, MeshStandardMaterial, sRGBEncoding, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter } from 'three';\nimport { unzipSync } from 'fflate';\n\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\n\nvar ThreeMFLoader = function (manager) {\n  Loader.call(this, manager);\n  this.availableExtensions = [];\n};\n\nThreeMFLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: ThreeMFLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function (data) {\n    var scope = this;\n    var textureLoader = new TextureLoader(this.manager);\n\n    function loadDocument(data) {\n      var zip = null;\n      var file = null;\n      var relsName;\n      var modelRelsName;\n      var modelPartNames = [];\n      var texturesPartNames = [];\n      var rels;\n      var modelRels;\n      var modelParts = {};\n      var printTicketParts = {};\n      var texturesParts = {};\n      var otherParts = {};\n\n      try {\n        zip = unzipSync(new Uint8Array(data)); // eslint-disable-line no-undef\n      } catch (e) {\n        if (e instanceof ReferenceError) {\n          console.error('THREE.3MFLoader: fflate missing and file is compressed.');\n          return null;\n        }\n      }\n\n      for (file in zip) {\n        if (file.match(/\\_rels\\/.rels$/)) {\n          relsName = file;\n        } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n          modelRelsName = file;\n        } else if (file.match(/^3D\\/.*\\.model$/)) {\n          modelPartNames.push(file);\n        } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) ; else if (file.match(/^3D\\/Textures?\\/.*/)) {\n          texturesPartNames.push(file);\n        } else if (file.match(/^3D\\/Other\\/.*/)) ;\n      } //\n\n\n      var relsView = zip[relsName];\n      var relsFileText = LoaderUtils.decodeText(relsView);\n      rels = parseRelsXml(relsFileText); //\n\n      if (modelRelsName) {\n        var relsView = zip[modelRelsName];\n        var relsFileText = LoaderUtils.decodeText(relsView);\n        modelRels = parseRelsXml(relsFileText);\n      } //\n\n\n      for (let i = 0; i < modelPartNames.length; i++) {\n        var modelPart = modelPartNames[i];\n        var view = zip[modelPart];\n        var fileText = LoaderUtils.decodeText(view);\n        var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n        if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n          console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\n        }\n\n        var modelNode = xmlData.querySelector('model');\n        var extensions = {};\n\n        for (let i = 0; i < modelNode.attributes.length; i++) {\n          var attr = modelNode.attributes[i];\n\n          if (attr.name.match(/^xmlns:(.+)$/)) {\n            extensions[attr.value] = RegExp.$1;\n          }\n        }\n\n        var modelData = parseModelNode(modelNode);\n        modelData['xml'] = modelNode;\n\n        if (0 < Object.keys(extensions).length) {\n          modelData['extensions'] = extensions;\n        }\n\n        modelParts[modelPart] = modelData;\n      } //\n\n\n      for (let i = 0; i < texturesPartNames.length; i++) {\n        var texturesPartName = texturesPartNames[i];\n        texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n      }\n\n      return {\n        rels: rels,\n        modelRels: modelRels,\n        model: modelParts,\n        printTicket: printTicketParts,\n        texture: texturesParts,\n        other: otherParts\n      };\n    }\n\n    function parseRelsXml(relsFileText) {\n      var relationships = [];\n      var relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\n      var relsNodes = relsXmlData.querySelectorAll('Relationship');\n\n      for (let i = 0; i < relsNodes.length; i++) {\n        var relsNode = relsNodes[i];\n        var relationship = {\n          target: relsNode.getAttribute('Target'),\n          //required\n          id: relsNode.getAttribute('Id'),\n          //required\n          type: relsNode.getAttribute('Type') //required\n\n        };\n        relationships.push(relationship);\n      }\n\n      return relationships;\n    }\n\n    function parseMetadataNodes(metadataNodes) {\n      var metadataData = {};\n\n      for (let i = 0; i < metadataNodes.length; i++) {\n        var metadataNode = metadataNodes[i];\n        var name = metadataNode.getAttribute('name');\n        var validNames = ['Title', 'Designer', 'Description', 'Copyright', 'LicenseTerms', 'Rating', 'CreationDate', 'ModificationDate'];\n\n        if (0 <= validNames.indexOf(name)) {\n          metadataData[name] = metadataNode.textContent;\n        }\n      }\n\n      return metadataData;\n    }\n\n    function parseBasematerialsNode(basematerialsNode) {\n      var basematerialsData = {\n        id: basematerialsNode.getAttribute('id'),\n        // required\n        basematerials: []\n      };\n      var basematerialNodes = basematerialsNode.querySelectorAll('base');\n\n      for (let i = 0; i < basematerialNodes.length; i++) {\n        var basematerialNode = basematerialNodes[i];\n        var basematerialData = parseBasematerialNode(basematerialNode);\n        basematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\n        basematerialsData.basematerials.push(basematerialData);\n      }\n\n      return basematerialsData;\n    }\n\n    function parseTexture2DNode(texture2DNode) {\n      var texture2dData = {\n        id: texture2DNode.getAttribute('id'),\n        // required\n        path: texture2DNode.getAttribute('path'),\n        // required\n        contenttype: texture2DNode.getAttribute('contenttype'),\n        // required\n        tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n        tilestylev: texture2DNode.getAttribute('tilestylev'),\n        filter: texture2DNode.getAttribute('filter')\n      };\n      return texture2dData;\n    }\n\n    function parseTextures2DGroupNode(texture2DGroupNode) {\n      var texture2DGroupData = {\n        id: texture2DGroupNode.getAttribute('id'),\n        // required\n        texid: texture2DGroupNode.getAttribute('texid'),\n        // required\n        displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\n      };\n      var tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\n      var uvs = [];\n\n      for (let i = 0; i < tex2coordNodes.length; i++) {\n        var tex2coordNode = tex2coordNodes[i];\n        var u = tex2coordNode.getAttribute('u');\n        var v = tex2coordNode.getAttribute('v');\n        uvs.push(parseFloat(u), parseFloat(v));\n      }\n\n      texture2DGroupData['uvs'] = new Float32Array(uvs);\n      return texture2DGroupData;\n    }\n\n    function parseColorGroupNode(colorGroupNode) {\n      var colorGroupData = {\n        id: colorGroupNode.getAttribute('id'),\n        // required\n        displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\n      };\n      var colorNodes = colorGroupNode.querySelectorAll('color');\n      var colors = [];\n      var colorObject = new Color();\n\n      for (let i = 0; i < colorNodes.length; i++) {\n        var colorNode = colorNodes[i];\n        var color = colorNode.getAttribute('color');\n        colorObject.setStyle(color.substring(0, 7));\n        colorObject.convertSRGBToLinear(); // color is in sRGB\n\n        colors.push(colorObject.r, colorObject.g, colorObject.b);\n      }\n\n      colorGroupData['colors'] = new Float32Array(colors);\n      return colorGroupData;\n    }\n\n    function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n      var metallicDisplaypropertiesData = {\n        id: metallicDisplaypropetiesNode.getAttribute('id') // required\n\n      };\n      var metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\n      var metallicData = [];\n\n      for (let i = 0; i < metallicNodes.length; i++) {\n        var metallicNode = metallicNodes[i];\n        metallicData.push({\n          name: metallicNode.getAttribute('name'),\n          // required\n          metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\n          // required\n          roughness: parseFloat(metallicNode.getAttribute('roughness')) // required\n\n        });\n      }\n\n      metallicDisplaypropertiesData.data = metallicData;\n      return metallicDisplaypropertiesData;\n    }\n\n    function parseBasematerialNode(basematerialNode) {\n      var basematerialData = {};\n      basematerialData['name'] = basematerialNode.getAttribute('name'); // required\n\n      basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor'); // required\n\n      basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\n      return basematerialData;\n    }\n\n    function parseMeshNode(meshNode) {\n      var meshData = {};\n      var vertices = [];\n      var vertexNodes = meshNode.querySelectorAll('vertices vertex');\n\n      for (let i = 0; i < vertexNodes.length; i++) {\n        var vertexNode = vertexNodes[i];\n        var x = vertexNode.getAttribute('x');\n        var y = vertexNode.getAttribute('y');\n        var z = vertexNode.getAttribute('z');\n        vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n      }\n\n      meshData['vertices'] = new Float32Array(vertices);\n      var triangleProperties = [];\n      var triangles = [];\n      var triangleNodes = meshNode.querySelectorAll('triangles triangle');\n\n      for (let i = 0; i < triangleNodes.length; i++) {\n        var triangleNode = triangleNodes[i];\n        var v1 = triangleNode.getAttribute('v1');\n        var v2 = triangleNode.getAttribute('v2');\n        var v3 = triangleNode.getAttribute('v3');\n        var p1 = triangleNode.getAttribute('p1');\n        var p2 = triangleNode.getAttribute('p2');\n        var p3 = triangleNode.getAttribute('p3');\n        var pid = triangleNode.getAttribute('pid');\n        var triangleProperty = {};\n        triangleProperty['v1'] = parseInt(v1, 10);\n        triangleProperty['v2'] = parseInt(v2, 10);\n        triangleProperty['v3'] = parseInt(v3, 10);\n        triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']); // optional\n\n        if (p1) {\n          triangleProperty['p1'] = parseInt(p1, 10);\n        }\n\n        if (p2) {\n          triangleProperty['p2'] = parseInt(p2, 10);\n        }\n\n        if (p3) {\n          triangleProperty['p3'] = parseInt(p3, 10);\n        }\n\n        if (pid) {\n          triangleProperty['pid'] = pid;\n        }\n\n        if (0 < Object.keys(triangleProperty).length) {\n          triangleProperties.push(triangleProperty);\n        }\n      }\n\n      meshData['triangleProperties'] = triangleProperties;\n      meshData['triangles'] = new Uint32Array(triangles);\n      return meshData;\n    }\n\n    function parseComponentsNode(componentsNode) {\n      var components = [];\n      var componentNodes = componentsNode.querySelectorAll('component');\n\n      for (let i = 0; i < componentNodes.length; i++) {\n        var componentNode = componentNodes[i];\n        var componentData = parseComponentNode(componentNode);\n        components.push(componentData);\n      }\n\n      return components;\n    }\n\n    function parseComponentNode(componentNode) {\n      var componentData = {};\n      componentData['objectId'] = componentNode.getAttribute('objectid'); // required\n\n      var transform = componentNode.getAttribute('transform');\n\n      if (transform) {\n        componentData['transform'] = parseTransform(transform);\n      }\n\n      return componentData;\n    }\n\n    function parseTransform(transform) {\n      var t = [];\n      transform.split(' ').forEach(function (s) {\n        t.push(parseFloat(s));\n      });\n      var matrix = new Matrix4();\n      matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0.0, 0.0, 0.0, 1.0);\n      return matrix;\n    }\n\n    function parseObjectNode(objectNode) {\n      var objectData = {\n        type: objectNode.getAttribute('type')\n      };\n      var id = objectNode.getAttribute('id');\n\n      if (id) {\n        objectData['id'] = id;\n      }\n\n      var pid = objectNode.getAttribute('pid');\n\n      if (pid) {\n        objectData['pid'] = pid;\n      }\n\n      var pindex = objectNode.getAttribute('pindex');\n\n      if (pindex) {\n        objectData['pindex'] = pindex;\n      }\n\n      var thumbnail = objectNode.getAttribute('thumbnail');\n\n      if (thumbnail) {\n        objectData['thumbnail'] = thumbnail;\n      }\n\n      var partnumber = objectNode.getAttribute('partnumber');\n\n      if (partnumber) {\n        objectData['partnumber'] = partnumber;\n      }\n\n      var name = objectNode.getAttribute('name');\n\n      if (name) {\n        objectData['name'] = name;\n      }\n\n      var meshNode = objectNode.querySelector('mesh');\n\n      if (meshNode) {\n        objectData['mesh'] = parseMeshNode(meshNode);\n      }\n\n      var componentsNode = objectNode.querySelector('components');\n\n      if (componentsNode) {\n        objectData['components'] = parseComponentsNode(componentsNode);\n      }\n\n      return objectData;\n    }\n\n    function parseResourcesNode(resourcesNode) {\n      var resourcesData = {};\n      resourcesData['basematerials'] = {};\n      var basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\n\n      for (let i = 0; i < basematerialsNodes.length; i++) {\n        var basematerialsNode = basematerialsNodes[i];\n        var basematerialsData = parseBasematerialsNode(basematerialsNode);\n        resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\n      } //\n\n\n      resourcesData['texture2d'] = {};\n      var textures2DNodes = resourcesNode.querySelectorAll('texture2d');\n\n      for (let i = 0; i < textures2DNodes.length; i++) {\n        var textures2DNode = textures2DNodes[i];\n        var texture2DData = parseTexture2DNode(textures2DNode);\n        resourcesData['texture2d'][texture2DData['id']] = texture2DData;\n      } //\n\n\n      resourcesData['colorgroup'] = {};\n      var colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\n\n      for (let i = 0; i < colorGroupNodes.length; i++) {\n        var colorGroupNode = colorGroupNodes[i];\n        var colorGroupData = parseColorGroupNode(colorGroupNode);\n        resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\n      } //\n\n\n      resourcesData['pbmetallicdisplayproperties'] = {};\n      var pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\n\n      for (let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n        var pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\n        var pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n        resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\n      } //\n\n\n      resourcesData['texture2dgroup'] = {};\n      var textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\n\n      for (let i = 0; i < textures2DGroupNodes.length; i++) {\n        var textures2DGroupNode = textures2DGroupNodes[i];\n        var textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n        resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\n      } //\n\n\n      resourcesData['object'] = {};\n      var objectNodes = resourcesNode.querySelectorAll('object');\n\n      for (let i = 0; i < objectNodes.length; i++) {\n        var objectNode = objectNodes[i];\n        var objectData = parseObjectNode(objectNode);\n        resourcesData['object'][objectData['id']] = objectData;\n      }\n\n      return resourcesData;\n    }\n\n    function parseBuildNode(buildNode) {\n      var buildData = [];\n      var itemNodes = buildNode.querySelectorAll('item');\n\n      for (let i = 0; i < itemNodes.length; i++) {\n        var itemNode = itemNodes[i];\n        var buildItem = {\n          objectId: itemNode.getAttribute('objectid')\n        };\n        var transform = itemNode.getAttribute('transform');\n\n        if (transform) {\n          buildItem['transform'] = parseTransform(transform);\n        }\n\n        buildData.push(buildItem);\n      }\n\n      return buildData;\n    }\n\n    function parseModelNode(modelNode) {\n      var modelData = {\n        unit: modelNode.getAttribute('unit') || 'millimeter'\n      };\n      var metadataNodes = modelNode.querySelectorAll('metadata');\n\n      if (metadataNodes) {\n        modelData['metadata'] = parseMetadataNodes(metadataNodes);\n      }\n\n      var resourcesNode = modelNode.querySelector('resources');\n\n      if (resourcesNode) {\n        modelData['resources'] = parseResourcesNode(resourcesNode);\n      }\n\n      var buildNode = modelNode.querySelector('build');\n\n      if (buildNode) {\n        modelData['build'] = parseBuildNode(buildNode);\n      }\n\n      return modelData;\n    }\n\n    function buildTexture(texture2dgroup, objects, modelData, textureData) {\n      var texid = texture2dgroup.texid;\n      var texture2ds = modelData.resources.texture2d;\n      var texture2d = texture2ds[texid];\n\n      if (texture2d) {\n        var data = textureData[texture2d.path];\n        var type = texture2d.contenttype;\n        var blob = new Blob([data], {\n          type: type\n        });\n        var sourceURI = URL.createObjectURL(blob);\n        var texture = textureLoader.load(sourceURI, function () {\n          URL.revokeObjectURL(sourceURI);\n        });\n        texture.encoding = sRGBEncoding; // texture parameters\n\n        switch (texture2d.tilestyleu) {\n          case 'wrap':\n            texture.wrapS = RepeatWrapping;\n            break;\n\n          case 'mirror':\n            texture.wrapS = MirroredRepeatWrapping;\n            break;\n\n          case 'none':\n          case 'clamp':\n            texture.wrapS = ClampToEdgeWrapping;\n            break;\n\n          default:\n            texture.wrapS = RepeatWrapping;\n        }\n\n        switch (texture2d.tilestylev) {\n          case 'wrap':\n            texture.wrapT = RepeatWrapping;\n            break;\n\n          case 'mirror':\n            texture.wrapT = MirroredRepeatWrapping;\n            break;\n\n          case 'none':\n          case 'clamp':\n            texture.wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            texture.wrapT = RepeatWrapping;\n        }\n\n        switch (texture2d.filter) {\n          case 'auto':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n            break;\n\n          case 'linear':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearFilter;\n            break;\n\n          case 'nearest':\n            texture.magFilter = NearestFilter;\n            texture.minFilter = NearestFilter;\n            break;\n\n          default:\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n        }\n\n        return texture;\n      } else {\n        return null;\n      }\n    }\n\n    function buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData) {\n      var objectPindex = objectData.pindex;\n      var materialMap = {};\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        var triangleProperty = triangleProperties[i];\n        var pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\n        if (materialMap[pindex] === undefined) materialMap[pindex] = [];\n        materialMap[pindex].push(triangleProperty);\n      } //\n\n\n      var keys = Object.keys(materialMap);\n      var meshes = [];\n\n      for (let i = 0, l = keys.length; i < l; i++) {\n        var materialIndex = keys[i];\n        var trianglePropertiesProps = materialMap[materialIndex];\n        var basematerialData = basematerials.basematerials[materialIndex];\n        var material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial); //\n\n        var geometry = new BufferGeometry();\n        var positionData = [];\n        var vertices = meshData.vertices;\n\n        for (let j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n          var triangleProperty = trianglePropertiesProps[j];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        }\n\n        geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3)); //\n\n        var mesh = new Mesh(geometry, material);\n        meshes.push(mesh);\n      }\n\n      return meshes;\n    }\n\n    function buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData) {\n      // geometry\n      var geometry = new BufferGeometry();\n      var positionData = [];\n      var uvData = [];\n      var vertices = meshData.vertices;\n      var uvs = texture2dgroup.uvs;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        var triangleProperty = triangleProperties[i];\n        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 2]); //\n\n        uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('uv', new Float32BufferAttribute(uvData, 2)); // material\n\n      var texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\n      var material = new MeshPhongMaterial({\n        map: texture,\n        flatShading: true\n      }); // mesh\n\n      var mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData, objectData) {\n      // geometry\n      var geometry = new BufferGeometry();\n      var positionData = [];\n      var colorData = [];\n      var vertices = meshData.vertices;\n      var colors = colorgroup.colors;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        var triangleProperty = triangleProperties[i];\n        var v1 = triangleProperty.v1;\n        var v2 = triangleProperty.v2;\n        var v3 = triangleProperty.v3;\n        positionData.push(vertices[v1 * 3 + 0]);\n        positionData.push(vertices[v1 * 3 + 1]);\n        positionData.push(vertices[v1 * 3 + 2]);\n        positionData.push(vertices[v2 * 3 + 0]);\n        positionData.push(vertices[v2 * 3 + 1]);\n        positionData.push(vertices[v2 * 3 + 2]);\n        positionData.push(vertices[v3 * 3 + 0]);\n        positionData.push(vertices[v3 * 3 + 1]);\n        positionData.push(vertices[v3 * 3 + 2]); //\n\n        var p1 = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectData.pindex;\n        var p2 = triangleProperty.p2 !== undefined ? triangleProperty.p2 : p1;\n        var p3 = triangleProperty.p3 !== undefined ? triangleProperty.p3 : p1;\n        colorData.push(colors[p1 * 3 + 0]);\n        colorData.push(colors[p1 * 3 + 1]);\n        colorData.push(colors[p1 * 3 + 2]);\n        colorData.push(colors[p2 * 3 + 0]);\n        colorData.push(colors[p2 * 3 + 1]);\n        colorData.push(colors[p2 * 3 + 2]);\n        colorData.push(colors[p3 * 3 + 0]);\n        colorData.push(colors[p3 * 3 + 1]);\n        colorData.push(colors[p3 * 3 + 2]);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colorData, 3)); // material\n\n      var material = new MeshPhongMaterial({\n        vertexColors: true,\n        flatShading: true\n      }); // mesh\n\n      var mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildDefaultMesh(meshData) {\n      var geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(meshData['triangles'], 1));\n      geometry.setAttribute('position', new BufferAttribute(meshData['vertices'], 3));\n      var material = new MeshPhongMaterial({\n        color: 0xaaaaff,\n        flatShading: true\n      });\n      var mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildMeshes(resourceMap, modelData, meshData, textureData, objectData) {\n      var keys = Object.keys(resourceMap);\n      var meshes = [];\n\n      for (let i = 0, il = keys.length; i < il; i++) {\n        var resourceId = keys[i];\n        var triangleProperties = resourceMap[resourceId];\n        var resourceType = getResourceType(resourceId, modelData);\n\n        switch (resourceType) {\n          case 'material':\n            var basematerials = modelData.resources.basematerials[resourceId];\n            var newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData);\n\n            for (let j = 0, jl = newMeshes.length; j < jl; j++) {\n              meshes.push(newMeshes[j]);\n            }\n\n            break;\n\n          case 'texture':\n            var texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n            meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData));\n            break;\n\n          case 'vertexColors':\n            var colorgroup = modelData.resources.colorgroup[resourceId];\n            meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData, objectData));\n            break;\n\n          case 'default':\n            meshes.push(buildDefaultMesh(meshData));\n            break;\n\n          default:\n            console.error('THREE.3MFLoader: Unsupported resource type.');\n        }\n      }\n\n      return meshes;\n    }\n\n    function getResourceType(pid, modelData) {\n      if (modelData.resources.texture2dgroup[pid] !== undefined) {\n        return 'texture';\n      } else if (modelData.resources.basematerials[pid] !== undefined) {\n        return 'material';\n      } else if (modelData.resources.colorgroup[pid] !== undefined) {\n        return 'vertexColors';\n      } else if (pid === 'default') {\n        return 'default';\n      } else {\n        return undefined;\n      }\n    }\n\n    function analyzeObject(modelData, meshData, objectData) {\n      var resourceMap = {};\n      var triangleProperties = meshData['triangleProperties'];\n      var objectPid = objectData.pid;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        var triangleProperty = triangleProperties[i];\n        var pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\n        if (pid === undefined) pid = 'default';\n        if (resourceMap[pid] === undefined) resourceMap[pid] = [];\n        resourceMap[pid].push(triangleProperty);\n      }\n\n      return resourceMap;\n    }\n\n    function buildGroup(meshData, objects, modelData, textureData, objectData) {\n      var group = new Group();\n      var resourceMap = analyzeObject(modelData, meshData, objectData);\n      var meshes = buildMeshes(resourceMap, modelData, meshData, textureData, objectData);\n\n      for (let i = 0, l = meshes.length; i < l; i++) {\n        group.add(meshes[i]);\n      }\n\n      return group;\n    }\n\n    function applyExtensions(extensions, meshData, modelXml) {\n      if (!extensions) {\n        return;\n      }\n\n      var availableExtensions = [];\n      var keys = Object.keys(extensions);\n\n      for (let i = 0; i < keys.length; i++) {\n        var ns = keys[i];\n\n        for (let j = 0; j < scope.availableExtensions.length; j++) {\n          var extension = scope.availableExtensions[j];\n\n          if (extension.ns === ns) {\n            availableExtensions.push(extension);\n          }\n        }\n      }\n\n      for (let i = 0; i < availableExtensions.length; i++) {\n        var extension = availableExtensions[i];\n        extension.apply(modelXml, extensions[extension['ns']], meshData);\n      }\n    }\n\n    function getBuild(data, objects, modelData, textureData, objectData, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data, objects, modelData, textureData, objectData);\n      return data.build;\n    }\n\n    function buildBasematerial(materialData, objects, modelData) {\n      var material;\n      var displaypropertiesid = materialData.displaypropertiesid;\n      var pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n\n      if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n        // metallic display property, use StandardMaterial\n        var pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n        var metallicData = pbmetallicdisplayproperty.data[materialData.index];\n        material = new MeshStandardMaterial({\n          flatShading: true,\n          roughness: metallicData.roughness,\n          metalness: metallicData.metallicness\n        });\n      } else {\n        // otherwise use PhongMaterial\n        material = new MeshPhongMaterial({\n          flatShading: true\n        });\n      }\n\n      material.name = materialData.name; // displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n      var displaycolor = materialData.displaycolor;\n      var color = displaycolor.substring(0, 7);\n      material.color.setStyle(color);\n      material.color.convertSRGBToLinear(); // displaycolor is in sRGB\n      // process alpha if set\n\n      if (displaycolor.length === 9) {\n        material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n      }\n\n      return material;\n    }\n\n    function buildComposite(compositeData, objects, modelData, textureData) {\n      var composite = new Group();\n\n      for (let j = 0; j < compositeData.length; j++) {\n        var component = compositeData[j];\n        var build = objects[component.objectId];\n\n        if (build === undefined) {\n          buildObject(component.objectId, objects, modelData, textureData);\n          build = objects[component.objectId];\n        }\n\n        var object3D = build.clone(); // apply component transform\n\n        var transform = component.transform;\n\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n\n        composite.add(object3D);\n      }\n\n      return composite;\n    }\n\n    function buildObject(objectId, objects, modelData, textureData) {\n      var objectData = modelData['resources']['object'][objectId];\n\n      if (objectData['mesh']) {\n        var meshData = objectData['mesh'];\n        var extensions = modelData['extensions'];\n        var modelXml = modelData['xml'];\n        applyExtensions(extensions, meshData, modelXml);\n        objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\n      } else {\n        var compositeData = objectData['components'];\n        objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\n      }\n    }\n\n    function buildObjects(data3mf) {\n      var modelsData = data3mf.model;\n      var modelRels = data3mf.modelRels;\n      var objects = {};\n      var modelsKeys = Object.keys(modelsData);\n      var textureData = {}; // evaluate model relationships to textures\n\n      if (modelRels) {\n        for (let i = 0, l = modelRels.length; i < l; i++) {\n          var modelRel = modelRels[i];\n          var textureKey = modelRel.target.substring(1);\n\n          if (data3mf.texture[textureKey]) {\n            textureData[modelRel.target] = data3mf.texture[textureKey];\n          }\n        }\n      } // start build\n\n\n      for (let i = 0; i < modelsKeys.length; i++) {\n        var modelsKey = modelsKeys[i];\n        var modelData = modelsData[modelsKey];\n        var objectIds = Object.keys(modelData['resources']['object']);\n\n        for (let j = 0; j < objectIds.length; j++) {\n          var objectId = objectIds[j];\n          buildObject(objectId, objects, modelData, textureData);\n        }\n      }\n\n      return objects;\n    }\n\n    function fetch3DModelPart(rels) {\n      for (let i = 0; i < rels.length; i++) {\n        var rel = rels[i];\n        var extension = rel.target.split('.').pop();\n        if (extension.toLowerCase() === 'model') return rel;\n      }\n    }\n\n    function build(objects, data3mf) {\n      var group = new Group();\n      var relationship = fetch3DModelPart(data3mf['rels']);\n      var buildData = data3mf.model[relationship['target'].substring(1)]['build'];\n\n      for (let i = 0; i < buildData.length; i++) {\n        var buildItem = buildData[i];\n        var object3D = objects[buildItem['objectId']]; // apply transform\n\n        var transform = buildItem['transform'];\n\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n\n        group.add(object3D);\n      }\n\n      return group;\n    }\n\n    var data3mf = loadDocument(data);\n    var objects = buildObjects(data3mf);\n    return build(objects, data3mf);\n  },\n  addExtension: function (extension) {\n    this.availableExtensions.push(extension);\n  }\n});\n\nexport { ThreeMFLoader };\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,UAAjB,EAA6BC,aAA7B,EAA4CC,WAA5C,EAAyDC,KAAzD,EAAgEC,KAAhE,EAAuEC,OAAvE,EAAgFC,cAAhF,EAAgGC,sBAAhG,EAAwHC,IAAxH,EAA8HC,iBAA9H,EAAiJC,eAAjJ,EAAkKC,oBAAlK,EAAwLC,YAAxL,EAAsMC,cAAtM,EAAsNC,mBAAtN,EAA2OC,sBAA3O,EAAmQC,YAAnQ,EAAiRC,wBAAjR,EAA2SC,aAA3S,QAAgU,OAAhU;AACA,SAASC,SAAT,QAA0B,QAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,aAAa,GAAG,SAAhBA,aAAgB,CAAUC,OAAV,EAAmB;EACrCtB,MAAM,CAACuB,IAAP,CAAY,IAAZ,EAAkBD,OAAlB;EACA,KAAKE,mBAAL,GAA2B,EAA3B;AACD,CAHD;;AAKAH,aAAa,CAACI,SAAd,GAA0BC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAc5B,MAAM,CAACyB,SAArB,CAAd,EAA+C;EACvEI,WAAW,EAAER,aAD0D;EAEvES,IAAI,EAAE,cAAUC,GAAV,EAAeC,MAAf,EAAuBC,UAAvB,EAAmCC,OAAnC,EAA4C;IAChD,IAAIC,KAAK,GAAG,IAAZ;IACA,IAAIC,MAAM,GAAG,IAAInC,UAAJ,CAAekC,KAAK,CAACb,OAArB,CAAb;IACAc,MAAM,CAACC,OAAP,CAAeF,KAAK,CAACG,IAArB;IACAF,MAAM,CAACG,eAAP,CAAuB,aAAvB;IACAH,MAAM,CAACI,gBAAP,CAAwBL,KAAK,CAACM,aAA9B;IACAL,MAAM,CAACM,kBAAP,CAA0BP,KAAK,CAACQ,eAAhC;IACAP,MAAM,CAACN,IAAP,CAAYC,GAAZ,EAAiB,UAAUa,MAAV,EAAkB;MACjC,IAAI;QACFZ,MAAM,CAACG,KAAK,CAACU,KAAN,CAAYD,MAAZ,CAAD,CAAN;MACD,CAFD,CAEE,OAAOE,CAAP,EAAU;QACV,IAAIZ,OAAJ,EAAa;UACXA,OAAO,CAACY,CAAD,CAAP;QACD,CAFD,MAEO;UACLC,OAAO,CAACC,KAAR,CAAcF,CAAd;QACD;;QAEDX,KAAK,CAACb,OAAN,CAAc2B,SAAd,CAAwBlB,GAAxB;MACD;IACF,CAZD,EAYGE,UAZH,EAYeC,OAZf;EAaD,CAtBsE;EAuBvEW,KAAK,EAAE,eAAUK,IAAV,EAAgB;IACrB,IAAIf,KAAK,GAAG,IAAZ;IACA,IAAIgB,aAAa,GAAG,IAAIjD,aAAJ,CAAkB,KAAKoB,OAAvB,CAApB;;IAEA,SAAS8B,YAAT,CAAsBF,IAAtB,EAA4B;MAC1B,IAAIG,GAAG,GAAG,IAAV;MACA,IAAIC,IAAI,GAAG,IAAX;MACA,IAAIC,QAAJ;MACA,IAAIC,aAAJ;MACA,IAAIC,cAAc,GAAG,EAArB;MACA,IAAIC,iBAAiB,GAAG,EAAxB;MACA,IAAIC,IAAJ;MACA,IAAIC,SAAJ;MACA,IAAIC,UAAU,GAAG,EAAjB;MACA,IAAIC,gBAAgB,GAAG,EAAvB;MACA,IAAIC,aAAa,GAAG,EAApB;MACA,IAAIC,UAAU,GAAG,EAAjB;;MAEA,IAAI;QACFX,GAAG,GAAGjC,SAAS,CAAC,IAAI6C,UAAJ,CAAef,IAAf,CAAD,CAAf,CADE,CACqC;MACxC,CAFD,CAEE,OAAOJ,CAAP,EAAU;QACV,IAAIA,CAAC,YAAYoB,cAAjB,EAAiC;UAC/BnB,OAAO,CAACC,KAAR,CAAc,yDAAd;UACA,OAAO,IAAP;QACD;MACF;;MAED,KAAKM,IAAL,IAAaD,GAAb,EAAkB;QAChB,IAAIC,IAAI,CAACa,KAAL,CAAW,gBAAX,CAAJ,EAAkC;UAChCZ,QAAQ,GAAGD,IAAX;QACD,CAFD,MAEO,IAAIA,IAAI,CAACa,KAAL,CAAW,6BAAX,CAAJ,EAA+C;UACpDX,aAAa,GAAGF,IAAhB;QACD,CAFM,MAEA,IAAIA,IAAI,CAACa,KAAL,CAAW,iBAAX,CAAJ,EAAmC;UACxCV,cAAc,CAACW,IAAf,CAAoBd,IAApB;QACD,CAFM,MAEA,IAAIA,IAAI,CAACa,KAAL,CAAW,yBAAX,CAAJ,EAA2C,CAA3C,KAAkD,IAAIb,IAAI,CAACa,KAAL,CAAW,oBAAX,CAAJ,EAAsC;UAC7FT,iBAAiB,CAACU,IAAlB,CAAuBd,IAAvB;QACD,CAFwD,MAElD,IAAIA,IAAI,CAACa,KAAL,CAAW,gBAAX,CAAJ,EAAkC;MAC1C,CAjCyB,CAiCxB;;;MAGF,IAAIE,QAAQ,GAAGhB,GAAG,CAACE,QAAD,CAAlB;MACA,IAAIe,YAAY,GAAGnE,WAAW,CAACoE,UAAZ,CAAuBF,QAAvB,CAAnB;MACAV,IAAI,GAAGa,YAAY,CAACF,YAAD,CAAnB,CAtC0B,CAsCS;;MAEnC,IAAId,aAAJ,EAAmB;QACjB,IAAIa,QAAQ,GAAGhB,GAAG,CAACG,aAAD,CAAlB;QACA,IAAIc,YAAY,GAAGnE,WAAW,CAACoE,UAAZ,CAAuBF,QAAvB,CAAnB;QACAT,SAAS,GAAGY,YAAY,CAACF,YAAD,CAAxB;MACD,CA5CyB,CA4CxB;;;MAGF,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,cAAc,CAACiB,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;QAC9C,IAAIE,SAAS,GAAGlB,cAAc,CAACgB,CAAD,CAA9B;QACA,IAAIG,IAAI,GAAGvB,GAAG,CAACsB,SAAD,CAAd;QACA,IAAIE,QAAQ,GAAG1E,WAAW,CAACoE,UAAZ,CAAuBK,IAAvB,CAAf;QACA,IAAIE,OAAO,GAAG,IAAIC,SAAJ,GAAgBC,eAAhB,CAAgCH,QAAhC,EAA0C,iBAA1C,CAAd;;QAEA,IAAIC,OAAO,CAACG,eAAR,CAAwBC,QAAxB,CAAiCC,WAAjC,OAAmD,OAAvD,EAAgE;UAC9DpC,OAAO,CAACC,KAAR,CAAc,8DAAd,EAA8E2B,SAA9E;QACD;;QAED,IAAIS,SAAS,GAAGN,OAAO,CAACO,aAAR,CAAsB,OAAtB,CAAhB;QACA,IAAIC,UAAU,GAAG,EAAjB;;QAEA,KAAK,IAAIb,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGW,SAAS,CAACG,UAAV,CAAqBb,MAAzC,EAAiDD,EAAC,EAAlD,EAAsD;UACpD,IAAIe,IAAI,GAAGJ,SAAS,CAACG,UAAV,CAAqBd,EAArB,CAAX;;UAEA,IAAIe,IAAI,CAACC,IAAL,CAAUtB,KAAV,CAAgB,cAAhB,CAAJ,EAAqC;YACnCmB,UAAU,CAACE,IAAI,CAACE,KAAN,CAAV,GAAyBC,MAAM,CAACC,EAAhC;UACD;QACF;;QAED,IAAIC,SAAS,GAAGC,cAAc,CAACV,SAAD,CAA9B;QACAS,SAAS,CAAC,KAAD,CAAT,GAAmBT,SAAnB;;QAEA,IAAI,IAAI1D,MAAM,CAACqE,IAAP,CAAYT,UAAZ,EAAwBZ,MAAhC,EAAwC;UACtCmB,SAAS,CAAC,YAAD,CAAT,GAA0BP,UAA1B;QACD;;QAEDzB,UAAU,CAACc,SAAD,CAAV,GAAwBkB,SAAxB;MACD,CA5EyB,CA4ExB;;;MAGF,KAAK,IAAIpB,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGf,iBAAiB,CAACgB,MAAtC,EAA8CD,GAAC,EAA/C,EAAmD;QACjD,IAAIuB,gBAAgB,GAAGtC,iBAAiB,CAACe,GAAD,CAAxC;QACAV,aAAa,CAACiC,gBAAD,CAAb,GAAkC3C,GAAG,CAAC2C,gBAAD,CAAH,CAAsBpD,MAAxD;MACD;;MAED,OAAO;QACLe,IAAI,EAAEA,IADD;QAELC,SAAS,EAAEA,SAFN;QAGLqC,KAAK,EAAEpC,UAHF;QAILqC,WAAW,EAAEpC,gBAJR;QAKLqC,OAAO,EAAEpC,aALJ;QAMLqC,KAAK,EAAEpC;MANF,CAAP;IAQD;;IAED,SAASQ,YAAT,CAAsBF,YAAtB,EAAoC;MAClC,IAAI+B,aAAa,GAAG,EAApB;MACA,IAAIC,WAAW,GAAG,IAAIvB,SAAJ,GAAgBC,eAAhB,CAAgCV,YAAhC,EAA8C,iBAA9C,CAAlB;MACA,IAAIiC,SAAS,GAAGD,WAAW,CAACE,gBAAZ,CAA6B,cAA7B,CAAhB;;MAEA,KAAK,IAAI/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8B,SAAS,CAAC7B,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;QACzC,IAAIgC,QAAQ,GAAGF,SAAS,CAAC9B,CAAD,CAAxB;QACA,IAAIiC,YAAY,GAAG;UACjBC,MAAM,EAAEF,QAAQ,CAACG,YAAT,CAAsB,QAAtB,CADS;UAEjB;UACAC,EAAE,EAAEJ,QAAQ,CAACG,YAAT,CAAsB,IAAtB,CAHa;UAIjB;UACAE,IAAI,EAAEL,QAAQ,CAACG,YAAT,CAAsB,MAAtB,CALW,CAKmB;;QALnB,CAAnB;QAQAP,aAAa,CAACjC,IAAd,CAAmBsC,YAAnB;MACD;;MAED,OAAOL,aAAP;IACD;;IAED,SAASU,kBAAT,CAA4BC,aAA5B,EAA2C;MACzC,IAAIC,YAAY,GAAG,EAAnB;;MAEA,KAAK,IAAIxC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuC,aAAa,CAACtC,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;QAC7C,IAAIyC,YAAY,GAAGF,aAAa,CAACvC,CAAD,CAAhC;QACA,IAAIgB,IAAI,GAAGyB,YAAY,CAACN,YAAb,CAA0B,MAA1B,CAAX;QACA,IAAIO,UAAU,GAAG,CAAC,OAAD,EAAU,UAAV,EAAsB,aAAtB,EAAqC,WAArC,EAAkD,cAAlD,EAAkE,QAAlE,EAA4E,cAA5E,EAA4F,kBAA5F,CAAjB;;QAEA,IAAI,KAAKA,UAAU,CAACC,OAAX,CAAmB3B,IAAnB,CAAT,EAAmC;UACjCwB,YAAY,CAACxB,IAAD,CAAZ,GAAqByB,YAAY,CAACG,WAAlC;QACD;MACF;;MAED,OAAOJ,YAAP;IACD;;IAED,SAASK,sBAAT,CAAgCC,iBAAhC,EAAmD;MACjD,IAAIC,iBAAiB,GAAG;QACtBX,EAAE,EAAEU,iBAAiB,CAACX,YAAlB,CAA+B,IAA/B,CADkB;QAEtB;QACAa,aAAa,EAAE;MAHO,CAAxB;MAKA,IAAIC,iBAAiB,GAAGH,iBAAiB,CAACf,gBAAlB,CAAmC,MAAnC,CAAxB;;MAEA,KAAK,IAAI/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiD,iBAAiB,CAAChD,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;QACjD,IAAIkD,gBAAgB,GAAGD,iBAAiB,CAACjD,CAAD,CAAxC;QACA,IAAImD,gBAAgB,GAAGC,qBAAqB,CAACF,gBAAD,CAA5C;QACAC,gBAAgB,CAACE,KAAjB,GAAyBrD,CAAzB,CAHiD,CAGrB;;QAE5B+C,iBAAiB,CAACC,aAAlB,CAAgCrD,IAAhC,CAAqCwD,gBAArC;MACD;;MAED,OAAOJ,iBAAP;IACD;;IAED,SAASO,kBAAT,CAA4BC,aAA5B,EAA2C;MACzC,IAAIC,aAAa,GAAG;QAClBpB,EAAE,EAAEmB,aAAa,CAACpB,YAAd,CAA2B,IAA3B,CADc;QAElB;QACAtE,IAAI,EAAE0F,aAAa,CAACpB,YAAd,CAA2B,MAA3B,CAHY;QAIlB;QACAsB,WAAW,EAAEF,aAAa,CAACpB,YAAd,CAA2B,aAA3B,CALK;QAMlB;QACAuB,UAAU,EAAEH,aAAa,CAACpB,YAAd,CAA2B,YAA3B,CAPM;QAQlBwB,UAAU,EAAEJ,aAAa,CAACpB,YAAd,CAA2B,YAA3B,CARM;QASlByB,MAAM,EAAEL,aAAa,CAACpB,YAAd,CAA2B,QAA3B;MATU,CAApB;MAWA,OAAOqB,aAAP;IACD;;IAED,SAASK,wBAAT,CAAkCC,kBAAlC,EAAsD;MACpD,IAAIC,kBAAkB,GAAG;QACvB3B,EAAE,EAAE0B,kBAAkB,CAAC3B,YAAnB,CAAgC,IAAhC,CADmB;QAEvB;QACA6B,KAAK,EAAEF,kBAAkB,CAAC3B,YAAnB,CAAgC,OAAhC,CAHgB;QAIvB;QACA8B,mBAAmB,EAAEH,kBAAkB,CAAC3B,YAAnB,CAAgC,qBAAhC;MALE,CAAzB;MAOA,IAAI+B,cAAc,GAAGJ,kBAAkB,CAAC/B,gBAAnB,CAAoC,WAApC,CAArB;MACA,IAAIoC,GAAG,GAAG,EAAV;;MAEA,KAAK,IAAInE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkE,cAAc,CAACjE,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;QAC9C,IAAIoE,aAAa,GAAGF,cAAc,CAAClE,CAAD,CAAlC;QACA,IAAIqE,CAAC,GAAGD,aAAa,CAACjC,YAAd,CAA2B,GAA3B,CAAR;QACA,IAAImC,CAAC,GAAGF,aAAa,CAACjC,YAAd,CAA2B,GAA3B,CAAR;QACAgC,GAAG,CAACxE,IAAJ,CAAS4E,UAAU,CAACF,CAAD,CAAnB,EAAwBE,UAAU,CAACD,CAAD,CAAlC;MACD;;MAEDP,kBAAkB,CAAC,KAAD,CAAlB,GAA4B,IAAIS,YAAJ,CAAiBL,GAAjB,CAA5B;MACA,OAAOJ,kBAAP;IACD;;IAED,SAASU,mBAAT,CAA6BC,cAA7B,EAA6C;MAC3C,IAAIC,cAAc,GAAG;QACnBvC,EAAE,EAAEsC,cAAc,CAACvC,YAAf,CAA4B,IAA5B,CADe;QAEnB;QACA8B,mBAAmB,EAAES,cAAc,CAACvC,YAAf,CAA4B,qBAA5B;MAHF,CAArB;MAKA,IAAIyC,UAAU,GAAGF,cAAc,CAAC3C,gBAAf,CAAgC,OAAhC,CAAjB;MACA,IAAI8C,MAAM,GAAG,EAAb;MACA,IAAIC,WAAW,GAAG,IAAIlJ,KAAJ,EAAlB;;MAEA,KAAK,IAAIoE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4E,UAAU,CAAC3E,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;QAC1C,IAAI+E,SAAS,GAAGH,UAAU,CAAC5E,CAAD,CAA1B;QACA,IAAIgF,KAAK,GAAGD,SAAS,CAAC5C,YAAV,CAAuB,OAAvB,CAAZ;QACA2C,WAAW,CAACG,QAAZ,CAAqBD,KAAK,CAACE,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,CAArB;QACAJ,WAAW,CAACK,mBAAZ,GAJ0C,CAIP;;QAEnCN,MAAM,CAAClF,IAAP,CAAYmF,WAAW,CAACM,CAAxB,EAA2BN,WAAW,CAACO,CAAvC,EAA0CP,WAAW,CAACQ,CAAtD;MACD;;MAEDX,cAAc,CAAC,QAAD,CAAd,GAA2B,IAAIH,YAAJ,CAAiBK,MAAjB,CAA3B;MACA,OAAOF,cAAP;IACD;;IAED,SAASY,kCAAT,CAA4CC,4BAA5C,EAA0E;MACxE,IAAIC,6BAA6B,GAAG;QAClCrD,EAAE,EAAEoD,4BAA4B,CAACrD,YAA7B,CAA0C,IAA1C,CAD8B,CACkB;;MADlB,CAApC;MAIA,IAAIuD,aAAa,GAAGF,4BAA4B,CAACzD,gBAA7B,CAA8C,YAA9C,CAApB;MACA,IAAI4D,YAAY,GAAG,EAAnB;;MAEA,KAAK,IAAI3F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0F,aAAa,CAACzF,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;QAC7C,IAAI4F,YAAY,GAAGF,aAAa,CAAC1F,CAAD,CAAhC;QACA2F,YAAY,CAAChG,IAAb,CAAkB;UAChBqB,IAAI,EAAE4E,YAAY,CAACzD,YAAb,CAA0B,MAA1B,CADU;UAEhB;UACA0D,YAAY,EAAEtB,UAAU,CAACqB,YAAY,CAACzD,YAAb,CAA0B,cAA1B,CAAD,CAHR;UAIhB;UACA2D,SAAS,EAAEvB,UAAU,CAACqB,YAAY,CAACzD,YAAb,CAA0B,WAA1B,CAAD,CALL,CAK8C;;QAL9C,CAAlB;MAQD;;MAEDsD,6BAA6B,CAAChH,IAA9B,GAAqCkH,YAArC;MACA,OAAOF,6BAAP;IACD;;IAED,SAASrC,qBAAT,CAA+BF,gBAA/B,EAAiD;MAC/C,IAAIC,gBAAgB,GAAG,EAAvB;MACAA,gBAAgB,CAAC,MAAD,CAAhB,GAA2BD,gBAAgB,CAACf,YAAjB,CAA8B,MAA9B,CAA3B,CAF+C,CAEmB;;MAElEgB,gBAAgB,CAAC,cAAD,CAAhB,GAAmCD,gBAAgB,CAACf,YAAjB,CAA8B,cAA9B,CAAnC,CAJ+C,CAImC;;MAElFgB,gBAAgB,CAAC,qBAAD,CAAhB,GAA0CD,gBAAgB,CAACf,YAAjB,CAA8B,qBAA9B,CAA1C;MACA,OAAOgB,gBAAP;IACD;;IAED,SAAS4C,aAAT,CAAuBC,QAAvB,EAAiC;MAC/B,IAAIC,QAAQ,GAAG,EAAf;MACA,IAAIC,QAAQ,GAAG,EAAf;MACA,IAAIC,WAAW,GAAGH,QAAQ,CAACjE,gBAAT,CAA0B,iBAA1B,CAAlB;;MAEA,KAAK,IAAI/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmG,WAAW,CAAClG,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;QAC3C,IAAIoG,UAAU,GAAGD,WAAW,CAACnG,CAAD,CAA5B;QACA,IAAIqG,CAAC,GAAGD,UAAU,CAACjE,YAAX,CAAwB,GAAxB,CAAR;QACA,IAAImE,CAAC,GAAGF,UAAU,CAACjE,YAAX,CAAwB,GAAxB,CAAR;QACA,IAAIoE,CAAC,GAAGH,UAAU,CAACjE,YAAX,CAAwB,GAAxB,CAAR;QACA+D,QAAQ,CAACvG,IAAT,CAAc4E,UAAU,CAAC8B,CAAD,CAAxB,EAA6B9B,UAAU,CAAC+B,CAAD,CAAvC,EAA4C/B,UAAU,CAACgC,CAAD,CAAtD;MACD;;MAEDN,QAAQ,CAAC,UAAD,CAAR,GAAuB,IAAIzB,YAAJ,CAAiB0B,QAAjB,CAAvB;MACA,IAAIM,kBAAkB,GAAG,EAAzB;MACA,IAAIC,SAAS,GAAG,EAAhB;MACA,IAAIC,aAAa,GAAGV,QAAQ,CAACjE,gBAAT,CAA0B,oBAA1B,CAApB;;MAEA,KAAK,IAAI/B,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG0G,aAAa,CAACzG,MAAlC,EAA0CD,GAAC,EAA3C,EAA+C;QAC7C,IAAI2G,YAAY,GAAGD,aAAa,CAAC1G,GAAD,CAAhC;QACA,IAAI4G,EAAE,GAAGD,YAAY,CAACxE,YAAb,CAA0B,IAA1B,CAAT;QACA,IAAI0E,EAAE,GAAGF,YAAY,CAACxE,YAAb,CAA0B,IAA1B,CAAT;QACA,IAAI2E,EAAE,GAAGH,YAAY,CAACxE,YAAb,CAA0B,IAA1B,CAAT;QACA,IAAI4E,EAAE,GAAGJ,YAAY,CAACxE,YAAb,CAA0B,IAA1B,CAAT;QACA,IAAI6E,EAAE,GAAGL,YAAY,CAACxE,YAAb,CAA0B,IAA1B,CAAT;QACA,IAAI8E,EAAE,GAAGN,YAAY,CAACxE,YAAb,CAA0B,IAA1B,CAAT;QACA,IAAI+E,GAAG,GAAGP,YAAY,CAACxE,YAAb,CAA0B,KAA1B,CAAV;QACA,IAAIgF,gBAAgB,GAAG,EAAvB;QACAA,gBAAgB,CAAC,IAAD,CAAhB,GAAyBC,QAAQ,CAACR,EAAD,EAAK,EAAL,CAAjC;QACAO,gBAAgB,CAAC,IAAD,CAAhB,GAAyBC,QAAQ,CAACP,EAAD,EAAK,EAAL,CAAjC;QACAM,gBAAgB,CAAC,IAAD,CAAhB,GAAyBC,QAAQ,CAACN,EAAD,EAAK,EAAL,CAAjC;QACAL,SAAS,CAAC9G,IAAV,CAAewH,gBAAgB,CAAC,IAAD,CAA/B,EAAuCA,gBAAgB,CAAC,IAAD,CAAvD,EAA+DA,gBAAgB,CAAC,IAAD,CAA/E,EAb6C,CAa2C;;QAExF,IAAIJ,EAAJ,EAAQ;UACNI,gBAAgB,CAAC,IAAD,CAAhB,GAAyBC,QAAQ,CAACL,EAAD,EAAK,EAAL,CAAjC;QACD;;QAED,IAAIC,EAAJ,EAAQ;UACNG,gBAAgB,CAAC,IAAD,CAAhB,GAAyBC,QAAQ,CAACJ,EAAD,EAAK,EAAL,CAAjC;QACD;;QAED,IAAIC,EAAJ,EAAQ;UACNE,gBAAgB,CAAC,IAAD,CAAhB,GAAyBC,QAAQ,CAACH,EAAD,EAAK,EAAL,CAAjC;QACD;;QAED,IAAIC,GAAJ,EAAS;UACPC,gBAAgB,CAAC,KAAD,CAAhB,GAA0BD,GAA1B;QACD;;QAED,IAAI,IAAIjK,MAAM,CAACqE,IAAP,CAAY6F,gBAAZ,EAA8BlH,MAAtC,EAA8C;UAC5CuG,kBAAkB,CAAC7G,IAAnB,CAAwBwH,gBAAxB;QACD;MACF;;MAEDlB,QAAQ,CAAC,oBAAD,CAAR,GAAiCO,kBAAjC;MACAP,QAAQ,CAAC,WAAD,CAAR,GAAwB,IAAIoB,WAAJ,CAAgBZ,SAAhB,CAAxB;MACA,OAAOR,QAAP;IACD;;IAED,SAASqB,mBAAT,CAA6BC,cAA7B,EAA6C;MAC3C,IAAIC,UAAU,GAAG,EAAjB;MACA,IAAIC,cAAc,GAAGF,cAAc,CAACxF,gBAAf,CAAgC,WAAhC,CAArB;;MAEA,KAAK,IAAI/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyH,cAAc,CAACxH,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;QAC9C,IAAI0H,aAAa,GAAGD,cAAc,CAACzH,CAAD,CAAlC;QACA,IAAI2H,aAAa,GAAGC,kBAAkB,CAACF,aAAD,CAAtC;QACAF,UAAU,CAAC7H,IAAX,CAAgBgI,aAAhB;MACD;;MAED,OAAOH,UAAP;IACD;;IAED,SAASI,kBAAT,CAA4BF,aAA5B,EAA2C;MACzC,IAAIC,aAAa,GAAG,EAApB;MACAA,aAAa,CAAC,UAAD,CAAb,GAA4BD,aAAa,CAACvF,YAAd,CAA2B,UAA3B,CAA5B,CAFyC,CAE2B;;MAEpE,IAAI0F,SAAS,GAAGH,aAAa,CAACvF,YAAd,CAA2B,WAA3B,CAAhB;;MAEA,IAAI0F,SAAJ,EAAe;QACbF,aAAa,CAAC,WAAD,CAAb,GAA6BG,cAAc,CAACD,SAAD,CAA3C;MACD;;MAED,OAAOF,aAAP;IACD;;IAED,SAASG,cAAT,CAAwBD,SAAxB,EAAmC;MACjC,IAAIE,CAAC,GAAG,EAAR;MACAF,SAAS,CAACG,KAAV,CAAgB,GAAhB,EAAqBC,OAArB,CAA6B,UAAUC,CAAV,EAAa;QACxCH,CAAC,CAACpI,IAAF,CAAO4E,UAAU,CAAC2D,CAAD,CAAjB;MACD,CAFD;MAGA,IAAIC,MAAM,GAAG,IAAItM,OAAJ,EAAb;MACAsM,MAAM,CAACC,GAAP,CAAWL,CAAC,CAAC,CAAD,CAAZ,EAAiBA,CAAC,CAAC,CAAD,CAAlB,EAAuBA,CAAC,CAAC,CAAD,CAAxB,EAA6BA,CAAC,CAAC,CAAD,CAA9B,EAAmCA,CAAC,CAAC,CAAD,CAApC,EAAyCA,CAAC,CAAC,CAAD,CAA1C,EAA+CA,CAAC,CAAC,CAAD,CAAhD,EAAqDA,CAAC,CAAC,EAAD,CAAtD,EAA4DA,CAAC,CAAC,CAAD,CAA7D,EAAkEA,CAAC,CAAC,CAAD,CAAnE,EAAwEA,CAAC,CAAC,CAAD,CAAzE,EAA8EA,CAAC,CAAC,EAAD,CAA/E,EAAqF,GAArF,EAA0F,GAA1F,EAA+F,GAA/F,EAAoG,GAApG;MACA,OAAOI,MAAP;IACD;;IAED,SAASE,eAAT,CAAyBC,UAAzB,EAAqC;MACnC,IAAIC,UAAU,GAAG;QACflG,IAAI,EAAEiG,UAAU,CAACnG,YAAX,CAAwB,MAAxB;MADS,CAAjB;MAGA,IAAIC,EAAE,GAAGkG,UAAU,CAACnG,YAAX,CAAwB,IAAxB,CAAT;;MAEA,IAAIC,EAAJ,EAAQ;QACNmG,UAAU,CAAC,IAAD,CAAV,GAAmBnG,EAAnB;MACD;;MAED,IAAI8E,GAAG,GAAGoB,UAAU,CAACnG,YAAX,CAAwB,KAAxB,CAAV;;MAEA,IAAI+E,GAAJ,EAAS;QACPqB,UAAU,CAAC,KAAD,CAAV,GAAoBrB,GAApB;MACD;;MAED,IAAIsB,MAAM,GAAGF,UAAU,CAACnG,YAAX,CAAwB,QAAxB,CAAb;;MAEA,IAAIqG,MAAJ,EAAY;QACVD,UAAU,CAAC,QAAD,CAAV,GAAuBC,MAAvB;MACD;;MAED,IAAIC,SAAS,GAAGH,UAAU,CAACnG,YAAX,CAAwB,WAAxB,CAAhB;;MAEA,IAAIsG,SAAJ,EAAe;QACbF,UAAU,CAAC,WAAD,CAAV,GAA0BE,SAA1B;MACD;;MAED,IAAIC,UAAU,GAAGJ,UAAU,CAACnG,YAAX,CAAwB,YAAxB,CAAjB;;MAEA,IAAIuG,UAAJ,EAAgB;QACdH,UAAU,CAAC,YAAD,CAAV,GAA2BG,UAA3B;MACD;;MAED,IAAI1H,IAAI,GAAGsH,UAAU,CAACnG,YAAX,CAAwB,MAAxB,CAAX;;MAEA,IAAInB,IAAJ,EAAU;QACRuH,UAAU,CAAC,MAAD,CAAV,GAAqBvH,IAArB;MACD;;MAED,IAAIgF,QAAQ,GAAGsC,UAAU,CAAC1H,aAAX,CAAyB,MAAzB,CAAf;;MAEA,IAAIoF,QAAJ,EAAc;QACZuC,UAAU,CAAC,MAAD,CAAV,GAAqBxC,aAAa,CAACC,QAAD,CAAlC;MACD;;MAED,IAAIuB,cAAc,GAAGe,UAAU,CAAC1H,aAAX,CAAyB,YAAzB,CAArB;;MAEA,IAAI2G,cAAJ,EAAoB;QAClBgB,UAAU,CAAC,YAAD,CAAV,GAA2BjB,mBAAmB,CAACC,cAAD,CAA9C;MACD;;MAED,OAAOgB,UAAP;IACD;;IAED,SAASI,kBAAT,CAA4BC,aAA5B,EAA2C;MACzC,IAAIC,aAAa,GAAG,EAApB;MACAA,aAAa,CAAC,eAAD,CAAb,GAAiC,EAAjC;MACA,IAAIC,kBAAkB,GAAGF,aAAa,CAAC7G,gBAAd,CAA+B,eAA/B,CAAzB;;MAEA,KAAK,IAAI/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8I,kBAAkB,CAAC7I,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;QAClD,IAAI8C,iBAAiB,GAAGgG,kBAAkB,CAAC9I,CAAD,CAA1C;QACA,IAAI+C,iBAAiB,GAAGF,sBAAsB,CAACC,iBAAD,CAA9C;QACA+F,aAAa,CAAC,eAAD,CAAb,CAA+B9F,iBAAiB,CAAC,IAAD,CAAhD,IAA0DA,iBAA1D;MACD,CATwC,CASvC;;;MAGF8F,aAAa,CAAC,WAAD,CAAb,GAA6B,EAA7B;MACA,IAAIE,eAAe,GAAGH,aAAa,CAAC7G,gBAAd,CAA+B,WAA/B,CAAtB;;MAEA,KAAK,IAAI/B,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG+I,eAAe,CAAC9I,MAApC,EAA4CD,GAAC,EAA7C,EAAiD;QAC/C,IAAIgJ,cAAc,GAAGD,eAAe,CAAC/I,GAAD,CAApC;QACA,IAAIiJ,aAAa,GAAG3F,kBAAkB,CAAC0F,cAAD,CAAtC;QACAH,aAAa,CAAC,WAAD,CAAb,CAA2BI,aAAa,CAAC,IAAD,CAAxC,IAAkDA,aAAlD;MACD,CAnBwC,CAmBvC;;;MAGFJ,aAAa,CAAC,YAAD,CAAb,GAA8B,EAA9B;MACA,IAAIK,eAAe,GAAGN,aAAa,CAAC7G,gBAAd,CAA+B,YAA/B,CAAtB;;MAEA,KAAK,IAAI/B,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGkJ,eAAe,CAACjJ,MAApC,EAA4CD,GAAC,EAA7C,EAAiD;QAC/C,IAAI0E,cAAc,GAAGwE,eAAe,CAAClJ,GAAD,CAApC;QACA,IAAI2E,cAAc,GAAGF,mBAAmB,CAACC,cAAD,CAAxC;QACAmE,aAAa,CAAC,YAAD,CAAb,CAA4BlE,cAAc,CAAC,IAAD,CAA1C,IAAoDA,cAApD;MACD,CA7BwC,CA6BvC;;;MAGFkE,aAAa,CAAC,6BAAD,CAAb,GAA+C,EAA/C;MACA,IAAIM,gCAAgC,GAAGP,aAAa,CAAC7G,gBAAd,CAA+B,6BAA/B,CAAvC;;MAEA,KAAK,IAAI/B,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGmJ,gCAAgC,CAAClJ,MAArD,EAA6DD,GAAC,EAA9D,EAAkE;QAChE,IAAIoJ,+BAA+B,GAAGD,gCAAgC,CAACnJ,GAAD,CAAtE;QACA,IAAIqJ,+BAA+B,GAAG9D,kCAAkC,CAAC6D,+BAAD,CAAxE;QACAP,aAAa,CAAC,6BAAD,CAAb,CAA6CQ,+BAA+B,CAAC,IAAD,CAA5E,IAAsFA,+BAAtF;MACD,CAvCwC,CAuCvC;;;MAGFR,aAAa,CAAC,gBAAD,CAAb,GAAkC,EAAlC;MACA,IAAIS,oBAAoB,GAAGV,aAAa,CAAC7G,gBAAd,CAA+B,gBAA/B,CAA3B;;MAEA,KAAK,IAAI/B,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGsJ,oBAAoB,CAACrJ,MAAzC,EAAiDD,GAAC,EAAlD,EAAsD;QACpD,IAAIuJ,mBAAmB,GAAGD,oBAAoB,CAACtJ,GAAD,CAA9C;QACA,IAAIwJ,mBAAmB,GAAG3F,wBAAwB,CAAC0F,mBAAD,CAAlD;QACAV,aAAa,CAAC,gBAAD,CAAb,CAAgCW,mBAAmB,CAAC,IAAD,CAAnD,IAA6DA,mBAA7D;MACD,CAjDwC,CAiDvC;;;MAGFX,aAAa,CAAC,QAAD,CAAb,GAA0B,EAA1B;MACA,IAAIY,WAAW,GAAGb,aAAa,CAAC7G,gBAAd,CAA+B,QAA/B,CAAlB;;MAEA,KAAK,IAAI/B,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGyJ,WAAW,CAACxJ,MAAhC,EAAwCD,GAAC,EAAzC,EAA6C;QAC3C,IAAIsI,UAAU,GAAGmB,WAAW,CAACzJ,GAAD,CAA5B;QACA,IAAIuI,UAAU,GAAGF,eAAe,CAACC,UAAD,CAAhC;QACAO,aAAa,CAAC,QAAD,CAAb,CAAwBN,UAAU,CAAC,IAAD,CAAlC,IAA4CA,UAA5C;MACD;;MAED,OAAOM,aAAP;IACD;;IAED,SAASa,cAAT,CAAwBC,SAAxB,EAAmC;MACjC,IAAIC,SAAS,GAAG,EAAhB;MACA,IAAIC,SAAS,GAAGF,SAAS,CAAC5H,gBAAV,CAA2B,MAA3B,CAAhB;;MAEA,KAAK,IAAI/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6J,SAAS,CAAC5J,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;QACzC,IAAI8J,QAAQ,GAAGD,SAAS,CAAC7J,CAAD,CAAxB;QACA,IAAI+J,SAAS,GAAG;UACdC,QAAQ,EAAEF,QAAQ,CAAC3H,YAAT,CAAsB,UAAtB;QADI,CAAhB;QAGA,IAAI0F,SAAS,GAAGiC,QAAQ,CAAC3H,YAAT,CAAsB,WAAtB,CAAhB;;QAEA,IAAI0F,SAAJ,EAAe;UACbkC,SAAS,CAAC,WAAD,CAAT,GAAyBjC,cAAc,CAACD,SAAD,CAAvC;QACD;;QAED+B,SAAS,CAACjK,IAAV,CAAeoK,SAAf;MACD;;MAED,OAAOH,SAAP;IACD;;IAED,SAASvI,cAAT,CAAwBV,SAAxB,EAAmC;MACjC,IAAIS,SAAS,GAAG;QACd6I,IAAI,EAAEtJ,SAAS,CAACwB,YAAV,CAAuB,MAAvB,KAAkC;MAD1B,CAAhB;MAGA,IAAII,aAAa,GAAG5B,SAAS,CAACoB,gBAAV,CAA2B,UAA3B,CAApB;;MAEA,IAAIQ,aAAJ,EAAmB;QACjBnB,SAAS,CAAC,UAAD,CAAT,GAAwBkB,kBAAkB,CAACC,aAAD,CAA1C;MACD;;MAED,IAAIqG,aAAa,GAAGjI,SAAS,CAACC,aAAV,CAAwB,WAAxB,CAApB;;MAEA,IAAIgI,aAAJ,EAAmB;QACjBxH,SAAS,CAAC,WAAD,CAAT,GAAyBuH,kBAAkB,CAACC,aAAD,CAA3C;MACD;;MAED,IAAIe,SAAS,GAAGhJ,SAAS,CAACC,aAAV,CAAwB,OAAxB,CAAhB;;MAEA,IAAI+I,SAAJ,EAAe;QACbvI,SAAS,CAAC,OAAD,CAAT,GAAqBsI,cAAc,CAACC,SAAD,CAAnC;MACD;;MAED,OAAOvI,SAAP;IACD;;IAED,SAAS8I,YAAT,CAAsBC,cAAtB,EAAsCC,OAAtC,EAA+ChJ,SAA/C,EAA0DiJ,WAA1D,EAAuE;MACrE,IAAIrG,KAAK,GAAGmG,cAAc,CAACnG,KAA3B;MACA,IAAIsG,UAAU,GAAGlJ,SAAS,CAACmJ,SAAV,CAAoBC,SAArC;MACA,IAAIA,SAAS,GAAGF,UAAU,CAACtG,KAAD,CAA1B;;MAEA,IAAIwG,SAAJ,EAAe;QACb,IAAI/L,IAAI,GAAG4L,WAAW,CAACG,SAAS,CAAC3M,IAAX,CAAtB;QACA,IAAIwE,IAAI,GAAGmI,SAAS,CAAC/G,WAArB;QACA,IAAIgH,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACjM,IAAD,CAAT,EAAiB;UAC1B4D,IAAI,EAAEA;QADoB,CAAjB,CAAX;QAGA,IAAIsI,SAAS,GAAGC,GAAG,CAACC,eAAJ,CAAoBJ,IAApB,CAAhB;QACA,IAAI/I,OAAO,GAAGhD,aAAa,CAACrB,IAAd,CAAmBsN,SAAnB,EAA8B,YAAY;UACtDC,GAAG,CAACE,eAAJ,CAAoBH,SAApB;QACD,CAFa,CAAd;QAGAjJ,OAAO,CAACqJ,QAAR,GAAmB3O,YAAnB,CAVa,CAUoB;;QAEjC,QAAQoO,SAAS,CAAC9G,UAAlB;UACE,KAAK,MAAL;YACEhC,OAAO,CAACsJ,KAAR,GAAgB3O,cAAhB;YACA;;UAEF,KAAK,QAAL;YACEqF,OAAO,CAACsJ,KAAR,GAAgBzO,sBAAhB;YACA;;UAEF,KAAK,MAAL;UACA,KAAK,OAAL;YACEmF,OAAO,CAACsJ,KAAR,GAAgB1O,mBAAhB;YACA;;UAEF;YACEoF,OAAO,CAACsJ,KAAR,GAAgB3O,cAAhB;QAfJ;;QAkBA,QAAQmO,SAAS,CAAC7G,UAAlB;UACE,KAAK,MAAL;YACEjC,OAAO,CAACuJ,KAAR,GAAgB5O,cAAhB;YACA;;UAEF,KAAK,QAAL;YACEqF,OAAO,CAACuJ,KAAR,GAAgB1O,sBAAhB;YACA;;UAEF,KAAK,MAAL;UACA,KAAK,OAAL;YACEmF,OAAO,CAACuJ,KAAR,GAAgB3O,mBAAhB;YACA;;UAEF;YACEoF,OAAO,CAACuJ,KAAR,GAAgB5O,cAAhB;QAfJ;;QAkBA,QAAQmO,SAAS,CAAC5G,MAAlB;UACE,KAAK,MAAL;YACElC,OAAO,CAACwJ,SAAR,GAAoB1O,YAApB;YACAkF,OAAO,CAACyJ,SAAR,GAAoB1O,wBAApB;YACA;;UAEF,KAAK,QAAL;YACEiF,OAAO,CAACwJ,SAAR,GAAoB1O,YAApB;YACAkF,OAAO,CAACyJ,SAAR,GAAoB3O,YAApB;YACA;;UAEF,KAAK,SAAL;YACEkF,OAAO,CAACwJ,SAAR,GAAoBxO,aAApB;YACAgF,OAAO,CAACyJ,SAAR,GAAoBzO,aAApB;YACA;;UAEF;YACEgF,OAAO,CAACwJ,SAAR,GAAoB1O,YAApB;YACAkF,OAAO,CAACyJ,SAAR,GAAoB1O,wBAApB;QAlBJ;;QAqBA,OAAOiF,OAAP;MACD,CAtED,MAsEO;QACL,OAAO,IAAP;MACD;IACF;;IAED,SAAS0J,wBAAT,CAAkCpI,aAAlC,EAAiDwD,kBAAjD,EAAqEpF,SAArE,EAAgF6E,QAAhF,EAA0FoE,WAA1F,EAAuG9B,UAAvG,EAAmH;MACjH,IAAI8C,YAAY,GAAG9C,UAAU,CAACC,MAA9B;MACA,IAAI8C,WAAW,GAAG,EAAlB;;MAEA,KAAK,IAAItL,CAAC,GAAG,CAAR,EAAWuL,CAAC,GAAG/E,kBAAkB,CAACvG,MAAvC,EAA+CD,CAAC,GAAGuL,CAAnD,EAAsDvL,CAAC,EAAvD,EAA2D;QACzD,IAAImH,gBAAgB,GAAGX,kBAAkB,CAACxG,CAAD,CAAzC;QACA,IAAIwI,MAAM,GAAGrB,gBAAgB,CAACJ,EAAjB,KAAwByE,SAAxB,GAAoCrE,gBAAgB,CAACJ,EAArD,GAA0DsE,YAAvE;QACA,IAAIC,WAAW,CAAC9C,MAAD,CAAX,KAAwBgD,SAA5B,EAAuCF,WAAW,CAAC9C,MAAD,CAAX,GAAsB,EAAtB;QACvC8C,WAAW,CAAC9C,MAAD,CAAX,CAAoB7I,IAApB,CAAyBwH,gBAAzB;MACD,CATgH,CAS/G;;;MAGF,IAAI7F,IAAI,GAAGrE,MAAM,CAACqE,IAAP,CAAYgK,WAAZ,CAAX;MACA,IAAIG,MAAM,GAAG,EAAb;;MAEA,KAAK,IAAIzL,GAAC,GAAG,CAAR,EAAWuL,EAAC,GAAGjK,IAAI,CAACrB,MAAzB,EAAiCD,GAAC,GAAGuL,EAArC,EAAwCvL,GAAC,EAAzC,EAA6C;QAC3C,IAAI0L,aAAa,GAAGpK,IAAI,CAACtB,GAAD,CAAxB;QACA,IAAI2L,uBAAuB,GAAGL,WAAW,CAACI,aAAD,CAAzC;QACA,IAAIvI,gBAAgB,GAAGH,aAAa,CAACA,aAAd,CAA4B0I,aAA5B,CAAvB;QACA,IAAIE,QAAQ,GAAGC,QAAQ,CAAC1I,gBAAD,EAAmBiH,OAAnB,EAA4BhJ,SAA5B,EAAuCiJ,WAAvC,EAAoD9B,UAApD,EAAgEuD,iBAAhE,CAAvB,CAJ2C,CAIgE;;QAE3G,IAAIC,QAAQ,GAAG,IAAIjQ,cAAJ,EAAf;QACA,IAAIkQ,YAAY,GAAG,EAAnB;QACA,IAAI9F,QAAQ,GAAGD,QAAQ,CAACC,QAAxB;;QAEA,KAAK,IAAI+F,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGP,uBAAuB,CAAC1L,MAA7C,EAAqDgM,CAAC,GAAGC,EAAzD,EAA6DD,CAAC,EAA9D,EAAkE;UAChE,IAAI9E,gBAAgB,GAAGwE,uBAAuB,CAACM,CAAD,CAA9C;UACAD,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACP,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B;UACAoF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACP,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B;UACAoF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACP,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B;UACAoF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACN,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B;UACAmF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACN,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B;UACAmF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACN,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B;UACAmF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACL,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B;UACAkF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACL,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B;UACAkF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACL,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B;QACD;;QAEDiF,QAAQ,CAACI,YAAT,CAAsB,UAAtB,EAAkC,IAAIpQ,sBAAJ,CAA2BiQ,YAA3B,EAAyC,CAAzC,CAAlC,EAvB2C,CAuBqC;;QAEhF,IAAII,IAAI,GAAG,IAAIpQ,IAAJ,CAAS+P,QAAT,EAAmBH,QAAnB,CAAX;QACAH,MAAM,CAAC9L,IAAP,CAAYyM,IAAZ;MACD;;MAED,OAAOX,MAAP;IACD;;IAED,SAASY,iBAAT,CAA2BlC,cAA3B,EAA2C3D,kBAA3C,EAA+DpF,SAA/D,EAA0E6E,QAA1E,EAAoFoE,WAApF,EAAiG9B,UAAjG,EAA6G;MAC3G;MACA,IAAIwD,QAAQ,GAAG,IAAIjQ,cAAJ,EAAf;MACA,IAAIkQ,YAAY,GAAG,EAAnB;MACA,IAAIM,MAAM,GAAG,EAAb;MACA,IAAIpG,QAAQ,GAAGD,QAAQ,CAACC,QAAxB;MACA,IAAI/B,GAAG,GAAGgG,cAAc,CAAChG,GAAzB;;MAEA,KAAK,IAAInE,CAAC,GAAG,CAAR,EAAWuL,CAAC,GAAG/E,kBAAkB,CAACvG,MAAvC,EAA+CD,CAAC,GAAGuL,CAAnD,EAAsDvL,CAAC,EAAvD,EAA2D;QACzD,IAAImH,gBAAgB,GAAGX,kBAAkB,CAACxG,CAAD,CAAzC;QACAgM,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACP,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B;QACAoF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACP,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B;QACAoF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACP,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B;QACAoF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACN,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B;QACAmF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACN,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B;QACAmF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACN,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B;QACAmF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACL,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B;QACAkF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACL,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B;QACAkF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACiB,gBAAgB,CAACL,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAA1B,EAVyD,CAUC;;QAE1DwF,MAAM,CAAC3M,IAAP,CAAYwE,GAAG,CAACgD,gBAAgB,CAACJ,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAAf;QACAuF,MAAM,CAAC3M,IAAP,CAAYwE,GAAG,CAACgD,gBAAgB,CAACJ,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAAf;QACAuF,MAAM,CAAC3M,IAAP,CAAYwE,GAAG,CAACgD,gBAAgB,CAACH,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAAf;QACAsF,MAAM,CAAC3M,IAAP,CAAYwE,GAAG,CAACgD,gBAAgB,CAACH,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAAf;QACAsF,MAAM,CAAC3M,IAAP,CAAYwE,GAAG,CAACgD,gBAAgB,CAACF,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAAf;QACAqF,MAAM,CAAC3M,IAAP,CAAYwE,GAAG,CAACgD,gBAAgB,CAACF,EAAjB,GAAsB,CAAtB,GAA0B,CAA3B,CAAf;MACD;;MAED8E,QAAQ,CAACI,YAAT,CAAsB,UAAtB,EAAkC,IAAIpQ,sBAAJ,CAA2BiQ,YAA3B,EAAyC,CAAzC,CAAlC;MACAD,QAAQ,CAACI,YAAT,CAAsB,IAAtB,EAA4B,IAAIpQ,sBAAJ,CAA2BuQ,MAA3B,EAAmC,CAAnC,CAA5B,EA7B2G,CA6BvC;;MAEpE,IAAI5K,OAAO,GAAGmK,QAAQ,CAAC1B,cAAD,EAAiBC,OAAjB,EAA0BhJ,SAA1B,EAAqCiJ,WAArC,EAAkD9B,UAAlD,EAA8D2B,YAA9D,CAAtB;MACA,IAAI0B,QAAQ,GAAG,IAAI3P,iBAAJ,CAAsB;QACnCsQ,GAAG,EAAE7K,OAD8B;QAEnC8K,WAAW,EAAE;MAFsB,CAAtB,CAAf,CAhC2G,CAmCvG;;MAEJ,IAAIJ,IAAI,GAAG,IAAIpQ,IAAJ,CAAS+P,QAAT,EAAmBH,QAAnB,CAAX;MACA,OAAOQ,IAAP;IACD;;IAED,SAASK,oBAAT,CAA8BC,UAA9B,EAA0ClG,kBAA1C,EAA8DpF,SAA9D,EAAyE6E,QAAzE,EAAmFsC,UAAnF,EAA+F;MAC7F;MACA,IAAIwD,QAAQ,GAAG,IAAIjQ,cAAJ,EAAf;MACA,IAAIkQ,YAAY,GAAG,EAAnB;MACA,IAAIW,SAAS,GAAG,EAAhB;MACA,IAAIzG,QAAQ,GAAGD,QAAQ,CAACC,QAAxB;MACA,IAAIrB,MAAM,GAAG6H,UAAU,CAAC7H,MAAxB;;MAEA,KAAK,IAAI7E,CAAC,GAAG,CAAR,EAAWuL,CAAC,GAAG/E,kBAAkB,CAACvG,MAAvC,EAA+CD,CAAC,GAAGuL,CAAnD,EAAsDvL,CAAC,EAAvD,EAA2D;QACzD,IAAImH,gBAAgB,GAAGX,kBAAkB,CAACxG,CAAD,CAAzC;QACA,IAAI4G,EAAE,GAAGO,gBAAgB,CAACP,EAA1B;QACA,IAAIC,EAAE,GAAGM,gBAAgB,CAACN,EAA1B;QACA,IAAIC,EAAE,GAAGK,gBAAgB,CAACL,EAA1B;QACAkF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACU,EAAE,GAAG,CAAL,GAAS,CAAV,CAA1B;QACAoF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACU,EAAE,GAAG,CAAL,GAAS,CAAV,CAA1B;QACAoF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACU,EAAE,GAAG,CAAL,GAAS,CAAV,CAA1B;QACAoF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACW,EAAE,GAAG,CAAL,GAAS,CAAV,CAA1B;QACAmF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACW,EAAE,GAAG,CAAL,GAAS,CAAV,CAA1B;QACAmF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACW,EAAE,GAAG,CAAL,GAAS,CAAV,CAA1B;QACAmF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACY,EAAE,GAAG,CAAL,GAAS,CAAV,CAA1B;QACAkF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACY,EAAE,GAAG,CAAL,GAAS,CAAV,CAA1B;QACAkF,YAAY,CAACrM,IAAb,CAAkBuG,QAAQ,CAACY,EAAE,GAAG,CAAL,GAAS,CAAV,CAA1B,EAbyD,CAahB;;QAEzC,IAAIC,EAAE,GAAGI,gBAAgB,CAACJ,EAAjB,KAAwByE,SAAxB,GAAoCrE,gBAAgB,CAACJ,EAArD,GAA0DwB,UAAU,CAACC,MAA9E;QACA,IAAIxB,EAAE,GAAGG,gBAAgB,CAACH,EAAjB,KAAwBwE,SAAxB,GAAoCrE,gBAAgB,CAACH,EAArD,GAA0DD,EAAnE;QACA,IAAIE,EAAE,GAAGE,gBAAgB,CAACF,EAAjB,KAAwBuE,SAAxB,GAAoCrE,gBAAgB,CAACF,EAArD,GAA0DF,EAAnE;QACA4F,SAAS,CAAChN,IAAV,CAAekF,MAAM,CAACkC,EAAE,GAAG,CAAL,GAAS,CAAV,CAArB;QACA4F,SAAS,CAAChN,IAAV,CAAekF,MAAM,CAACkC,EAAE,GAAG,CAAL,GAAS,CAAV,CAArB;QACA4F,SAAS,CAAChN,IAAV,CAAekF,MAAM,CAACkC,EAAE,GAAG,CAAL,GAAS,CAAV,CAArB;QACA4F,SAAS,CAAChN,IAAV,CAAekF,MAAM,CAACmC,EAAE,GAAG,CAAL,GAAS,CAAV,CAArB;QACA2F,SAAS,CAAChN,IAAV,CAAekF,MAAM,CAACmC,EAAE,GAAG,CAAL,GAAS,CAAV,CAArB;QACA2F,SAAS,CAAChN,IAAV,CAAekF,MAAM,CAACmC,EAAE,GAAG,CAAL,GAAS,CAAV,CAArB;QACA2F,SAAS,CAAChN,IAAV,CAAekF,MAAM,CAACoC,EAAE,GAAG,CAAL,GAAS,CAAV,CAArB;QACA0F,SAAS,CAAChN,IAAV,CAAekF,MAAM,CAACoC,EAAE,GAAG,CAAL,GAAS,CAAV,CAArB;QACA0F,SAAS,CAAChN,IAAV,CAAekF,MAAM,CAACoC,EAAE,GAAG,CAAL,GAAS,CAAV,CAArB;MACD;;MAED8E,QAAQ,CAACI,YAAT,CAAsB,UAAtB,EAAkC,IAAIpQ,sBAAJ,CAA2BiQ,YAA3B,EAAyC,CAAzC,CAAlC;MACAD,QAAQ,CAACI,YAAT,CAAsB,OAAtB,EAA+B,IAAIpQ,sBAAJ,CAA2B4Q,SAA3B,EAAsC,CAAtC,CAA/B,EAtC6F,CAsCnB;;MAE1E,IAAIf,QAAQ,GAAG,IAAI3P,iBAAJ,CAAsB;QACnC2Q,YAAY,EAAE,IADqB;QAEnCJ,WAAW,EAAE;MAFsB,CAAtB,CAAf,CAxC6F,CA2CzF;;MAEJ,IAAIJ,IAAI,GAAG,IAAIpQ,IAAJ,CAAS+P,QAAT,EAAmBH,QAAnB,CAAX;MACA,OAAOQ,IAAP;IACD;;IAED,SAASS,gBAAT,CAA0B5G,QAA1B,EAAoC;MAClC,IAAI8F,QAAQ,GAAG,IAAIjQ,cAAJ,EAAf;MACAiQ,QAAQ,CAACe,QAAT,CAAkB,IAAI5Q,eAAJ,CAAoB+J,QAAQ,CAAC,WAAD,CAA5B,EAA2C,CAA3C,CAAlB;MACA8F,QAAQ,CAACI,YAAT,CAAsB,UAAtB,EAAkC,IAAIjQ,eAAJ,CAAoB+J,QAAQ,CAAC,UAAD,CAA5B,EAA0C,CAA1C,CAAlC;MACA,IAAI2F,QAAQ,GAAG,IAAI3P,iBAAJ,CAAsB;QACnC+I,KAAK,EAAE,QAD4B;QAEnCwH,WAAW,EAAE;MAFsB,CAAtB,CAAf;MAIA,IAAIJ,IAAI,GAAG,IAAIpQ,IAAJ,CAAS+P,QAAT,EAAmBH,QAAnB,CAAX;MACA,OAAOQ,IAAP;IACD;;IAED,SAASW,WAAT,CAAqBC,WAArB,EAAkC5L,SAAlC,EAA6C6E,QAA7C,EAAuDoE,WAAvD,EAAoE9B,UAApE,EAAgF;MAC9E,IAAIjH,IAAI,GAAGrE,MAAM,CAACqE,IAAP,CAAY0L,WAAZ,CAAX;MACA,IAAIvB,MAAM,GAAG,EAAb;;MAEA,KAAK,IAAIzL,CAAC,GAAG,CAAR,EAAWiN,EAAE,GAAG3L,IAAI,CAACrB,MAA1B,EAAkCD,CAAC,GAAGiN,EAAtC,EAA0CjN,CAAC,EAA3C,EAA+C;QAC7C,IAAIkN,UAAU,GAAG5L,IAAI,CAACtB,CAAD,CAArB;QACA,IAAIwG,kBAAkB,GAAGwG,WAAW,CAACE,UAAD,CAApC;QACA,IAAIC,YAAY,GAAGC,eAAe,CAACF,UAAD,EAAa9L,SAAb,CAAlC;;QAEA,QAAQ+L,YAAR;UACE,KAAK,UAAL;YACE,IAAInK,aAAa,GAAG5B,SAAS,CAACmJ,SAAV,CAAoBvH,aAApB,CAAkCkK,UAAlC,CAApB;YACA,IAAIG,SAAS,GAAGjC,wBAAwB,CAACpI,aAAD,EAAgBwD,kBAAhB,EAAoCpF,SAApC,EAA+C6E,QAA/C,EAAyDoE,WAAzD,EAAsE9B,UAAtE,CAAxC;;YAEA,KAAK,IAAI0D,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGmB,SAAS,CAACpN,MAA/B,EAAuCgM,CAAC,GAAGC,EAA3C,EAA+CD,CAAC,EAAhD,EAAoD;cAClDR,MAAM,CAAC9L,IAAP,CAAY0N,SAAS,CAACpB,CAAD,CAArB;YACD;;YAED;;UAEF,KAAK,SAAL;YACE,IAAI9B,cAAc,GAAG/I,SAAS,CAACmJ,SAAV,CAAoBJ,cAApB,CAAmC+C,UAAnC,CAArB;YACAzB,MAAM,CAAC9L,IAAP,CAAY0M,iBAAiB,CAAClC,cAAD,EAAiB3D,kBAAjB,EAAqCpF,SAArC,EAAgD6E,QAAhD,EAA0DoE,WAA1D,EAAuE9B,UAAvE,CAA7B;YACA;;UAEF,KAAK,cAAL;YACE,IAAImE,UAAU,GAAGtL,SAAS,CAACmJ,SAAV,CAAoBmC,UAApB,CAA+BQ,UAA/B,CAAjB;YACAzB,MAAM,CAAC9L,IAAP,CAAY8M,oBAAoB,CAACC,UAAD,EAAalG,kBAAb,EAAiCpF,SAAjC,EAA4C6E,QAA5C,EAAsDsC,UAAtD,CAAhC;YACA;;UAEF,KAAK,SAAL;YACEkD,MAAM,CAAC9L,IAAP,CAAYkN,gBAAgB,CAAC5G,QAAD,CAA5B;YACA;;UAEF;YACE3H,OAAO,CAACC,KAAR,CAAc,6CAAd;QA1BJ;MA4BD;;MAED,OAAOkN,MAAP;IACD;;IAED,SAAS2B,eAAT,CAAyBlG,GAAzB,EAA8B9F,SAA9B,EAAyC;MACvC,IAAIA,SAAS,CAACmJ,SAAV,CAAoBJ,cAApB,CAAmCjD,GAAnC,MAA4CsE,SAAhD,EAA2D;QACzD,OAAO,SAAP;MACD,CAFD,MAEO,IAAIpK,SAAS,CAACmJ,SAAV,CAAoBvH,aAApB,CAAkCkE,GAAlC,MAA2CsE,SAA/C,EAA0D;QAC/D,OAAO,UAAP;MACD,CAFM,MAEA,IAAIpK,SAAS,CAACmJ,SAAV,CAAoBmC,UAApB,CAA+BxF,GAA/B,MAAwCsE,SAA5C,EAAuD;QAC5D,OAAO,cAAP;MACD,CAFM,MAEA,IAAItE,GAAG,KAAK,SAAZ,EAAuB;QAC5B,OAAO,SAAP;MACD,CAFM,MAEA;QACL,OAAOsE,SAAP;MACD;IACF;;IAED,SAAS8B,aAAT,CAAuBlM,SAAvB,EAAkC6E,QAAlC,EAA4CsC,UAA5C,EAAwD;MACtD,IAAIyE,WAAW,GAAG,EAAlB;MACA,IAAIxG,kBAAkB,GAAGP,QAAQ,CAAC,oBAAD,CAAjC;MACA,IAAIsH,SAAS,GAAGhF,UAAU,CAACrB,GAA3B;;MAEA,KAAK,IAAIlH,CAAC,GAAG,CAAR,EAAWuL,CAAC,GAAG/E,kBAAkB,CAACvG,MAAvC,EAA+CD,CAAC,GAAGuL,CAAnD,EAAsDvL,CAAC,EAAvD,EAA2D;QACzD,IAAImH,gBAAgB,GAAGX,kBAAkB,CAACxG,CAAD,CAAzC;QACA,IAAIkH,GAAG,GAAGC,gBAAgB,CAACD,GAAjB,KAAyBsE,SAAzB,GAAqCrE,gBAAgB,CAACD,GAAtD,GAA4DqG,SAAtE;QACA,IAAIrG,GAAG,KAAKsE,SAAZ,EAAuBtE,GAAG,GAAG,SAAN;QACvB,IAAI8F,WAAW,CAAC9F,GAAD,CAAX,KAAqBsE,SAAzB,EAAoCwB,WAAW,CAAC9F,GAAD,CAAX,GAAmB,EAAnB;QACpC8F,WAAW,CAAC9F,GAAD,CAAX,CAAiBvH,IAAjB,CAAsBwH,gBAAtB;MACD;;MAED,OAAO6F,WAAP;IACD;;IAED,SAASQ,UAAT,CAAoBvH,QAApB,EAA8BmE,OAA9B,EAAuChJ,SAAvC,EAAkDiJ,WAAlD,EAA+D9B,UAA/D,EAA2E;MACzE,IAAIkF,KAAK,GAAG,IAAI9R,KAAJ,EAAZ;MACA,IAAIqR,WAAW,GAAGM,aAAa,CAAClM,SAAD,EAAY6E,QAAZ,EAAsBsC,UAAtB,CAA/B;MACA,IAAIkD,MAAM,GAAGsB,WAAW,CAACC,WAAD,EAAc5L,SAAd,EAAyB6E,QAAzB,EAAmCoE,WAAnC,EAAgD9B,UAAhD,CAAxB;;MAEA,KAAK,IAAIvI,CAAC,GAAG,CAAR,EAAWuL,CAAC,GAAGE,MAAM,CAACxL,MAA3B,EAAmCD,CAAC,GAAGuL,CAAvC,EAA0CvL,CAAC,EAA3C,EAA+C;QAC7CyN,KAAK,CAACC,GAAN,CAAUjC,MAAM,CAACzL,CAAD,CAAhB;MACD;;MAED,OAAOyN,KAAP;IACD;;IAED,SAASE,eAAT,CAAyB9M,UAAzB,EAAqCoF,QAArC,EAA+C2H,QAA/C,EAAyD;MACvD,IAAI,CAAC/M,UAAL,EAAiB;QACf;MACD;;MAED,IAAI9D,mBAAmB,GAAG,EAA1B;MACA,IAAIuE,IAAI,GAAGrE,MAAM,CAACqE,IAAP,CAAYT,UAAZ,CAAX;;MAEA,KAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,IAAI,CAACrB,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;QACpC,IAAI6N,EAAE,GAAGvM,IAAI,CAACtB,CAAD,CAAb;;QAEA,KAAK,IAAIiM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvO,KAAK,CAACX,mBAAN,CAA0BkD,MAA9C,EAAsDgM,CAAC,EAAvD,EAA2D;UACzD,IAAI6B,SAAS,GAAGpQ,KAAK,CAACX,mBAAN,CAA0BkP,CAA1B,CAAhB;;UAEA,IAAI6B,SAAS,CAACD,EAAV,KAAiBA,EAArB,EAAyB;YACvB9Q,mBAAmB,CAAC4C,IAApB,CAAyBmO,SAAzB;UACD;QACF;MACF;;MAED,KAAK,IAAI9N,IAAC,GAAG,CAAb,EAAgBA,IAAC,GAAGjD,mBAAmB,CAACkD,MAAxC,EAAgDD,IAAC,EAAjD,EAAqD;QACnD,IAAI8N,SAAS,GAAG/Q,mBAAmB,CAACiD,IAAD,CAAnC;QACA8N,SAAS,CAACC,KAAV,CAAgBH,QAAhB,EAA0B/M,UAAU,CAACiN,SAAS,CAAC,IAAD,CAAV,CAApC,EAAuD7H,QAAvD;MACD;IACF;;IAED,SAAS4F,QAAT,CAAkBpN,IAAlB,EAAwB2L,OAAxB,EAAiChJ,SAAjC,EAA4CiJ,WAA5C,EAAyD9B,UAAzD,EAAqEyF,OAArE,EAA8E;MAC5E,IAAIvP,IAAI,CAACwP,KAAL,KAAezC,SAAnB,EAA8B,OAAO/M,IAAI,CAACwP,KAAZ;MAC9BxP,IAAI,CAACwP,KAAL,GAAaD,OAAO,CAACvP,IAAD,EAAO2L,OAAP,EAAgBhJ,SAAhB,EAA2BiJ,WAA3B,EAAwC9B,UAAxC,CAApB;MACA,OAAO9J,IAAI,CAACwP,KAAZ;IACD;;IAED,SAASnC,iBAAT,CAA2BoC,YAA3B,EAAyC9D,OAAzC,EAAkDhJ,SAAlD,EAA6D;MAC3D,IAAIwK,QAAJ;MACA,IAAI3H,mBAAmB,GAAGiK,YAAY,CAACjK,mBAAvC;MACA,IAAIkK,2BAA2B,GAAG/M,SAAS,CAACmJ,SAAV,CAAoB4D,2BAAtD;;MAEA,IAAIlK,mBAAmB,KAAK,IAAxB,IAAgCkK,2BAA2B,CAAClK,mBAAD,CAA3B,KAAqDuH,SAAzF,EAAoG;QAClG;QACA,IAAI4C,yBAAyB,GAAGD,2BAA2B,CAAClK,mBAAD,CAA3D;QACA,IAAI0B,YAAY,GAAGyI,yBAAyB,CAAC3P,IAA1B,CAA+ByP,YAAY,CAAC7K,KAA5C,CAAnB;QACAuI,QAAQ,GAAG,IAAIzP,oBAAJ,CAAyB;UAClCqQ,WAAW,EAAE,IADqB;UAElC1G,SAAS,EAAEH,YAAY,CAACG,SAFU;UAGlCuI,SAAS,EAAE1I,YAAY,CAACE;QAHU,CAAzB,CAAX;MAKD,CATD,MASO;QACL;QACA+F,QAAQ,GAAG,IAAI3P,iBAAJ,CAAsB;UAC/BuQ,WAAW,EAAE;QADkB,CAAtB,CAAX;MAGD;;MAEDZ,QAAQ,CAAC5K,IAAT,GAAgBkN,YAAY,CAAClN,IAA7B,CArB2D,CAqBxB;;MAEnC,IAAIsN,YAAY,GAAGJ,YAAY,CAACI,YAAhC;MACA,IAAItJ,KAAK,GAAGsJ,YAAY,CAACpJ,SAAb,CAAuB,CAAvB,EAA0B,CAA1B,CAAZ;MACA0G,QAAQ,CAAC5G,KAAT,CAAeC,QAAf,CAAwBD,KAAxB;MACA4G,QAAQ,CAAC5G,KAAT,CAAeG,mBAAf,GA1B2D,CA0BrB;MACtC;;MAEA,IAAImJ,YAAY,CAACrO,MAAb,KAAwB,CAA5B,EAA+B;QAC7B2L,QAAQ,CAAC2C,OAAT,GAAmBnH,QAAQ,CAACkH,YAAY,CAACE,MAAb,CAAoB,CAApB,IAAyBF,YAAY,CAACE,MAAb,CAAoB,CAApB,CAA1B,EAAkD,EAAlD,CAAR,GAAgE,GAAnF;MACD;;MAED,OAAO5C,QAAP;IACD;;IAED,SAAS6C,cAAT,CAAwBC,aAAxB,EAAuCtE,OAAvC,EAAgDhJ,SAAhD,EAA2DiJ,WAA3D,EAAwE;MACtE,IAAIsE,SAAS,GAAG,IAAIhT,KAAJ,EAAhB;;MAEA,KAAK,IAAIsQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyC,aAAa,CAACzO,MAAlC,EAA0CgM,CAAC,EAA3C,EAA+C;QAC7C,IAAI2C,SAAS,GAAGF,aAAa,CAACzC,CAAD,CAA7B;QACA,IAAIgC,KAAK,GAAG7D,OAAO,CAACwE,SAAS,CAAC5E,QAAX,CAAnB;;QAEA,IAAIiE,KAAK,KAAKzC,SAAd,EAAyB;UACvBqD,WAAW,CAACD,SAAS,CAAC5E,QAAX,EAAqBI,OAArB,EAA8BhJ,SAA9B,EAAyCiJ,WAAzC,CAAX;UACA4D,KAAK,GAAG7D,OAAO,CAACwE,SAAS,CAAC5E,QAAX,CAAf;QACD;;QAED,IAAI8E,QAAQ,GAAGb,KAAK,CAACc,KAAN,EAAf,CAT6C,CASf;;QAE9B,IAAIlH,SAAS,GAAG+G,SAAS,CAAC/G,SAA1B;;QAEA,IAAIA,SAAJ,EAAe;UACbiH,QAAQ,CAACE,YAAT,CAAsBnH,SAAtB;QACD;;QAED8G,SAAS,CAACjB,GAAV,CAAcoB,QAAd;MACD;;MAED,OAAOH,SAAP;IACD;;IAED,SAASE,WAAT,CAAqB7E,QAArB,EAA+BI,OAA/B,EAAwChJ,SAAxC,EAAmDiJ,WAAnD,EAAgE;MAC9D,IAAI9B,UAAU,GAAGnH,SAAS,CAAC,WAAD,CAAT,CAAuB,QAAvB,EAAiC4I,QAAjC,CAAjB;;MAEA,IAAIzB,UAAU,CAAC,MAAD,CAAd,EAAwB;QACtB,IAAItC,QAAQ,GAAGsC,UAAU,CAAC,MAAD,CAAzB;QACA,IAAI1H,UAAU,GAAGO,SAAS,CAAC,YAAD,CAA1B;QACA,IAAIwM,QAAQ,GAAGxM,SAAS,CAAC,KAAD,CAAxB;QACAuM,eAAe,CAAC9M,UAAD,EAAaoF,QAAb,EAAuB2H,QAAvB,CAAf;QACAxD,OAAO,CAAC7B,UAAU,CAACnG,EAAZ,CAAP,GAAyByJ,QAAQ,CAAC5F,QAAD,EAAWmE,OAAX,EAAoBhJ,SAApB,EAA+BiJ,WAA/B,EAA4C9B,UAA5C,EAAwDiF,UAAxD,CAAjC;MACD,CAND,MAMO;QACL,IAAIkB,aAAa,GAAGnG,UAAU,CAAC,YAAD,CAA9B;QACA6B,OAAO,CAAC7B,UAAU,CAACnG,EAAZ,CAAP,GAAyByJ,QAAQ,CAAC6C,aAAD,EAAgBtE,OAAhB,EAAyBhJ,SAAzB,EAAoCiJ,WAApC,EAAiD9B,UAAjD,EAA6DkG,cAA7D,CAAjC;MACD;IACF;;IAED,SAASQ,YAAT,CAAsBC,OAAtB,EAA+B;MAC7B,IAAIC,UAAU,GAAGD,OAAO,CAAC1N,KAAzB;MACA,IAAIrC,SAAS,GAAG+P,OAAO,CAAC/P,SAAxB;MACA,IAAIiL,OAAO,GAAG,EAAd;MACA,IAAIgF,UAAU,GAAGnS,MAAM,CAACqE,IAAP,CAAY6N,UAAZ,CAAjB;MACA,IAAI9E,WAAW,GAAG,EAAlB,CAL6B,CAKP;;MAEtB,IAAIlL,SAAJ,EAAe;QACb,KAAK,IAAIa,CAAC,GAAG,CAAR,EAAWuL,CAAC,GAAGpM,SAAS,CAACc,MAA9B,EAAsCD,CAAC,GAAGuL,CAA1C,EAA6CvL,CAAC,EAA9C,EAAkD;UAChD,IAAIqP,QAAQ,GAAGlQ,SAAS,CAACa,CAAD,CAAxB;UACA,IAAIsP,UAAU,GAAGD,QAAQ,CAACnN,MAAT,CAAgBgD,SAAhB,CAA0B,CAA1B,CAAjB;;UAEA,IAAIgK,OAAO,CAACxN,OAAR,CAAgB4N,UAAhB,CAAJ,EAAiC;YAC/BjF,WAAW,CAACgF,QAAQ,CAACnN,MAAV,CAAX,GAA+BgN,OAAO,CAACxN,OAAR,CAAgB4N,UAAhB,CAA/B;UACD;QACF;MACF,CAhB4B,CAgB3B;;;MAGF,KAAK,IAAItP,IAAC,GAAG,CAAb,EAAgBA,IAAC,GAAGoP,UAAU,CAACnP,MAA/B,EAAuCD,IAAC,EAAxC,EAA4C;QAC1C,IAAIuP,SAAS,GAAGH,UAAU,CAACpP,IAAD,CAA1B;QACA,IAAIoB,SAAS,GAAG+N,UAAU,CAACI,SAAD,CAA1B;QACA,IAAIC,SAAS,GAAGvS,MAAM,CAACqE,IAAP,CAAYF,SAAS,CAAC,WAAD,CAAT,CAAuB,QAAvB,CAAZ,CAAhB;;QAEA,KAAK,IAAI6K,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuD,SAAS,CAACvP,MAA9B,EAAsCgM,CAAC,EAAvC,EAA2C;UACzC,IAAIjC,QAAQ,GAAGwF,SAAS,CAACvD,CAAD,CAAxB;UACA4C,WAAW,CAAC7E,QAAD,EAAWI,OAAX,EAAoBhJ,SAApB,EAA+BiJ,WAA/B,CAAX;QACD;MACF;;MAED,OAAOD,OAAP;IACD;;IAED,SAASqF,gBAAT,CAA0BvQ,IAA1B,EAAgC;MAC9B,KAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,IAAI,CAACe,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;QACpC,IAAI0P,GAAG,GAAGxQ,IAAI,CAACc,CAAD,CAAd;QACA,IAAI8N,SAAS,GAAG4B,GAAG,CAACxN,MAAJ,CAAW8F,KAAX,CAAiB,GAAjB,EAAsB2H,GAAtB,EAAhB;QACA,IAAI7B,SAAS,CAACpN,WAAV,OAA4B,OAAhC,EAAyC,OAAOgP,GAAP;MAC1C;IACF;;IAED,SAASzB,KAAT,CAAe7D,OAAf,EAAwB8E,OAAxB,EAAiC;MAC/B,IAAIzB,KAAK,GAAG,IAAI9R,KAAJ,EAAZ;MACA,IAAIsG,YAAY,GAAGwN,gBAAgB,CAACP,OAAO,CAAC,MAAD,CAAR,CAAnC;MACA,IAAItF,SAAS,GAAGsF,OAAO,CAAC1N,KAAR,CAAcS,YAAY,CAAC,QAAD,CAAZ,CAAuBiD,SAAvB,CAAiC,CAAjC,CAAd,EAAmD,OAAnD,CAAhB;;MAEA,KAAK,IAAIlF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4J,SAAS,CAAC3J,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;QACzC,IAAI+J,SAAS,GAAGH,SAAS,CAAC5J,CAAD,CAAzB;QACA,IAAI8O,QAAQ,GAAG1E,OAAO,CAACL,SAAS,CAAC,UAAD,CAAV,CAAtB,CAFyC,CAEM;;QAE/C,IAAIlC,SAAS,GAAGkC,SAAS,CAAC,WAAD,CAAzB;;QAEA,IAAIlC,SAAJ,EAAe;UACbiH,QAAQ,CAACE,YAAT,CAAsBnH,SAAtB;QACD;;QAED4F,KAAK,CAACC,GAAN,CAAUoB,QAAV;MACD;;MAED,OAAOrB,KAAP;IACD;;IAED,IAAIyB,OAAO,GAAGvQ,YAAY,CAACF,IAAD,CAA1B;IACA,IAAI2L,OAAO,GAAG6E,YAAY,CAACC,OAAD,CAA1B;IACA,OAAOjB,KAAK,CAAC7D,OAAD,EAAU8E,OAAV,CAAZ;EACD,CA1/BsE;EA2/BvEU,YAAY,EAAE,sBAAU9B,SAAV,EAAqB;IACjC,KAAK/Q,mBAAL,CAAyB4C,IAAzB,CAA8BmO,SAA9B;EACD;AA7/BsE,CAA/C,CAA1B;AAggCA,SAASlR,aAAT"},"metadata":{},"sourceType":"module"}