{"ast":null,"code":"import { Vector3, Matrix3 } from 'three';\n/**\n * https://github.com/gkjohnson/ply-exporter-js\n *\n * Usage:\n *  var exporter = new PLYExporter();\n *\n *  // second argument is a list of options\n *  exporter.parse(mesh, data => console.log(data), { binary: true, excludeAttributes: [ 'color' ], littleEndian: true });\n *\n * Format Definition:\n * http://paulbourke.net/dataformats/ply/\n */\n\nvar PLYExporter = function PLYExporter() {};\n\nPLYExporter.prototype = {\n  constructor: PLYExporter,\n  parse: function parse(object, onDone, options) {\n    if (onDone && typeof onDone === 'object') {\n      console.warn('THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.');\n      options = onDone;\n      onDone = undefined;\n    } // Iterate over the valid meshes in the object\n\n\n    function traverseMeshes(cb) {\n      object.traverse(function (child) {\n        if (child.isMesh === true) {\n          var mesh = child;\n          var geometry = mesh.geometry;\n\n          if (geometry.isBufferGeometry !== true) {\n            throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n          }\n\n          if (geometry.hasAttribute('position') === true) {\n            cb(mesh, geometry);\n          }\n        }\n      });\n    } // Default options\n\n\n    var defaultOptions = {\n      binary: false,\n      excludeAttributes: [],\n      // normal, uv, color, index\n      littleEndian: false\n    };\n    options = Object.assign(defaultOptions, options);\n    var excludeAttributes = options.excludeAttributes;\n    var includeNormals = false;\n    var includeColors = false;\n    var includeUVs = false; // count the vertices, check which properties are used,\n    // and cache the BufferGeometry\n\n    var vertexCount = 0;\n    var faceCount = 0;\n    object.traverse(function (child) {\n      if (child.isMesh === true) {\n        var mesh = child;\n        var geometry = mesh.geometry;\n\n        if (geometry.isBufferGeometry !== true) {\n          throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n\n        var vertices = geometry.getAttribute('position');\n        var normals = geometry.getAttribute('normal');\n        var uvs = geometry.getAttribute('uv');\n        var colors = geometry.getAttribute('color');\n        var indices = geometry.getIndex();\n\n        if (vertices === undefined) {\n          return;\n        }\n\n        vertexCount += vertices.count;\n        faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        if (normals !== undefined) includeNormals = true;\n        if (uvs !== undefined) includeUVs = true;\n        if (colors !== undefined) includeColors = true;\n      }\n    });\n    var includeIndices = excludeAttributes.indexOf('index') === -1;\n    includeNormals = includeNormals && excludeAttributes.indexOf('normal') === -1;\n    includeColors = includeColors && excludeAttributes.indexOf('color') === -1;\n    includeUVs = includeUVs && excludeAttributes.indexOf('uv') === -1;\n\n    if (includeIndices && faceCount !== Math.floor(faceCount)) {\n      // point cloud meshes will not have an index array and may not have a\n      // number of vertices that is divisble by 3 (and therefore representable\n      // as triangles)\n      console.error('PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' + 'number of indices is not divisible by 3.');\n      return null;\n    }\n\n    var indexByteCount = 4;\n    var header = // position\n    \"ply\\n\".concat(\"format \".concat(options.binary ? options.littleEndian ? 'binary_little_endian' : 'binary_big_endian' : 'ascii', \" 1.0\\n\"), \"element vertex \".concat(vertexCount, \"\\n\"), \"property float x\\nproperty float y\\nproperty float z\\n\");\n\n    if (includeNormals === true) {\n      // normal\n      header += 'property float nx\\n' + 'property float ny\\n' + 'property float nz\\n';\n    }\n\n    if (includeUVs === true) {\n      // uvs\n      header += 'property float s\\n' + 'property float t\\n';\n    }\n\n    if (includeColors === true) {\n      // colors\n      header += 'property uchar red\\n' + 'property uchar green\\n' + 'property uchar blue\\n';\n    }\n\n    if (includeIndices === true) {\n      // faces\n      header += \"\".concat(\"element face \".concat(faceCount, \"\\n\"), \"property list uchar int vertex_index\\n\");\n    }\n\n    header += 'end_header\\n'; // Generate attribute data\n\n    var vertex = new Vector3();\n    var normalMatrixWorld = new Matrix3();\n    var result = null;\n\n    if (options.binary === true) {\n      // Binary File Generation\n      var headerBin = new TextEncoder().encode(header); // 3 position values at 4 bytes\n      // 3 normal values at 4 bytes\n      // 3 color channels with 1 byte\n      // 2 uv values at 4 bytes\n\n      var vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0)); // 1 byte shape desciptor\n      // 3 vertex indices at ${indexByteCount} bytes\n\n      var faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;\n      var output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));\n      new Uint8Array(output.buffer).set(headerBin, 0);\n      var vOffset = headerBin.length;\n      var fOffset = headerBin.length + vertexListLength;\n      var writtenVertices = 0;\n      traverseMeshes(function (mesh, geometry) {\n        var vertices = geometry.getAttribute('position');\n        var normals = geometry.getAttribute('normal');\n        var uvs = geometry.getAttribute('uv');\n        var colors = geometry.getAttribute('color');\n        var indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n\n        for (var i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n          output.setFloat32(vOffset, vertex.x, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.y, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.z, options.littleEndian);\n          vOffset += 4; // Normal information\n\n          if (includeNormals === true) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              output.setFloat32(vOffset, vertex.x, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.y, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.z, options.littleEndian);\n              vOffset += 4;\n            } else {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          } // UV information\n\n\n          if (includeUVs === true) {\n            if (uvs != null) {\n              output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);\n              vOffset += 4;\n            } else if (includeUVs !== false) {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          } // Color information\n\n\n          if (includeColors === true) {\n            if (colors != null) {\n              output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));\n              vOffset += 1;\n            } else {\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n            }\n          }\n        }\n\n        if (includeIndices === true) {\n          // Create the face list\n          if (indices !== null) {\n            for (var _i = 0, _l = indices.count; _i < _l; _i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, indices.getX(_i + 0) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(_i + 1) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(_i + 2) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          } else {\n            for (var _i2 = 0, _l2 = vertices.count; _i2 < _l2; _i2 += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, writtenVertices + _i2, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + _i2 + 1, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + _i2 + 2, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          }\n        } // Save the amount of verts we've already written so we can offset\n        // the face index on the next mesh\n\n\n        writtenVertices += vertices.count;\n      });\n      result = output.buffer;\n    } else {\n      // Ascii File Generation\n      // count the number of vertices\n      var writtenVertices = 0;\n      var vertexList = '';\n      var faceList = '';\n      traverseMeshes(function (mesh, geometry) {\n        var vertices = geometry.getAttribute('position');\n        var normals = geometry.getAttribute('normal');\n        var uvs = geometry.getAttribute('uv');\n        var colors = geometry.getAttribute('color');\n        var indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld); // form each line\n\n        for (var i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n          var line = \"\".concat(vertex.x, \" \").concat(vertex.y, \" \").concat(vertex.z); // Normal information\n\n          if (includeNormals === true) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              line += \" \".concat(vertex.x, \" \").concat(vertex.y, \" \").concat(vertex.z);\n            } else {\n              line += ' 0 0 0';\n            }\n          } // UV information\n\n\n          if (includeUVs === true) {\n            if (uvs != null) {\n              line += \" \".concat(uvs.getX(i), \" \").concat(uvs.getY(i));\n            } else if (includeUVs !== false) {\n              line += ' 0 0';\n            }\n          } // Color information\n\n\n          if (includeColors === true) {\n            if (colors != null) {\n              line += \" \".concat(Math.floor(colors.getX(i) * 255), \" \").concat(Math.floor(colors.getY(i) * 255), \" \").concat(Math.floor(colors.getZ(i) * 255));\n            } else {\n              line += ' 255 255 255';\n            }\n          }\n\n          vertexList += \"\".concat(line, \"\\n\");\n        } // Create the face list\n\n\n        if (includeIndices === true) {\n          if (indices !== null) {\n            for (var _i3 = 0, _l3 = indices.count; _i3 < _l3; _i3 += 3) {\n              faceList += \"3 \".concat(indices.getX(_i3 + 0) + writtenVertices);\n              faceList += \" \".concat(indices.getX(_i3 + 1) + writtenVertices);\n              faceList += \" \".concat(indices.getX(_i3 + 2) + writtenVertices, \"\\n\");\n            }\n          } else {\n            for (var _i4 = 0, _l4 = vertices.count; _i4 < _l4; _i4 += 3) {\n              faceList += \"3 \".concat(writtenVertices + _i4, \" \").concat(writtenVertices + _i4 + 1, \" \").concat(writtenVertices + _i4 + 2, \"\\n\");\n            }\n          }\n\n          faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        }\n\n        writtenVertices += vertices.count;\n      });\n      result = \"\".concat(header).concat(vertexList).concat(includeIndices ? \"\".concat(faceList, \"\\n\") : '\\n');\n    }\n\n    if (typeof onDone === 'function') requestAnimationFrame(function () {\n      return onDone(result);\n    });\n    return result;\n  }\n};\nexport { PLYExporter };","map":{"version":3,"names":["Vector3","Matrix3","PLYExporter","prototype","constructor","parse","object","onDone","options","console","warn","undefined","traverseMeshes","cb","traverse","child","isMesh","mesh","geometry","isBufferGeometry","Error","hasAttribute","defaultOptions","binary","excludeAttributes","littleEndian","Object","assign","includeNormals","includeColors","includeUVs","vertexCount","faceCount","vertices","getAttribute","normals","uvs","colors","indices","getIndex","count","includeIndices","indexOf","Math","floor","error","indexByteCount","header","vertex","normalMatrixWorld","result","headerBin","TextEncoder","encode","vertexListLength","faceListLength","output","DataView","ArrayBuffer","length","Uint8Array","buffer","set","vOffset","fOffset","writtenVertices","getNormalMatrix","matrixWorld","i","l","x","getX","y","getY","z","getZ","applyMatrix4","setFloat32","applyMatrix3","normalize","setUint8","setUint32","vertexList","faceList","line","requestAnimationFrame"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/exporters/PLYExporter.js"],"sourcesContent":["import { Vector3, Matrix3 } from 'three';\n\n/**\n * https://github.com/gkjohnson/ply-exporter-js\n *\n * Usage:\n *  var exporter = new PLYExporter();\n *\n *  // second argument is a list of options\n *  exporter.parse(mesh, data => console.log(data), { binary: true, excludeAttributes: [ 'color' ], littleEndian: true });\n *\n * Format Definition:\n * http://paulbourke.net/dataformats/ply/\n */\n\nconst PLYExporter = () => {};\n\nPLYExporter.prototype = {\n  constructor: PLYExporter,\n  parse: function (object, onDone, options) {\n    if (onDone && typeof onDone === 'object') {\n      console.warn('THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.');\n      options = onDone;\n      onDone = undefined;\n    } // Iterate over the valid meshes in the object\n\n\n    function traverseMeshes(cb) {\n      object.traverse(child => {\n        if (child.isMesh === true) {\n          const mesh = child;\n          const geometry = mesh.geometry;\n\n          if (geometry.isBufferGeometry !== true) {\n            throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n          }\n\n          if (geometry.hasAttribute('position') === true) {\n            cb(mesh, geometry);\n          }\n        }\n      });\n    } // Default options\n\n\n    const defaultOptions = {\n      binary: false,\n      excludeAttributes: [],\n      // normal, uv, color, index\n      littleEndian: false\n    };\n    options = Object.assign(defaultOptions, options);\n    const excludeAttributes = options.excludeAttributes;\n    let includeNormals = false;\n    let includeColors = false;\n    let includeUVs = false; // count the vertices, check which properties are used,\n    // and cache the BufferGeometry\n\n    let vertexCount = 0;\n    let faceCount = 0;\n    object.traverse(child => {\n      if (child.isMesh === true) {\n        const mesh = child;\n        const geometry = mesh.geometry;\n\n        if (geometry.isBufferGeometry !== true) {\n          throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n\n        if (vertices === undefined) {\n          return;\n        }\n\n        vertexCount += vertices.count;\n        faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        if (normals !== undefined) includeNormals = true;\n        if (uvs !== undefined) includeUVs = true;\n        if (colors !== undefined) includeColors = true;\n      }\n    });\n    const includeIndices = excludeAttributes.indexOf('index') === -1;\n    includeNormals = includeNormals && excludeAttributes.indexOf('normal') === -1;\n    includeColors = includeColors && excludeAttributes.indexOf('color') === -1;\n    includeUVs = includeUVs && excludeAttributes.indexOf('uv') === -1;\n\n    if (includeIndices && faceCount !== Math.floor(faceCount)) {\n      // point cloud meshes will not have an index array and may not have a\n      // number of vertices that is divisble by 3 (and therefore representable\n      // as triangles)\n      console.error('PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' + 'number of indices is not divisible by 3.');\n      return null;\n    }\n\n    const indexByteCount = 4;\n    let header = // position\n    `ply\\n${`format ${options.binary ? options.littleEndian ? 'binary_little_endian' : 'binary_big_endian' : 'ascii'} 1.0\\n`}${`element vertex ${vertexCount}\\n`}property float x\\nproperty float y\\nproperty float z\\n`;\n\n    if (includeNormals === true) {\n      // normal\n      header += 'property float nx\\n' + 'property float ny\\n' + 'property float nz\\n';\n    }\n\n    if (includeUVs === true) {\n      // uvs\n      header += 'property float s\\n' + 'property float t\\n';\n    }\n\n    if (includeColors === true) {\n      // colors\n      header += 'property uchar red\\n' + 'property uchar green\\n' + 'property uchar blue\\n';\n    }\n\n    if (includeIndices === true) {\n      // faces\n      header += `${`element face ${faceCount}\\n`}property list uchar int vertex_index\\n`;\n    }\n\n    header += 'end_header\\n'; // Generate attribute data\n\n    const vertex = new Vector3();\n    const normalMatrixWorld = new Matrix3();\n    let result = null;\n\n    if (options.binary === true) {\n      // Binary File Generation\n      const headerBin = new TextEncoder().encode(header); // 3 position values at 4 bytes\n      // 3 normal values at 4 bytes\n      // 3 color channels with 1 byte\n      // 2 uv values at 4 bytes\n\n      const vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0)); // 1 byte shape desciptor\n      // 3 vertex indices at ${indexByteCount} bytes\n\n      const faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;\n      const output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));\n      new Uint8Array(output.buffer).set(headerBin, 0);\n      let vOffset = headerBin.length;\n      let fOffset = headerBin.length + vertexListLength;\n      var writtenVertices = 0;\n      traverseMeshes((mesh, geometry) => {\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n          output.setFloat32(vOffset, vertex.x, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.y, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.z, options.littleEndian);\n          vOffset += 4; // Normal information\n\n          if (includeNormals === true) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              output.setFloat32(vOffset, vertex.x, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.y, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.z, options.littleEndian);\n              vOffset += 4;\n            } else {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          } // UV information\n\n\n          if (includeUVs === true) {\n            if (uvs != null) {\n              output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);\n              vOffset += 4;\n            } else if (includeUVs !== false) {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          } // Color information\n\n\n          if (includeColors === true) {\n            if (colors != null) {\n              output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));\n              vOffset += 1;\n            } else {\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n            }\n          }\n        }\n\n        if (includeIndices === true) {\n          // Create the face list\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, indices.getX(i + 0) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 1) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 2) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, writtenVertices + i, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 1, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 2, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          }\n        } // Save the amount of verts we've already written so we can offset\n        // the face index on the next mesh\n\n\n        writtenVertices += vertices.count;\n      });\n      result = output.buffer;\n    } else {\n      // Ascii File Generation\n      // count the number of vertices\n      var writtenVertices = 0;\n      let vertexList = '';\n      let faceList = '';\n      traverseMeshes((mesh, geometry) => {\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld); // form each line\n\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n          let line = `${vertex.x} ${vertex.y} ${vertex.z}`; // Normal information\n\n          if (includeNormals === true) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              line += ` ${vertex.x} ${vertex.y} ${vertex.z}`;\n            } else {\n              line += ' 0 0 0';\n            }\n          } // UV information\n\n\n          if (includeUVs === true) {\n            if (uvs != null) {\n              line += ` ${uvs.getX(i)} ${uvs.getY(i)}`;\n            } else if (includeUVs !== false) {\n              line += ' 0 0';\n            }\n          } // Color information\n\n\n          if (includeColors === true) {\n            if (colors != null) {\n              line += ` ${Math.floor(colors.getX(i) * 255)} ${Math.floor(colors.getY(i) * 255)} ${Math.floor(colors.getZ(i) * 255)}`;\n            } else {\n              line += ' 255 255 255';\n            }\n          }\n\n          vertexList += `${line}\\n`;\n        } // Create the face list\n\n\n        if (includeIndices === true) {\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              faceList += `3 ${indices.getX(i + 0) + writtenVertices}`;\n              faceList += ` ${indices.getX(i + 1) + writtenVertices}`;\n              faceList += ` ${indices.getX(i + 2) + writtenVertices}\\n`;\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              faceList += `3 ${writtenVertices + i} ${writtenVertices + i + 1} ${writtenVertices + i + 2}\\n`;\n            }\n          }\n\n          faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        }\n\n        writtenVertices += vertices.count;\n      });\n      result = `${header}${vertexList}${includeIndices ? `${faceList}\\n` : '\\n'}`;\n    }\n\n    if (typeof onDone === 'function') requestAnimationFrame(() => onDone(result));\n    return result;\n  }\n};\n\nexport { PLYExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}