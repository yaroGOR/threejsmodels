{"ast":null,"code":"import { uniq, map, flatten } from \"../../utils/utils\";\nimport { NonTerminal, Terminal } from \"./gast/gast_public\";\nimport { isBranchingProd, isOptionalProd, isSequenceProd } from \"./gast/gast\";\nexport function first(prod) {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    // this could in theory cause infinite loops if\n    // (1) prod A refs prod B.\n    // (2) prod B refs prod A\n    // (3) AB can match the empty set\n    // in other words a cycle where everything is optional so the first will keep\n    // looking ahead for the next optional part and will never exit\n    // currently there is no safeguard for this unique edge case because\n    // (1) not sure a grammar in which this can happen is useful for anything (productive)\n    return first(prod.referencedRule);\n  } else if (prod instanceof Terminal) {\n    return firstForTerminal(prod);\n  } else if (isSequenceProd(prod)) {\n    return firstForSequence(prod);\n  } else if (isBranchingProd(prod)) {\n    return firstForBranching(prod);\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\nexport function firstForSequence(prod) {\n  var firstSet = [];\n  var seq = prod.definition;\n  var nextSubProdIdx = 0;\n  var hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  var currSubProd; // so we enter the loop at least once (if the definition is not empty\n\n  var isLastInnerProdOptional = true; // scan a sequence until it's end or until we have found a NONE optional production in it\n\n  while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n    currSubProd = seq[nextSubProdIdx];\n    isLastInnerProdOptional = isOptionalProd(currSubProd);\n    firstSet = firstSet.concat(first(currSubProd));\n    nextSubProdIdx = nextSubProdIdx + 1;\n    hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  }\n\n  return uniq(firstSet);\n}\nexport function firstForBranching(prod) {\n  var allAlternativesFirsts = map(prod.definition, function (innerProd) {\n    return first(innerProd);\n  });\n  return uniq(flatten(allAlternativesFirsts));\n}\nexport function firstForTerminal(terminal) {\n  return [terminal.terminalType];\n}","map":{"version":3,"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,OAApB,QAAmC,mBAAnC;AACA,SAA6BC,WAA7B,EAA0CC,QAA1C,QAA0D,oBAA1D;AACA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,cAA1C,QAAgE,aAAhE;AAGA,OAAM,SAAUC,KAAV,CAAgBC,IAAhB,EAAiC;EACrC;EACA,IAAIA,IAAI,YAAYN,WAApB,EAAiC;IAC/B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,OAAOK,KAAK,CAAeC,IAAK,CAACC,cAArB,CAAZ;EACD,CAVD,MAUO,IAAID,IAAI,YAAYL,QAApB,EAA8B;IACnC,OAAOO,gBAAgB,CAAWF,IAAX,CAAvB;EACD,CAFM,MAEA,IAAIF,cAAc,CAACE,IAAD,CAAlB,EAA0B;IAC/B,OAAOG,gBAAgB,CAAqBH,IAArB,CAAvB;EACD,CAFM,MAEA,IAAIJ,eAAe,CAACI,IAAD,CAAnB,EAA2B;IAChC,OAAOI,iBAAiB,CAAqBJ,IAArB,CAAxB;EACD,CAFM,MAEA;IACL,MAAMK,KAAK,CAAC,sBAAD,CAAX;EACD;AACF;AAED,OAAM,SAAUF,gBAAV,CAA2BH,IAA3B,EAAmD;EACvD,IAAIM,QAAQ,GAAgB,EAA5B;EACA,IAAIC,GAAG,GAAGP,IAAI,CAACQ,UAAf;EACA,IAAIC,cAAc,GAAG,CAArB;EACA,IAAIC,sBAAsB,GAAGH,GAAG,CAACI,MAAJ,GAAaF,cAA1C;EACA,IAAIG,WAAJ,CALuD,CAMvD;;EACA,IAAIC,uBAAuB,GAAG,IAA9B,CAPuD,CAQvD;;EACA,OAAOH,sBAAsB,IAAIG,uBAAjC,EAA0D;IACxDD,WAAW,GAAGL,GAAG,CAACE,cAAD,CAAjB;IACAI,uBAAuB,GAAGhB,cAAc,CAACe,WAAD,CAAxC;IACAN,QAAQ,GAAGA,QAAQ,CAACQ,MAAT,CAAgBf,KAAK,CAACa,WAAD,CAArB,CAAX;IACAH,cAAc,GAAGA,cAAc,GAAG,CAAlC;IACAC,sBAAsB,GAAGH,GAAG,CAACI,MAAJ,GAAaF,cAAtC;EACD;;EAED,OAAOlB,IAAI,CAACe,QAAD,CAAX;AACD;AAED,OAAM,SAAUF,iBAAV,CAA4BJ,IAA5B,EAAoD;EACxD,IAAIe,qBAAqB,GAAkBvB,GAAG,CAC5CQ,IAAI,CAACQ,UADuC,EAE5C,UAACQ,SAAD,EAAU;IACR,OAAOjB,KAAK,CAACiB,SAAD,CAAZ;EACD,CAJ2C,CAA9C;EAMA,OAAOzB,IAAI,CAACE,OAAO,CAAYsB,qBAAZ,CAAR,CAAX;AACD;AAED,OAAM,SAAUb,gBAAV,CAA2Be,QAA3B,EAA6C;EACjD,OAAO,CAACA,QAAQ,CAACC,YAAV,CAAP;AACD","names":["uniq","map","flatten","NonTerminal","Terminal","isBranchingProd","isOptionalProd","isSequenceProd","first","prod","referencedRule","firstForTerminal","firstForSequence","firstForBranching","Error","firstSet","seq","definition","nextSubProdIdx","hasInnerProdsRemaining","length","currSubProd","isLastInnerProdOptional","concat","allAlternativesFirsts","innerProd","terminal","terminalType"],"sourceRoot":"","sources":["../../../../src/parse/grammar/first.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}