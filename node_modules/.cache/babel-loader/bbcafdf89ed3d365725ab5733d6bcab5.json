{"ast":null,"code":"import { has, timer } from \"../../../utils/utils\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\n/**\n * Trait responsible for runtime parsing errors.\n */\n\nvar PerformanceTracer =\n/** @class */\nfunction () {\n  function PerformanceTracer() {}\n\n  PerformanceTracer.prototype.initPerformanceTracer = function (config) {\n    if (has(config, \"traceInitPerf\")) {\n      var userTraceInitPerf = config.traceInitPerf;\n      var traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity;\n      this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf;\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n\n    this.traceInitIndent = -1;\n  };\n\n  PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(indent + \"--> <\" + phaseDesc + \">\");\n      }\n\n      var _a = timer(phaseImpl),\n          time = _a.time,\n          value = _a.value;\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n\n\n      var traceMethod = time > 10 ? console.warn : console.log;\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n      }\n\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n\n  return PerformanceTracer;\n}();\n\nexport { PerformanceTracer };","map":{"version":3,"mappings":"AACA,SAASA,GAAT,EAAcC,KAAd,QAA2B,sBAA3B;AAEA,SAASC,qBAAT,QAAsC,WAAtC;AAEA;;;;AAGA;AAAA;AAAA;EAAA,8BA4CC;;EAvCCC,8DAAsBC,MAAtB,EAA2C;IACzC,IAAIJ,GAAG,CAACI,MAAD,EAAS,eAAT,CAAP,EAAkC;MAChC,IAAMC,iBAAiB,GAAGD,MAAM,CAACE,aAAjC;MACA,IAAMC,aAAa,GAAG,OAAOF,iBAAP,KAA6B,QAAnD;MACA,KAAKG,iBAAL,GAAyBD,aAAa,GAC1BF,iBAD0B,GAElCI,QAFJ;MAGA,KAAKH,aAAL,GAAqBC,aAAa,GAC9BF,iBAAiB,GAAG,CADU,GAE9BA,iBAFJ;IAGD,CATD,MASO;MACL,KAAKG,iBAAL,GAAyB,CAAzB;MACA,KAAKF,aAAL,GAAqBJ,qBAAqB,CAACI,aAA3C;IACD;;IAED,KAAKI,eAAL,GAAuB,CAAC,CAAxB;EACD,CAhBD;;EAkBAP,mDAAmCQ,SAAnC,EAAsDC,SAAtD,EAAwE;IACtE;IACA;IACA,IAAI,KAAKN,aAAL,KAAuB,IAA3B,EAAiC;MAC/B,KAAKI,eAAL;MACA,IAAMG,MAAM,GAAG,IAAIC,KAAJ,CAAU,KAAKJ,eAAL,GAAuB,CAAjC,EAAoCK,IAApC,CAAyC,IAAzC,CAAf;;MACA,IAAI,KAAKL,eAAL,GAAuB,KAAKF,iBAAhC,EAAmD;QACjDQ,OAAO,CAACC,GAAR,CAAeJ,MAAM,UAAN,GAAcF,SAAd,GAAuB,GAAtC;MACD;;MACK,SAAkBV,KAAK,CAACW,SAAD,CAAvB;MAAA,IAAEM,IAAI,UAAN;MAAA,IAAQC,KAAK,WAAb;MACN;;;MACA,IAAMC,WAAW,GAAGF,IAAI,GAAG,EAAP,GAAYF,OAAO,CAACK,IAApB,GAA2BL,OAAO,CAACC,GAAvD;;MACA,IAAI,KAAKP,eAAL,GAAuB,KAAKF,iBAAhC,EAAmD;QACjDY,WAAW,CAAIP,MAAM,UAAN,GAAcF,SAAd,GAAuB,UAAvB,GAAkCO,IAAlC,GAAsC,IAA1C,CAAX;MACD;;MACD,KAAKR,eAAL;MACA,OAAOS,KAAP;IACD,CAdD,MAcO;MACL,OAAOP,SAAS,EAAhB;IACD;EACF,CApBD;;EAqBF;AAAC,CA5CD","names":["has","timer","DEFAULT_PARSER_CONFIG","PerformanceTracer","config","userTraceInitPerf","traceInitPerf","traceIsNumber","traceInitMaxIdent","Infinity","traceInitIndent","phaseDesc","phaseImpl","indent","Array","join","console","log","time","value","traceMethod","warn"],"sourceRoot":"","sources":["../../../../../src/parse/parser/traits/perf_tracer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}