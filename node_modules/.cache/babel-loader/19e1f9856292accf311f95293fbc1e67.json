{"ast":null,"code":"import { Loader, FileLoader, TextureLoader, Points, LineSegments, Mesh, PointsMaterial, LineBasicMaterial, BufferAttribute, MeshPhongMaterial, BackSide, DoubleSide, FrontSide, Vector2, Color, AddOperation, EquirectangularRefractionMapping, EquirectangularReflectionMapping, ClampToEdgeWrapping, MirroredRepeatWrapping, RepeatWrapping, MeshPhysicalMaterial, MeshStandardMaterial, BufferGeometry, Float32BufferAttribute } from 'three';\nimport { IFFParser } from './lwo/IFFParser.js';\n/**\n * @version 1.1.1\n *\n * @desc Load files in LWO3 and LWO2 format on Three.js\n *\n * LWO3 format specification:\n * \thttp://static.lightwave3d.com/sdk/2018/html/filefmts/lwo3.html\n *\n * LWO2 format specification:\n * \thttp://static.lightwave3d.com/sdk/2018/html/filefmts/lwo2.html\n *\n **/\n\nvar lwoTree;\n\nvar LWOLoader = function LWOLoader(manager, parameters) {\n  Loader.call(this, manager);\n  parameters = parameters || {};\n  this.resourcePath = parameters.resourcePath !== undefined ? parameters.resourcePath : '';\n};\n\nLWOLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: LWOLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = scope.path === '' ? extractParentUrl(url, 'Objects') : scope.path; // give the mesh a default name based on the filename\n\n    var modelName = url.split(path).pop().split('.')[0];\n    var loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (buffer) {\n      // console.time( 'Total parsing: ' );\n      try {\n        onLoad(scope.parse(buffer, path, modelName));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      } // console.timeEnd( 'Total parsing: ' );\n\n    }, onProgress, onError);\n  },\n  parse: function parse(iffBuffer, path, modelName) {\n    lwoTree = new IFFParser().parse(iffBuffer); // console.log( 'lwoTree', lwoTree );\n\n    var textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new LWOTreeParser(textureLoader).parse(modelName);\n  }\n}); // Parse the lwoTree object\n\nfunction LWOTreeParser(textureLoader) {\n  this.textureLoader = textureLoader;\n}\n\nLWOTreeParser.prototype = {\n  constructor: LWOTreeParser,\n  parse: function parse(modelName) {\n    this.materials = new MaterialParser(this.textureLoader).parse();\n    this.defaultLayerName = modelName;\n    this.meshes = this.parseLayers();\n    return {\n      materials: this.materials,\n      meshes: this.meshes\n    };\n  },\n  parseLayers: function parseLayers() {\n    // array of all meshes for building hierarchy\n    var meshes = []; // final array containing meshes with scene graph hierarchy set up\n\n    var finalMeshes = [];\n    var geometryParser = new GeometryParser();\n    var scope = this;\n    lwoTree.layers.forEach(function (layer) {\n      var geometry = geometryParser.parse(layer.geometry, layer);\n      var mesh = scope.parseMesh(geometry, layer);\n      meshes[layer.number] = mesh;\n      if (layer.parent === -1) finalMeshes.push(mesh);else meshes[layer.parent].add(mesh);\n    });\n    this.applyPivots(finalMeshes);\n    return finalMeshes;\n  },\n  parseMesh: function parseMesh(geometry, layer) {\n    var mesh;\n    var materials = this.getMaterials(geometry.userData.matNames, layer.geometry.type);\n    this.duplicateUVs(geometry, materials);\n    if (layer.geometry.type === 'points') mesh = new Points(geometry, materials);else if (layer.geometry.type === 'lines') mesh = new LineSegments(geometry, materials);else mesh = new Mesh(geometry, materials);\n    if (layer.name) mesh.name = layer.name;else mesh.name = this.defaultLayerName + '_layer_' + layer.number;\n    mesh.userData.pivot = layer.pivot;\n    return mesh;\n  },\n  // TODO: may need to be reversed in z to convert LWO to three.js coordinates\n  applyPivots: function applyPivots(meshes) {\n    meshes.forEach(function (mesh) {\n      mesh.traverse(function (child) {\n        var pivot = child.userData.pivot;\n        child.position.x += pivot[0];\n        child.position.y += pivot[1];\n        child.position.z += pivot[2];\n\n        if (child.parent) {\n          var parentPivot = child.parent.userData.pivot;\n          child.position.x -= parentPivot[0];\n          child.position.y -= parentPivot[1];\n          child.position.z -= parentPivot[2];\n        }\n      });\n    });\n  },\n  getMaterials: function getMaterials(namesArray, type) {\n    var materials = [];\n    var scope = this;\n    namesArray.forEach(function (name, i) {\n      materials[i] = scope.getMaterialByName(name);\n    }); // convert materials to line or point mats if required\n\n    if (type === 'points' || type === 'lines') {\n      materials.forEach(function (mat, i) {\n        var spec = {\n          color: mat.color\n        };\n\n        if (type === 'points') {\n          spec.size = 0.1;\n          spec.map = mat.map;\n          spec.morphTargets = mat.morphTargets;\n          materials[i] = new PointsMaterial(spec);\n        } else if (type === 'lines') {\n          materials[i] = new LineBasicMaterial(spec);\n        }\n      });\n    } // if there is only one material, return that directly instead of array\n\n\n    var filtered = materials.filter(Boolean);\n    if (filtered.length === 1) return filtered[0];\n    return materials;\n  },\n  getMaterialByName: function getMaterialByName(name) {\n    return this.materials.filter(function (m) {\n      return m.name === name;\n    })[0];\n  },\n  // If the material has an aoMap, duplicate UVs\n  duplicateUVs: function duplicateUVs(geometry, materials) {\n    var duplicateUVs = false;\n\n    if (!Array.isArray(materials)) {\n      if (materials.aoMap) duplicateUVs = true;\n    } else {\n      materials.forEach(function (material) {\n        if (material.aoMap) duplicateUVs = true;\n      });\n    }\n\n    if (!duplicateUVs) return;\n    geometry.setAttribute('uv2', new BufferAttribute(geometry.attributes.uv.array, 2));\n  }\n};\n\nfunction MaterialParser(textureLoader) {\n  this.textureLoader = textureLoader;\n}\n\nMaterialParser.prototype = {\n  constructor: MaterialParser,\n  parse: function parse() {\n    var materials = [];\n    this.textures = {};\n\n    for (var name in lwoTree.materials) {\n      if (lwoTree.format === 'LWO3') {\n        materials.push(this.parseMaterial(lwoTree.materials[name], name, lwoTree.textures));\n      } else if (lwoTree.format === 'LWO2') {\n        materials.push(this.parseMaterialLwo2(lwoTree.materials[name], name, lwoTree.textures));\n      }\n    }\n\n    return materials;\n  },\n  parseMaterial: function parseMaterial(materialData, name, textures) {\n    var params = {\n      name: name,\n      side: this.getSide(materialData.attributes),\n      flatShading: this.getSmooth(materialData.attributes)\n    };\n    var connections = this.parseConnections(materialData.connections, materialData.nodes);\n    var maps = this.parseTextureNodes(connections.maps);\n    this.parseAttributeImageMaps(connections.attributes, textures, maps, materialData.maps);\n    var attributes = this.parseAttributes(connections.attributes, maps);\n    this.parseEnvMap(connections, maps, attributes);\n    params = Object.assign(maps, params);\n    params = Object.assign(params, attributes);\n    var materialType = this.getMaterialType(connections.attributes);\n    return new materialType(params);\n  },\n  parseMaterialLwo2: function parseMaterialLwo2(materialData, name\n  /*, textures*/\n  ) {\n    var params = {\n      name: name,\n      side: this.getSide(materialData.attributes),\n      flatShading: this.getSmooth(materialData.attributes)\n    };\n    var attributes = this.parseAttributes(materialData.attributes, {});\n    params = Object.assign(params, attributes);\n    return new MeshPhongMaterial(params);\n  },\n  // Note: converting from left to right handed coords by switching x -> -x in vertices, and\n  // then switching mat FrontSide -> BackSide\n  // NB: this means that FrontSide and BackSide have been switched!\n  getSide: function getSide(attributes) {\n    if (!attributes.side) return BackSide;\n\n    switch (attributes.side) {\n      case 0:\n      case 1:\n        return BackSide;\n\n      case 2:\n        return FrontSide;\n\n      case 3:\n        return DoubleSide;\n    }\n  },\n  getSmooth: function getSmooth(attributes) {\n    if (!attributes.smooth) return true;\n    return !attributes.smooth;\n  },\n  parseConnections: function parseConnections(connections, nodes) {\n    var materialConnections = {\n      maps: {}\n    };\n    var inputName = connections.inputName;\n    var inputNodeName = connections.inputNodeName;\n    var nodeName = connections.nodeName;\n    var scope = this;\n    inputName.forEach(function (name, index) {\n      if (name === 'Material') {\n        var matNode = scope.getNodeByRefName(inputNodeName[index], nodes);\n        materialConnections.attributes = matNode.attributes;\n        materialConnections.envMap = matNode.fileName;\n        materialConnections.name = inputNodeName[index];\n      }\n    });\n    nodeName.forEach(function (name, index) {\n      if (name === materialConnections.name) {\n        materialConnections.maps[inputName[index]] = scope.getNodeByRefName(inputNodeName[index], nodes);\n      }\n    });\n    return materialConnections;\n  },\n  getNodeByRefName: function getNodeByRefName(refName, nodes) {\n    for (var name in nodes) {\n      if (nodes[name].refName === refName) return nodes[name];\n    }\n  },\n  parseTextureNodes: function parseTextureNodes(textureNodes) {\n    var maps = {};\n\n    for (var name in textureNodes) {\n      var node = textureNodes[name];\n      var path = node.fileName;\n      if (!path) return;\n      var texture = this.loadTexture(path);\n      if (node.widthWrappingMode !== undefined) texture.wrapS = this.getWrappingType(node.widthWrappingMode);\n      if (node.heightWrappingMode !== undefined) texture.wrapT = this.getWrappingType(node.heightWrappingMode);\n\n      switch (name) {\n        case 'Color':\n          maps.map = texture;\n          break;\n\n        case 'Roughness':\n          maps.roughnessMap = texture;\n          maps.roughness = 0.5;\n          break;\n\n        case 'Specular':\n          maps.specularMap = texture;\n          maps.specular = 0xffffff;\n          break;\n\n        case 'Luminous':\n          maps.emissiveMap = texture;\n          maps.emissive = 0x808080;\n          break;\n\n        case 'Luminous Color':\n          maps.emissive = 0x808080;\n          break;\n\n        case 'Metallic':\n          maps.metalnessMap = texture;\n          maps.metalness = 0.5;\n          break;\n\n        case 'Transparency':\n        case 'Alpha':\n          maps.alphaMap = texture;\n          maps.transparent = true;\n          break;\n\n        case 'Normal':\n          maps.normalMap = texture;\n          if (node.amplitude !== undefined) maps.normalScale = new Vector2(node.amplitude, node.amplitude);\n          break;\n\n        case 'Bump':\n          maps.bumpMap = texture;\n          break;\n      }\n    } // LWO BSDF materials can have both spec and rough, but this is not valid in three\n\n\n    if (maps.roughnessMap && maps.specularMap) delete maps.specularMap;\n    return maps;\n  },\n  // maps can also be defined on individual material attributes, parse those here\n  // This occurs on Standard (Phong) surfaces\n  parseAttributeImageMaps: function parseAttributeImageMaps(attributes, textures, maps) {\n    for (var name in attributes) {\n      var attribute = attributes[name];\n\n      if (attribute.maps) {\n        var mapData = attribute.maps[0];\n        var path = this.getTexturePathByIndex(mapData.imageIndex, textures);\n        if (!path) return;\n        var texture = this.loadTexture(path);\n        if (mapData.wrap !== undefined) texture.wrapS = this.getWrappingType(mapData.wrap.w);\n        if (mapData.wrap !== undefined) texture.wrapT = this.getWrappingType(mapData.wrap.h);\n\n        switch (name) {\n          case 'Color':\n            maps.map = texture;\n            break;\n\n          case 'Diffuse':\n            maps.aoMap = texture;\n            break;\n\n          case 'Roughness':\n            maps.roughnessMap = texture;\n            maps.roughness = 1;\n            break;\n\n          case 'Specular':\n            maps.specularMap = texture;\n            maps.specular = 0xffffff;\n            break;\n\n          case 'Luminosity':\n            maps.emissiveMap = texture;\n            maps.emissive = 0x808080;\n            break;\n\n          case 'Metallic':\n            maps.metalnessMap = texture;\n            maps.metalness = 1;\n            break;\n\n          case 'Transparency':\n          case 'Alpha':\n            maps.alphaMap = texture;\n            maps.transparent = true;\n            break;\n\n          case 'Normal':\n            maps.normalMap = texture;\n            break;\n\n          case 'Bump':\n            maps.bumpMap = texture;\n            break;\n        }\n      }\n    }\n  },\n  parseAttributes: function parseAttributes(attributes, maps) {\n    var params = {}; // don't use color data if color map is present\n\n    if (attributes.Color && !maps.map) {\n      params.color = new Color().fromArray(attributes.Color.value);\n    } else params.color = new Color();\n\n    if (attributes.Transparency && attributes.Transparency.value !== 0) {\n      params.opacity = 1 - attributes.Transparency.value;\n      params.transparent = true;\n    }\n\n    if (attributes['Bump Height']) params.bumpScale = attributes['Bump Height'].value * 0.1;\n    if (attributes['Refraction Index']) params.refractionRatio = 1 / attributes['Refraction Index'].value;\n    this.parsePhysicalAttributes(params, attributes, maps);\n    this.parseStandardAttributes(params, attributes, maps);\n    this.parsePhongAttributes(params, attributes, maps);\n    return params;\n  },\n  parsePhysicalAttributes: function parsePhysicalAttributes(params, attributes\n  /*, maps*/\n  ) {\n    if (attributes.Clearcoat && attributes.Clearcoat.value > 0) {\n      params.clearcoat = attributes.Clearcoat.value;\n\n      if (attributes['Clearcoat Gloss']) {\n        params.clearcoatRoughness = 0.5 * (1 - attributes['Clearcoat Gloss'].value);\n      }\n    }\n  },\n  parseStandardAttributes: function parseStandardAttributes(params, attributes, maps) {\n    if (attributes.Luminous) {\n      params.emissiveIntensity = attributes.Luminous.value;\n\n      if (attributes['Luminous Color'] && !maps.emissive) {\n        params.emissive = new Color().fromArray(attributes['Luminous Color'].value);\n      } else {\n        params.emissive = new Color(0x808080);\n      }\n    }\n\n    if (attributes.Roughness && !maps.roughnessMap) params.roughness = attributes.Roughness.value;\n    if (attributes.Metallic && !maps.metalnessMap) params.metalness = attributes.Metallic.value;\n  },\n  parsePhongAttributes: function parsePhongAttributes(params, attributes, maps) {\n    if (attributes.Diffuse) params.color.multiplyScalar(attributes.Diffuse.value);\n\n    if (attributes.Reflection) {\n      params.reflectivity = attributes.Reflection.value;\n      params.combine = AddOperation;\n    }\n\n    if (attributes.Luminosity) {\n      params.emissiveIntensity = attributes.Luminosity.value;\n\n      if (!maps.emissiveMap && !maps.map) {\n        params.emissive = params.color;\n      } else {\n        params.emissive = new Color(0x808080);\n      }\n    } // parse specular if there is no roughness - we will interpret the material as 'Phong' in this case\n\n\n    if (!attributes.Roughness && attributes.Specular && !maps.specularMap) {\n      if (attributes['Color Highlight']) {\n        params.specular = new Color().setScalar(attributes.Specular.value).lerp(params.color.clone().multiplyScalar(attributes.Specular.value), attributes['Color Highlight'].value);\n      } else {\n        params.specular = new Color().setScalar(attributes.Specular.value);\n      }\n    }\n\n    if (params.specular && attributes.Glossiness) params.shininess = 7 + Math.pow(2, attributes.Glossiness.value * 12 + 2);\n  },\n  parseEnvMap: function parseEnvMap(connections, maps, attributes) {\n    if (connections.envMap) {\n      var envMap = this.loadTexture(connections.envMap);\n\n      if (attributes.transparent && attributes.opacity < 0.999) {\n        envMap.mapping = EquirectangularRefractionMapping; // Reflectivity and refraction mapping don't work well together in Phong materials\n\n        if (attributes.reflectivity !== undefined) {\n          delete attributes.reflectivity;\n          delete attributes.combine;\n        }\n\n        if (attributes.metalness !== undefined) {\n          delete attributes.metalness;\n        }\n      } else envMap.mapping = EquirectangularReflectionMapping;\n\n      maps.envMap = envMap;\n    }\n  },\n  // get texture defined at top level by its index\n  getTexturePathByIndex: function getTexturePathByIndex(index) {\n    var fileName = '';\n    if (!lwoTree.textures) return fileName;\n    lwoTree.textures.forEach(function (texture) {\n      if (texture.index === index) fileName = texture.fileName;\n    });\n    return fileName;\n  },\n  loadTexture: function loadTexture(path) {\n    if (!path) return null;\n    var texture;\n    texture = this.textureLoader.load(path, undefined, undefined, function () {\n      console.warn('LWOLoader: non-standard resource hierarchy. Use `resourcePath` parameter to specify root content directory.');\n    });\n    return texture;\n  },\n  // 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\n  getWrappingType: function getWrappingType(num) {\n    switch (num) {\n      case 0:\n        console.warn('LWOLoader: \"Reset\" texture wrapping type is not supported in three');\n        return ClampToEdgeWrapping;\n\n      case 1:\n        return RepeatWrapping;\n\n      case 2:\n        return MirroredRepeatWrapping;\n\n      case 3:\n        return ClampToEdgeWrapping;\n    }\n  },\n  getMaterialType: function getMaterialType(nodeData) {\n    if (nodeData.Clearcoat && nodeData.Clearcoat.value > 0) return MeshPhysicalMaterial;\n    if (nodeData.Roughness) return MeshStandardMaterial;\n    return MeshPhongMaterial;\n  }\n};\n\nfunction GeometryParser() {}\n\nGeometryParser.prototype = {\n  constructor: GeometryParser,\n  parse: function parse(geoData, layer) {\n    var geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(geoData.points, 3));\n    var indices = this.splitIndices(geoData.vertexIndices, geoData.polygonDimensions);\n    geometry.setIndex(indices);\n    this.parseGroups(geometry, geoData);\n    geometry.computeVertexNormals();\n    this.parseUVs(geometry, layer, indices);\n    this.parseMorphTargets(geometry, layer, indices); // TODO: z may need to be reversed to account for coordinate system change\n\n    geometry.translate(-layer.pivot[0], -layer.pivot[1], -layer.pivot[2]); // var userData = geometry.userData;\n    // geometry = geometry.toNonIndexed()\n    // geometry.userData = userData;\n\n    return geometry;\n  },\n  // split quads into tris\n  splitIndices: function splitIndices(indices, polygonDimensions) {\n    var remappedIndices = [];\n    var i = 0;\n    polygonDimensions.forEach(function (dim) {\n      if (dim < 4) {\n        for (var k = 0; k < dim; k++) {\n          remappedIndices.push(indices[i + k]);\n        }\n      } else if (dim === 4) {\n        remappedIndices.push(indices[i], indices[i + 1], indices[i + 2], indices[i], indices[i + 2], indices[i + 3]);\n      } else if (dim > 4) {\n        for (var _k = 1; _k < dim - 1; _k++) {\n          remappedIndices.push(indices[i], indices[i + _k], indices[i + _k + 1]);\n        }\n\n        console.warn('LWOLoader: polygons with greater than 4 sides are not supported');\n      }\n\n      i += dim;\n    });\n    return remappedIndices;\n  },\n  // NOTE: currently ignoring poly indices and assuming that they are intelligently ordered\n  parseGroups: function parseGroups(geometry, geoData) {\n    var tags = lwoTree.tags;\n    var matNames = [];\n    var elemSize = 3;\n    if (geoData.type === 'lines') elemSize = 2;\n    if (geoData.type === 'points') elemSize = 1;\n    var remappedIndices = this.splitMaterialIndices(geoData.polygonDimensions, geoData.materialIndices);\n    var indexNum = 0; // create new indices in numerical order\n\n    var indexPairs = {}; // original indices mapped to numerical indices\n\n    var prevMaterialIndex;\n    var prevStart = 0;\n    var currentCount = 0;\n\n    for (var i = 0; i < remappedIndices.length; i += 2) {\n      var materialIndex = remappedIndices[i + 1];\n      if (i === 0) matNames[indexNum] = tags[materialIndex];\n      if (prevMaterialIndex === undefined) prevMaterialIndex = materialIndex;\n\n      if (materialIndex !== prevMaterialIndex) {\n        var currentIndex;\n\n        if (indexPairs[tags[prevMaterialIndex]]) {\n          currentIndex = indexPairs[tags[prevMaterialIndex]];\n        } else {\n          currentIndex = indexNum;\n          indexPairs[tags[prevMaterialIndex]] = indexNum;\n          matNames[indexNum] = tags[prevMaterialIndex];\n          indexNum++;\n        }\n\n        geometry.addGroup(prevStart, currentCount, currentIndex);\n        prevStart += currentCount;\n        prevMaterialIndex = materialIndex;\n        currentCount = 0;\n      }\n\n      currentCount += elemSize;\n    } // the loop above doesn't add the last group, do that here.\n\n\n    if (geometry.groups.length > 0) {\n      var currentIndex;\n\n      if (indexPairs[tags[materialIndex]]) {\n        currentIndex = indexPairs[tags[materialIndex]];\n      } else {\n        currentIndex = indexNum;\n        indexPairs[tags[materialIndex]] = indexNum;\n        matNames[indexNum] = tags[materialIndex];\n      }\n\n      geometry.addGroup(prevStart, currentCount, currentIndex);\n    } // Mat names from TAGS chunk, used to build up an array of materials for this geometry\n\n\n    geometry.userData.matNames = matNames;\n  },\n  splitMaterialIndices: function splitMaterialIndices(polygonDimensions, indices) {\n    var remappedIndices = [];\n    polygonDimensions.forEach(function (dim, i) {\n      if (dim <= 3) {\n        remappedIndices.push(indices[i * 2], indices[i * 2 + 1]);\n      } else if (dim === 4) {\n        remappedIndices.push(indices[i * 2], indices[i * 2 + 1], indices[i * 2], indices[i * 2 + 1]);\n      } else {\n        // ignore > 4 for now\n        for (var k = 0; k < dim - 2; k++) {\n          remappedIndices.push(indices[i * 2], indices[i * 2 + 1]);\n        }\n      }\n    });\n    return remappedIndices;\n  },\n  // UV maps:\n  // 1: are defined via index into an array of points, not into a geometry\n  // - the geometry is also defined by an index into this array, but the indexes may not match\n  // 2: there can be any number of UV maps for a single geometry. Here these are combined,\n  // \twith preference given to the first map encountered\n  // 3: UV maps can be partial - that is, defined for only a part of the geometry\n  // 4: UV maps can be VMAP or VMAD (discontinuous, to allow for seams). In practice, most\n  // UV maps are defined as partially VMAP and partially VMAD\n  // VMADs are currently not supported\n  parseUVs: function parseUVs(geometry, layer) {\n    // start by creating a UV map set to zero for the whole geometry\n    var remappedUVs = Array.from(Array(geometry.attributes.position.count * 2), function () {\n      return 0;\n    });\n\n    for (var name in layer.uvs) {\n      var uvs = layer.uvs[name].uvs;\n      var uvIndices = layer.uvs[name].uvIndices;\n      uvIndices.forEach(function (i, j) {\n        remappedUVs[i * 2] = uvs[j * 2];\n        remappedUVs[i * 2 + 1] = uvs[j * 2 + 1];\n      });\n    }\n\n    geometry.setAttribute('uv', new Float32BufferAttribute(remappedUVs, 2));\n  },\n  parseMorphTargets: function parseMorphTargets(geometry, layer) {\n    var num = 0;\n\n    for (var name in layer.morphTargets) {\n      var remappedPoints = geometry.attributes.position.array.slice();\n      if (!geometry.morphAttributes.position) geometry.morphAttributes.position = [];\n      var morphPoints = layer.morphTargets[name].points;\n      var morphIndices = layer.morphTargets[name].indices;\n      var type = layer.morphTargets[name].type;\n      morphIndices.forEach(function (i, j) {\n        if (type === 'relative') {\n          remappedPoints[i * 3] += morphPoints[j * 3];\n          remappedPoints[i * 3 + 1] += morphPoints[j * 3 + 1];\n          remappedPoints[i * 3 + 2] += morphPoints[j * 3 + 2];\n        } else {\n          remappedPoints[i * 3] = morphPoints[j * 3];\n          remappedPoints[i * 3 + 1] = morphPoints[j * 3 + 1];\n          remappedPoints[i * 3 + 2] = morphPoints[j * 3 + 2];\n        }\n      });\n      geometry.morphAttributes.position[num] = new Float32BufferAttribute(remappedPoints, 3);\n      geometry.morphAttributes.position[num].name = name;\n      num++;\n    }\n\n    geometry.morphTargetsRelative = false;\n  }\n}; // ************** UTILITY FUNCTIONS **************\n\nfunction extractParentUrl(url, dir) {\n  var index = url.indexOf(dir);\n  if (index === -1) return './';\n  return url.substr(0, index);\n}\n\nexport { LWOLoader };","map":{"version":3,"names":["Loader","FileLoader","TextureLoader","Points","LineSegments","Mesh","PointsMaterial","LineBasicMaterial","BufferAttribute","MeshPhongMaterial","BackSide","DoubleSide","FrontSide","Vector2","Color","AddOperation","EquirectangularRefractionMapping","EquirectangularReflectionMapping","ClampToEdgeWrapping","MirroredRepeatWrapping","RepeatWrapping","MeshPhysicalMaterial","MeshStandardMaterial","BufferGeometry","Float32BufferAttribute","IFFParser","lwoTree","LWOLoader","manager","parameters","call","resourcePath","undefined","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","extractParentUrl","modelName","split","pop","loader","setPath","setResponseType","buffer","parse","e","console","error","itemError","iffBuffer","textureLoader","setCrossOrigin","crossOrigin","LWOTreeParser","materials","MaterialParser","defaultLayerName","meshes","parseLayers","finalMeshes","geometryParser","GeometryParser","layers","forEach","layer","geometry","mesh","parseMesh","number","parent","push","add","applyPivots","getMaterials","userData","matNames","type","duplicateUVs","name","pivot","traverse","child","position","x","y","z","parentPivot","namesArray","i","getMaterialByName","mat","spec","color","size","map","morphTargets","filtered","filter","Boolean","length","m","Array","isArray","aoMap","material","setAttribute","attributes","uv","array","textures","format","parseMaterial","parseMaterialLwo2","materialData","params","side","getSide","flatShading","getSmooth","connections","parseConnections","nodes","maps","parseTextureNodes","parseAttributeImageMaps","parseAttributes","parseEnvMap","materialType","getMaterialType","smooth","materialConnections","inputName","inputNodeName","nodeName","index","matNode","getNodeByRefName","envMap","fileName","refName","textureNodes","node","texture","loadTexture","widthWrappingMode","wrapS","getWrappingType","heightWrappingMode","wrapT","roughnessMap","roughness","specularMap","specular","emissiveMap","emissive","metalnessMap","metalness","alphaMap","transparent","normalMap","amplitude","normalScale","bumpMap","attribute","mapData","getTexturePathByIndex","imageIndex","wrap","w","h","fromArray","value","Transparency","opacity","bumpScale","refractionRatio","parsePhysicalAttributes","parseStandardAttributes","parsePhongAttributes","Clearcoat","clearcoat","clearcoatRoughness","Luminous","emissiveIntensity","Roughness","Metallic","Diffuse","multiplyScalar","Reflection","reflectivity","combine","Luminosity","Specular","setScalar","lerp","clone","Glossiness","shininess","Math","pow","mapping","warn","num","nodeData","geoData","points","indices","splitIndices","vertexIndices","polygonDimensions","setIndex","parseGroups","computeVertexNormals","parseUVs","parseMorphTargets","translate","remappedIndices","dim","k","tags","elemSize","splitMaterialIndices","materialIndices","indexNum","indexPairs","prevMaterialIndex","prevStart","currentCount","materialIndex","currentIndex","addGroup","groups","remappedUVs","from","count","uvs","uvIndices","j","remappedPoints","slice","morphAttributes","morphPoints","morphIndices","morphTargetsRelative","dir","indexOf","substr"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/loaders/LWOLoader.js"],"sourcesContent":["import { Loader, FileLoader, TextureLoader, Points, LineSegments, Mesh, PointsMaterial, LineBasicMaterial, BufferAttribute, MeshPhongMaterial, BackSide, DoubleSide, FrontSide, Vector2, Color, AddOperation, EquirectangularRefractionMapping, EquirectangularReflectionMapping, ClampToEdgeWrapping, MirroredRepeatWrapping, RepeatWrapping, MeshPhysicalMaterial, MeshStandardMaterial, BufferGeometry, Float32BufferAttribute } from 'three';\nimport { IFFParser } from './lwo/IFFParser.js';\n\n/**\n * @version 1.1.1\n *\n * @desc Load files in LWO3 and LWO2 format on Three.js\n *\n * LWO3 format specification:\n * \thttp://static.lightwave3d.com/sdk/2018/html/filefmts/lwo3.html\n *\n * LWO2 format specification:\n * \thttp://static.lightwave3d.com/sdk/2018/html/filefmts/lwo2.html\n *\n **/\nvar lwoTree;\n\nvar LWOLoader = function (manager, parameters) {\n  Loader.call(this, manager);\n  parameters = parameters || {};\n  this.resourcePath = parameters.resourcePath !== undefined ? parameters.resourcePath : '';\n};\n\nLWOLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: LWOLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = scope.path === '' ? extractParentUrl(url, 'Objects') : scope.path; // give the mesh a default name based on the filename\n\n    var modelName = url.split(path).pop().split('.')[0];\n    var loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (buffer) {\n      // console.time( 'Total parsing: ' );\n      try {\n        onLoad(scope.parse(buffer, path, modelName));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      } // console.timeEnd( 'Total parsing: ' );\n\n    }, onProgress, onError);\n  },\n  parse: function (iffBuffer, path, modelName) {\n    lwoTree = new IFFParser().parse(iffBuffer); // console.log( 'lwoTree', lwoTree );\n\n    var textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new LWOTreeParser(textureLoader).parse(modelName);\n  }\n}); // Parse the lwoTree object\n\nfunction LWOTreeParser(textureLoader) {\n  this.textureLoader = textureLoader;\n}\n\nLWOTreeParser.prototype = {\n  constructor: LWOTreeParser,\n  parse: function (modelName) {\n    this.materials = new MaterialParser(this.textureLoader).parse();\n    this.defaultLayerName = modelName;\n    this.meshes = this.parseLayers();\n    return {\n      materials: this.materials,\n      meshes: this.meshes\n    };\n  },\n\n  parseLayers() {\n    // array of all meshes for building hierarchy\n    var meshes = []; // final array containing meshes with scene graph hierarchy set up\n\n    var finalMeshes = [];\n    var geometryParser = new GeometryParser();\n    var scope = this;\n    lwoTree.layers.forEach(function (layer) {\n      var geometry = geometryParser.parse(layer.geometry, layer);\n      var mesh = scope.parseMesh(geometry, layer);\n      meshes[layer.number] = mesh;\n      if (layer.parent === -1) finalMeshes.push(mesh);else meshes[layer.parent].add(mesh);\n    });\n    this.applyPivots(finalMeshes);\n    return finalMeshes;\n  },\n\n  parseMesh(geometry, layer) {\n    var mesh;\n    var materials = this.getMaterials(geometry.userData.matNames, layer.geometry.type);\n    this.duplicateUVs(geometry, materials);\n    if (layer.geometry.type === 'points') mesh = new Points(geometry, materials);else if (layer.geometry.type === 'lines') mesh = new LineSegments(geometry, materials);else mesh = new Mesh(geometry, materials);\n    if (layer.name) mesh.name = layer.name;else mesh.name = this.defaultLayerName + '_layer_' + layer.number;\n    mesh.userData.pivot = layer.pivot;\n    return mesh;\n  },\n\n  // TODO: may need to be reversed in z to convert LWO to three.js coordinates\n  applyPivots(meshes) {\n    meshes.forEach(function (mesh) {\n      mesh.traverse(function (child) {\n        var pivot = child.userData.pivot;\n        child.position.x += pivot[0];\n        child.position.y += pivot[1];\n        child.position.z += pivot[2];\n\n        if (child.parent) {\n          var parentPivot = child.parent.userData.pivot;\n          child.position.x -= parentPivot[0];\n          child.position.y -= parentPivot[1];\n          child.position.z -= parentPivot[2];\n        }\n      });\n    });\n  },\n\n  getMaterials(namesArray, type) {\n    var materials = [];\n    var scope = this;\n    namesArray.forEach(function (name, i) {\n      materials[i] = scope.getMaterialByName(name);\n    }); // convert materials to line or point mats if required\n\n    if (type === 'points' || type === 'lines') {\n      materials.forEach(function (mat, i) {\n        var spec = {\n          color: mat.color\n        };\n\n        if (type === 'points') {\n          spec.size = 0.1;\n          spec.map = mat.map;\n          spec.morphTargets = mat.morphTargets;\n          materials[i] = new PointsMaterial(spec);\n        } else if (type === 'lines') {\n          materials[i] = new LineBasicMaterial(spec);\n        }\n      });\n    } // if there is only one material, return that directly instead of array\n\n\n    var filtered = materials.filter(Boolean);\n    if (filtered.length === 1) return filtered[0];\n    return materials;\n  },\n\n  getMaterialByName(name) {\n    return this.materials.filter(function (m) {\n      return m.name === name;\n    })[0];\n  },\n\n  // If the material has an aoMap, duplicate UVs\n  duplicateUVs(geometry, materials) {\n    var duplicateUVs = false;\n\n    if (!Array.isArray(materials)) {\n      if (materials.aoMap) duplicateUVs = true;\n    } else {\n      materials.forEach(function (material) {\n        if (material.aoMap) duplicateUVs = true;\n      });\n    }\n\n    if (!duplicateUVs) return;\n    geometry.setAttribute('uv2', new BufferAttribute(geometry.attributes.uv.array, 2));\n  }\n\n};\n\nfunction MaterialParser(textureLoader) {\n  this.textureLoader = textureLoader;\n}\n\nMaterialParser.prototype = {\n  constructor: MaterialParser,\n  parse: function () {\n    var materials = [];\n    this.textures = {};\n\n    for (let name in lwoTree.materials) {\n      if (lwoTree.format === 'LWO3') {\n        materials.push(this.parseMaterial(lwoTree.materials[name], name, lwoTree.textures));\n      } else if (lwoTree.format === 'LWO2') {\n        materials.push(this.parseMaterialLwo2(lwoTree.materials[name], name, lwoTree.textures));\n      }\n    }\n\n    return materials;\n  },\n\n  parseMaterial(materialData, name, textures) {\n    var params = {\n      name: name,\n      side: this.getSide(materialData.attributes),\n      flatShading: this.getSmooth(materialData.attributes)\n    };\n    var connections = this.parseConnections(materialData.connections, materialData.nodes);\n    var maps = this.parseTextureNodes(connections.maps);\n    this.parseAttributeImageMaps(connections.attributes, textures, maps, materialData.maps);\n    var attributes = this.parseAttributes(connections.attributes, maps);\n    this.parseEnvMap(connections, maps, attributes);\n    params = Object.assign(maps, params);\n    params = Object.assign(params, attributes);\n    var materialType = this.getMaterialType(connections.attributes);\n    return new materialType(params);\n  },\n\n  parseMaterialLwo2(materialData, name\n  /*, textures*/\n  ) {\n    var params = {\n      name: name,\n      side: this.getSide(materialData.attributes),\n      flatShading: this.getSmooth(materialData.attributes)\n    };\n    var attributes = this.parseAttributes(materialData.attributes, {});\n    params = Object.assign(params, attributes);\n    return new MeshPhongMaterial(params);\n  },\n\n  // Note: converting from left to right handed coords by switching x -> -x in vertices, and\n  // then switching mat FrontSide -> BackSide\n  // NB: this means that FrontSide and BackSide have been switched!\n  getSide(attributes) {\n    if (!attributes.side) return BackSide;\n\n    switch (attributes.side) {\n      case 0:\n      case 1:\n        return BackSide;\n\n      case 2:\n        return FrontSide;\n\n      case 3:\n        return DoubleSide;\n    }\n  },\n\n  getSmooth(attributes) {\n    if (!attributes.smooth) return true;\n    return !attributes.smooth;\n  },\n\n  parseConnections(connections, nodes) {\n    var materialConnections = {\n      maps: {}\n    };\n    var inputName = connections.inputName;\n    var inputNodeName = connections.inputNodeName;\n    var nodeName = connections.nodeName;\n    var scope = this;\n    inputName.forEach(function (name, index) {\n      if (name === 'Material') {\n        var matNode = scope.getNodeByRefName(inputNodeName[index], nodes);\n        materialConnections.attributes = matNode.attributes;\n        materialConnections.envMap = matNode.fileName;\n        materialConnections.name = inputNodeName[index];\n      }\n    });\n    nodeName.forEach(function (name, index) {\n      if (name === materialConnections.name) {\n        materialConnections.maps[inputName[index]] = scope.getNodeByRefName(inputNodeName[index], nodes);\n      }\n    });\n    return materialConnections;\n  },\n\n  getNodeByRefName(refName, nodes) {\n    for (let name in nodes) {\n      if (nodes[name].refName === refName) return nodes[name];\n    }\n  },\n\n  parseTextureNodes(textureNodes) {\n    var maps = {};\n\n    for (let name in textureNodes) {\n      var node = textureNodes[name];\n      var path = node.fileName;\n      if (!path) return;\n      var texture = this.loadTexture(path);\n      if (node.widthWrappingMode !== undefined) texture.wrapS = this.getWrappingType(node.widthWrappingMode);\n      if (node.heightWrappingMode !== undefined) texture.wrapT = this.getWrappingType(node.heightWrappingMode);\n\n      switch (name) {\n        case 'Color':\n          maps.map = texture;\n          break;\n\n        case 'Roughness':\n          maps.roughnessMap = texture;\n          maps.roughness = 0.5;\n          break;\n\n        case 'Specular':\n          maps.specularMap = texture;\n          maps.specular = 0xffffff;\n          break;\n\n        case 'Luminous':\n          maps.emissiveMap = texture;\n          maps.emissive = 0x808080;\n          break;\n\n        case 'Luminous Color':\n          maps.emissive = 0x808080;\n          break;\n\n        case 'Metallic':\n          maps.metalnessMap = texture;\n          maps.metalness = 0.5;\n          break;\n\n        case 'Transparency':\n        case 'Alpha':\n          maps.alphaMap = texture;\n          maps.transparent = true;\n          break;\n\n        case 'Normal':\n          maps.normalMap = texture;\n          if (node.amplitude !== undefined) maps.normalScale = new Vector2(node.amplitude, node.amplitude);\n          break;\n\n        case 'Bump':\n          maps.bumpMap = texture;\n          break;\n      }\n    } // LWO BSDF materials can have both spec and rough, but this is not valid in three\n\n\n    if (maps.roughnessMap && maps.specularMap) delete maps.specularMap;\n    return maps;\n  },\n\n  // maps can also be defined on individual material attributes, parse those here\n  // This occurs on Standard (Phong) surfaces\n  parseAttributeImageMaps(attributes, textures, maps) {\n    for (let name in attributes) {\n      var attribute = attributes[name];\n\n      if (attribute.maps) {\n        var mapData = attribute.maps[0];\n        var path = this.getTexturePathByIndex(mapData.imageIndex, textures);\n        if (!path) return;\n        var texture = this.loadTexture(path);\n        if (mapData.wrap !== undefined) texture.wrapS = this.getWrappingType(mapData.wrap.w);\n        if (mapData.wrap !== undefined) texture.wrapT = this.getWrappingType(mapData.wrap.h);\n\n        switch (name) {\n          case 'Color':\n            maps.map = texture;\n            break;\n\n          case 'Diffuse':\n            maps.aoMap = texture;\n            break;\n\n          case 'Roughness':\n            maps.roughnessMap = texture;\n            maps.roughness = 1;\n            break;\n\n          case 'Specular':\n            maps.specularMap = texture;\n            maps.specular = 0xffffff;\n            break;\n\n          case 'Luminosity':\n            maps.emissiveMap = texture;\n            maps.emissive = 0x808080;\n            break;\n\n          case 'Metallic':\n            maps.metalnessMap = texture;\n            maps.metalness = 1;\n            break;\n\n          case 'Transparency':\n          case 'Alpha':\n            maps.alphaMap = texture;\n            maps.transparent = true;\n            break;\n\n          case 'Normal':\n            maps.normalMap = texture;\n            break;\n\n          case 'Bump':\n            maps.bumpMap = texture;\n            break;\n        }\n      }\n    }\n  },\n\n  parseAttributes(attributes, maps) {\n    var params = {}; // don't use color data if color map is present\n\n    if (attributes.Color && !maps.map) {\n      params.color = new Color().fromArray(attributes.Color.value);\n    } else params.color = new Color();\n\n    if (attributes.Transparency && attributes.Transparency.value !== 0) {\n      params.opacity = 1 - attributes.Transparency.value;\n      params.transparent = true;\n    }\n\n    if (attributes['Bump Height']) params.bumpScale = attributes['Bump Height'].value * 0.1;\n    if (attributes['Refraction Index']) params.refractionRatio = 1 / attributes['Refraction Index'].value;\n    this.parsePhysicalAttributes(params, attributes, maps);\n    this.parseStandardAttributes(params, attributes, maps);\n    this.parsePhongAttributes(params, attributes, maps);\n    return params;\n  },\n\n  parsePhysicalAttributes(params, attributes\n  /*, maps*/\n  ) {\n    if (attributes.Clearcoat && attributes.Clearcoat.value > 0) {\n      params.clearcoat = attributes.Clearcoat.value;\n\n      if (attributes['Clearcoat Gloss']) {\n        params.clearcoatRoughness = 0.5 * (1 - attributes['Clearcoat Gloss'].value);\n      }\n    }\n  },\n\n  parseStandardAttributes(params, attributes, maps) {\n    if (attributes.Luminous) {\n      params.emissiveIntensity = attributes.Luminous.value;\n\n      if (attributes['Luminous Color'] && !maps.emissive) {\n        params.emissive = new Color().fromArray(attributes['Luminous Color'].value);\n      } else {\n        params.emissive = new Color(0x808080);\n      }\n    }\n\n    if (attributes.Roughness && !maps.roughnessMap) params.roughness = attributes.Roughness.value;\n    if (attributes.Metallic && !maps.metalnessMap) params.metalness = attributes.Metallic.value;\n  },\n\n  parsePhongAttributes(params, attributes, maps) {\n    if (attributes.Diffuse) params.color.multiplyScalar(attributes.Diffuse.value);\n\n    if (attributes.Reflection) {\n      params.reflectivity = attributes.Reflection.value;\n      params.combine = AddOperation;\n    }\n\n    if (attributes.Luminosity) {\n      params.emissiveIntensity = attributes.Luminosity.value;\n\n      if (!maps.emissiveMap && !maps.map) {\n        params.emissive = params.color;\n      } else {\n        params.emissive = new Color(0x808080);\n      }\n    } // parse specular if there is no roughness - we will interpret the material as 'Phong' in this case\n\n\n    if (!attributes.Roughness && attributes.Specular && !maps.specularMap) {\n      if (attributes['Color Highlight']) {\n        params.specular = new Color().setScalar(attributes.Specular.value).lerp(params.color.clone().multiplyScalar(attributes.Specular.value), attributes['Color Highlight'].value);\n      } else {\n        params.specular = new Color().setScalar(attributes.Specular.value);\n      }\n    }\n\n    if (params.specular && attributes.Glossiness) params.shininess = 7 + Math.pow(2, attributes.Glossiness.value * 12 + 2);\n  },\n\n  parseEnvMap(connections, maps, attributes) {\n    if (connections.envMap) {\n      var envMap = this.loadTexture(connections.envMap);\n\n      if (attributes.transparent && attributes.opacity < 0.999) {\n        envMap.mapping = EquirectangularRefractionMapping; // Reflectivity and refraction mapping don't work well together in Phong materials\n\n        if (attributes.reflectivity !== undefined) {\n          delete attributes.reflectivity;\n          delete attributes.combine;\n        }\n\n        if (attributes.metalness !== undefined) {\n          delete attributes.metalness;\n        }\n      } else envMap.mapping = EquirectangularReflectionMapping;\n\n      maps.envMap = envMap;\n    }\n  },\n\n  // get texture defined at top level by its index\n  getTexturePathByIndex(index) {\n    var fileName = '';\n    if (!lwoTree.textures) return fileName;\n    lwoTree.textures.forEach(function (texture) {\n      if (texture.index === index) fileName = texture.fileName;\n    });\n    return fileName;\n  },\n\n  loadTexture(path) {\n    if (!path) return null;\n    var texture;\n    texture = this.textureLoader.load(path, undefined, undefined, function () {\n      console.warn('LWOLoader: non-standard resource hierarchy. Use `resourcePath` parameter to specify root content directory.');\n    });\n    return texture;\n  },\n\n  // 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\n  getWrappingType(num) {\n    switch (num) {\n      case 0:\n        console.warn('LWOLoader: \"Reset\" texture wrapping type is not supported in three');\n        return ClampToEdgeWrapping;\n\n      case 1:\n        return RepeatWrapping;\n\n      case 2:\n        return MirroredRepeatWrapping;\n\n      case 3:\n        return ClampToEdgeWrapping;\n    }\n  },\n\n  getMaterialType(nodeData) {\n    if (nodeData.Clearcoat && nodeData.Clearcoat.value > 0) return MeshPhysicalMaterial;\n    if (nodeData.Roughness) return MeshStandardMaterial;\n    return MeshPhongMaterial;\n  }\n\n};\n\nfunction GeometryParser() {}\n\nGeometryParser.prototype = {\n  constructor: GeometryParser,\n\n  parse(geoData, layer) {\n    var geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(geoData.points, 3));\n    var indices = this.splitIndices(geoData.vertexIndices, geoData.polygonDimensions);\n    geometry.setIndex(indices);\n    this.parseGroups(geometry, geoData);\n    geometry.computeVertexNormals();\n    this.parseUVs(geometry, layer, indices);\n    this.parseMorphTargets(geometry, layer, indices); // TODO: z may need to be reversed to account for coordinate system change\n\n    geometry.translate(-layer.pivot[0], -layer.pivot[1], -layer.pivot[2]); // var userData = geometry.userData;\n    // geometry = geometry.toNonIndexed()\n    // geometry.userData = userData;\n\n    return geometry;\n  },\n\n  // split quads into tris\n  splitIndices(indices, polygonDimensions) {\n    var remappedIndices = [];\n    var i = 0;\n    polygonDimensions.forEach(function (dim) {\n      if (dim < 4) {\n        for (let k = 0; k < dim; k++) remappedIndices.push(indices[i + k]);\n      } else if (dim === 4) {\n        remappedIndices.push(indices[i], indices[i + 1], indices[i + 2], indices[i], indices[i + 2], indices[i + 3]);\n      } else if (dim > 4) {\n        for (let k = 1; k < dim - 1; k++) {\n          remappedIndices.push(indices[i], indices[i + k], indices[i + k + 1]);\n        }\n\n        console.warn('LWOLoader: polygons with greater than 4 sides are not supported');\n      }\n\n      i += dim;\n    });\n    return remappedIndices;\n  },\n\n  // NOTE: currently ignoring poly indices and assuming that they are intelligently ordered\n  parseGroups(geometry, geoData) {\n    var tags = lwoTree.tags;\n    var matNames = [];\n    var elemSize = 3;\n    if (geoData.type === 'lines') elemSize = 2;\n    if (geoData.type === 'points') elemSize = 1;\n    var remappedIndices = this.splitMaterialIndices(geoData.polygonDimensions, geoData.materialIndices);\n    var indexNum = 0; // create new indices in numerical order\n\n    var indexPairs = {}; // original indices mapped to numerical indices\n\n    var prevMaterialIndex;\n    var prevStart = 0;\n    var currentCount = 0;\n\n    for (let i = 0; i < remappedIndices.length; i += 2) {\n      var materialIndex = remappedIndices[i + 1];\n      if (i === 0) matNames[indexNum] = tags[materialIndex];\n      if (prevMaterialIndex === undefined) prevMaterialIndex = materialIndex;\n\n      if (materialIndex !== prevMaterialIndex) {\n        var currentIndex;\n\n        if (indexPairs[tags[prevMaterialIndex]]) {\n          currentIndex = indexPairs[tags[prevMaterialIndex]];\n        } else {\n          currentIndex = indexNum;\n          indexPairs[tags[prevMaterialIndex]] = indexNum;\n          matNames[indexNum] = tags[prevMaterialIndex];\n          indexNum++;\n        }\n\n        geometry.addGroup(prevStart, currentCount, currentIndex);\n        prevStart += currentCount;\n        prevMaterialIndex = materialIndex;\n        currentCount = 0;\n      }\n\n      currentCount += elemSize;\n    } // the loop above doesn't add the last group, do that here.\n\n\n    if (geometry.groups.length > 0) {\n      var currentIndex;\n\n      if (indexPairs[tags[materialIndex]]) {\n        currentIndex = indexPairs[tags[materialIndex]];\n      } else {\n        currentIndex = indexNum;\n        indexPairs[tags[materialIndex]] = indexNum;\n        matNames[indexNum] = tags[materialIndex];\n      }\n\n      geometry.addGroup(prevStart, currentCount, currentIndex);\n    } // Mat names from TAGS chunk, used to build up an array of materials for this geometry\n\n\n    geometry.userData.matNames = matNames;\n  },\n\n  splitMaterialIndices(polygonDimensions, indices) {\n    var remappedIndices = [];\n    polygonDimensions.forEach(function (dim, i) {\n      if (dim <= 3) {\n        remappedIndices.push(indices[i * 2], indices[i * 2 + 1]);\n      } else if (dim === 4) {\n        remappedIndices.push(indices[i * 2], indices[i * 2 + 1], indices[i * 2], indices[i * 2 + 1]);\n      } else {\n        // ignore > 4 for now\n        for (let k = 0; k < dim - 2; k++) {\n          remappedIndices.push(indices[i * 2], indices[i * 2 + 1]);\n        }\n      }\n    });\n    return remappedIndices;\n  },\n\n  // UV maps:\n  // 1: are defined via index into an array of points, not into a geometry\n  // - the geometry is also defined by an index into this array, but the indexes may not match\n  // 2: there can be any number of UV maps for a single geometry. Here these are combined,\n  // \twith preference given to the first map encountered\n  // 3: UV maps can be partial - that is, defined for only a part of the geometry\n  // 4: UV maps can be VMAP or VMAD (discontinuous, to allow for seams). In practice, most\n  // UV maps are defined as partially VMAP and partially VMAD\n  // VMADs are currently not supported\n  parseUVs(geometry, layer) {\n    // start by creating a UV map set to zero for the whole geometry\n    var remappedUVs = Array.from(Array(geometry.attributes.position.count * 2), function () {\n      return 0;\n    });\n\n    for (let name in layer.uvs) {\n      var uvs = layer.uvs[name].uvs;\n      var uvIndices = layer.uvs[name].uvIndices;\n      uvIndices.forEach(function (i, j) {\n        remappedUVs[i * 2] = uvs[j * 2];\n        remappedUVs[i * 2 + 1] = uvs[j * 2 + 1];\n      });\n    }\n\n    geometry.setAttribute('uv', new Float32BufferAttribute(remappedUVs, 2));\n  },\n\n  parseMorphTargets(geometry, layer) {\n    var num = 0;\n\n    for (let name in layer.morphTargets) {\n      var remappedPoints = geometry.attributes.position.array.slice();\n      if (!geometry.morphAttributes.position) geometry.morphAttributes.position = [];\n      var morphPoints = layer.morphTargets[name].points;\n      var morphIndices = layer.morphTargets[name].indices;\n      var type = layer.morphTargets[name].type;\n      morphIndices.forEach(function (i, j) {\n        if (type === 'relative') {\n          remappedPoints[i * 3] += morphPoints[j * 3];\n          remappedPoints[i * 3 + 1] += morphPoints[j * 3 + 1];\n          remappedPoints[i * 3 + 2] += morphPoints[j * 3 + 2];\n        } else {\n          remappedPoints[i * 3] = morphPoints[j * 3];\n          remappedPoints[i * 3 + 1] = morphPoints[j * 3 + 1];\n          remappedPoints[i * 3 + 2] = morphPoints[j * 3 + 2];\n        }\n      });\n      geometry.morphAttributes.position[num] = new Float32BufferAttribute(remappedPoints, 3);\n      geometry.morphAttributes.position[num].name = name;\n      num++;\n    }\n\n    geometry.morphTargetsRelative = false;\n  }\n\n}; // ************** UTILITY FUNCTIONS **************\n\nfunction extractParentUrl(url, dir) {\n  var index = url.indexOf(dir);\n  if (index === -1) return './';\n  return url.substr(0, index);\n}\n\nexport { LWOLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}