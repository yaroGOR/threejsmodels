{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, Vector3, Vector2, TextureLoader, Scene, Object3D, Group, SphereGeometry, MeshBasicMaterial, BackSide, Mesh, PointsMaterial, Points, LineBasicMaterial, LineSegments, FrontSide, DoubleSide, MeshPhongMaterial, Color, DataTexture, RGBAFormat, RGBFormat, BufferGeometry, Float32BufferAttribute, BoxGeometry, ConeGeometry, CylinderGeometry, Quaternion, ShapeUtils, BufferAttribute, RepeatWrapping, ClampToEdgeWrapping } from 'three';\nimport { Parser, createToken, Lexer } from 'chevrotain';\n\nvar VRMLLoader = function () {\n  // class definitions\n  function VRMLLoader(manager) {\n    Loader.call(this, manager);\n  }\n\n  VRMLLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n    constructor: VRMLLoader,\n    load: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    },\n    parse: function parse(data, path) {\n      var nodeMap = {};\n\n      function generateVRMLTree(data) {\n        // create lexer, parser and visitor\n        var tokenData = createTokens();\n        var lexer = new VRMLLexer(tokenData.tokens);\n        var parser = new VRMLParser(tokenData.tokenVocabulary);\n        var visitor = createVisitor(parser.getBaseCstVisitorConstructor()); // lexing\n\n        var lexingResult = lexer.lex(data);\n        parser.input = lexingResult.tokens; // parsing\n\n        var cstOutput = parser.vrml();\n\n        if (parser.errors.length > 0) {\n          console.error(parser.errors);\n          throw Error('THREE.VRMLLoader: Parsing errors detected.');\n        } // actions\n\n\n        var ast = visitor.visit(cstOutput);\n        return ast;\n      }\n\n      function createTokens() {\n        // from http://gun.teipir.gr/VRML-amgem/spec/part1/concepts.html#SyntaxBasics\n        var RouteIdentifier = createToken({\n          name: 'RouteIdentifier',\n          pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*[\\.][^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/\n        });\n        var Identifier = createToken({\n          name: 'Identifier',\n          pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/,\n          longer_alt: RouteIdentifier\n        }); // from http://gun.teipir.gr/VRML-amgem/spec/part1/nodesRef.html\n\n        var nodeTypes = ['Anchor', 'Billboard', 'Collision', 'Group', 'Transform', // grouping nodes\n        'Inline', 'LOD', 'Switch', // special groups\n        'AudioClip', 'DirectionalLight', 'PointLight', 'Script', 'Shape', 'Sound', 'SpotLight', 'WorldInfo', // common nodes\n        'CylinderSensor', 'PlaneSensor', 'ProximitySensor', 'SphereSensor', 'TimeSensor', 'TouchSensor', 'VisibilitySensor', // sensors\n        'Box', 'Cone', 'Cylinder', 'ElevationGrid', 'Extrusion', 'IndexedFaceSet', 'IndexedLineSet', 'PointSet', 'Sphere', // geometries\n        'Color', 'Coordinate', 'Normal', 'TextureCoordinate', // geometric properties\n        'Appearance', 'FontStyle', 'ImageTexture', 'Material', 'MovieTexture', 'PixelTexture', 'TextureTransform', // appearance\n        'ColorInterpolator', 'CoordinateInterpolator', 'NormalInterpolator', 'OrientationInterpolator', 'PositionInterpolator', 'ScalarInterpolator', // interpolators\n        'Background', 'Fog', 'NavigationInfo', 'Viewpoint', // bindable nodes\n        'Text' // Text must be placed at the end of the regex so there are no matches for TextureTransform and TextureCoordinate\n        ]; //\n\n        var Version = createToken({\n          name: 'Version',\n          pattern: /#VRML.*/,\n          longer_alt: Identifier\n        });\n        var NodeName = createToken({\n          name: 'NodeName',\n          pattern: new RegExp(nodeTypes.join('|')),\n          longer_alt: Identifier\n        });\n        var DEF = createToken({\n          name: 'DEF',\n          pattern: /DEF/,\n          longer_alt: Identifier\n        });\n        var USE = createToken({\n          name: 'USE',\n          pattern: /USE/,\n          longer_alt: Identifier\n        });\n        var ROUTE = createToken({\n          name: 'ROUTE',\n          pattern: /ROUTE/,\n          longer_alt: Identifier\n        });\n        var TO = createToken({\n          name: 'TO',\n          pattern: /TO/,\n          longer_alt: Identifier\n        }); //\n\n        var StringLiteral = createToken({\n          name: 'StringLiteral',\n          pattern: /\"(:?[^\\\\\"\\n\\r]+|\\\\(:?[bfnrtv\"\\\\/]|u[0-9a-fA-F]{4}))*\"/\n        });\n        var HexLiteral = createToken({\n          name: 'HexLiteral',\n          pattern: /0[xX][0-9a-fA-F]+/\n        });\n        var NumberLiteral = createToken({\n          name: 'NumberLiteral',\n          pattern: /[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?/\n        });\n        var TrueLiteral = createToken({\n          name: 'TrueLiteral',\n          pattern: /TRUE/\n        });\n        var FalseLiteral = createToken({\n          name: 'FalseLiteral',\n          pattern: /FALSE/\n        });\n        var NullLiteral = createToken({\n          name: 'NullLiteral',\n          pattern: /NULL/\n        });\n        var LSquare = createToken({\n          name: 'LSquare',\n          pattern: /\\[/\n        });\n        var RSquare = createToken({\n          name: 'RSquare',\n          pattern: /]/\n        });\n        var LCurly = createToken({\n          name: 'LCurly',\n          pattern: /{/\n        });\n        var RCurly = createToken({\n          name: 'RCurly',\n          pattern: /}/\n        });\n        var Comment = createToken({\n          name: 'Comment',\n          pattern: /#.*/,\n          group: Lexer.SKIPPED // eslint-disable-line no-undef\n\n        }); // commas, blanks, tabs, newlines and carriage returns are whitespace characters wherever they appear outside of string fields\n\n        var WhiteSpace = createToken({\n          name: 'WhiteSpace',\n          pattern: /[ ,\\s]/,\n          group: Lexer.SKIPPED // eslint-disable-line no-undef\n\n        });\n        var tokens = [WhiteSpace, // keywords appear before the Identifier\n        NodeName, DEF, USE, ROUTE, TO, TrueLiteral, FalseLiteral, NullLiteral, // the Identifier must appear after the keywords because all keywords are valid identifiers\n        Version, Identifier, RouteIdentifier, StringLiteral, HexLiteral, NumberLiteral, LSquare, RSquare, LCurly, RCurly, Comment];\n        var tokenVocabulary = {};\n\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n          tokenVocabulary[token.name] = token;\n        }\n\n        return {\n          tokens: tokens,\n          tokenVocabulary: tokenVocabulary\n        };\n      }\n\n      function createVisitor(BaseVRMLVisitor) {\n        // the visitor is created dynmaically based on the given base class\n        function VRMLToASTVisitor() {\n          BaseVRMLVisitor.call(this);\n          this.validateVisitor();\n        }\n\n        VRMLToASTVisitor.prototype = Object.assign(Object.create(BaseVRMLVisitor.prototype), {\n          constructor: VRMLToASTVisitor,\n          vrml: function vrml(ctx) {\n            var data = {\n              version: this.visit(ctx.version),\n              nodes: [],\n              routes: []\n            };\n\n            for (var i = 0, l = ctx.node.length; i < l; i++) {\n              var node = ctx.node[i];\n              data.nodes.push(this.visit(node));\n            }\n\n            if (ctx.route) {\n              for (var _i = 0, _l = ctx.route.length; _i < _l; _i++) {\n                var route = ctx.route[_i];\n                data.routes.push(this.visit(route));\n              }\n            }\n\n            return data;\n          },\n          version: function version(ctx) {\n            return ctx.Version[0].image;\n          },\n          node: function node(ctx) {\n            var data = {\n              name: ctx.NodeName[0].image,\n              fields: []\n            };\n\n            if (ctx.field) {\n              for (var i = 0, l = ctx.field.length; i < l; i++) {\n                var field = ctx.field[i];\n                data.fields.push(this.visit(field));\n              }\n            } // DEF\n\n\n            if (ctx.def) {\n              data.DEF = this.visit(ctx.def[0]);\n            }\n\n            return data;\n          },\n          field: function field(ctx) {\n            var data = {\n              name: ctx.Identifier[0].image,\n              type: null,\n              values: null\n            };\n            var result; // SFValue\n\n            if (ctx.singleFieldValue) {\n              result = this.visit(ctx.singleFieldValue[0]);\n            } // MFValue\n\n\n            if (ctx.multiFieldValue) {\n              result = this.visit(ctx.multiFieldValue[0]);\n            }\n\n            data.type = result.type;\n            data.values = result.values;\n            return data;\n          },\n          def: function def(ctx) {\n            return (ctx.Identifier || ctx.NodeName)[0].image;\n          },\n          use: function use(ctx) {\n            return {\n              USE: (ctx.Identifier || ctx.NodeName)[0].image\n            };\n          },\n          singleFieldValue: function singleFieldValue(ctx) {\n            return processField(this, ctx);\n          },\n          multiFieldValue: function multiFieldValue(ctx) {\n            return processField(this, ctx);\n          },\n          route: function route(ctx) {\n            var data = {\n              FROM: ctx.RouteIdentifier[0].image,\n              TO: ctx.RouteIdentifier[1].image\n            };\n            return data;\n          }\n        });\n\n        function processField(scope, ctx) {\n          var field = {\n            type: null,\n            values: []\n          };\n\n          if (ctx.node) {\n            field.type = 'node';\n\n            for (var i = 0, l = ctx.node.length; i < l; i++) {\n              var node = ctx.node[i];\n              field.values.push(scope.visit(node));\n            }\n          }\n\n          if (ctx.use) {\n            field.type = 'use';\n\n            for (var _i2 = 0, _l2 = ctx.use.length; _i2 < _l2; _i2++) {\n              var use = ctx.use[_i2];\n              field.values.push(scope.visit(use));\n            }\n          }\n\n          if (ctx.StringLiteral) {\n            field.type = 'string';\n\n            for (var _i3 = 0, _l3 = ctx.StringLiteral.length; _i3 < _l3; _i3++) {\n              var stringLiteral = ctx.StringLiteral[_i3];\n              field.values.push(stringLiteral.image.replace(/'|\"/g, ''));\n            }\n          }\n\n          if (ctx.NumberLiteral) {\n            field.type = 'number';\n\n            for (var _i4 = 0, _l4 = ctx.NumberLiteral.length; _i4 < _l4; _i4++) {\n              var numberLiteral = ctx.NumberLiteral[_i4];\n              field.values.push(parseFloat(numberLiteral.image));\n            }\n          }\n\n          if (ctx.HexLiteral) {\n            field.type = 'hex';\n\n            for (var _i5 = 0, _l5 = ctx.HexLiteral.length; _i5 < _l5; _i5++) {\n              var hexLiteral = ctx.HexLiteral[_i5];\n              field.values.push(hexLiteral.image);\n            }\n          }\n\n          if (ctx.TrueLiteral) {\n            field.type = 'boolean';\n\n            for (var _i6 = 0, _l6 = ctx.TrueLiteral.length; _i6 < _l6; _i6++) {\n              var trueLiteral = ctx.TrueLiteral[_i6];\n              if (trueLiteral.image === 'TRUE') field.values.push(true);\n            }\n          }\n\n          if (ctx.FalseLiteral) {\n            field.type = 'boolean';\n\n            for (var _i7 = 0, _l7 = ctx.FalseLiteral.length; _i7 < _l7; _i7++) {\n              var falseLiteral = ctx.FalseLiteral[_i7];\n              if (falseLiteral.image === 'FALSE') field.values.push(false);\n            }\n          }\n\n          if (ctx.NullLiteral) {\n            field.type = 'null';\n            ctx.NullLiteral.forEach(function () {\n              field.values.push(null);\n            });\n          }\n\n          return field;\n        }\n\n        return new VRMLToASTVisitor();\n      }\n\n      function parseTree(tree) {\n        // console.log( JSON.stringify( tree, null, 2 ) );\n        var nodes = tree.nodes;\n        var scene = new Scene(); // first iteration: build nodemap based on DEF statements\n\n        for (var i = 0, l = nodes.length; i < l; i++) {\n          var node = nodes[i];\n          buildNodeMap(node);\n        } // second iteration: build nodes\n\n\n        for (var _i8 = 0, _l8 = nodes.length; _i8 < _l8; _i8++) {\n          var node = nodes[_i8];\n          var object = getNode(node);\n          if (object instanceof Object3D) scene.add(object);\n          if (node.name === 'WorldInfo') scene.userData.worldInfo = object;\n        }\n\n        return scene;\n      }\n\n      function buildNodeMap(node) {\n        if (node.DEF) {\n          nodeMap[node.DEF] = node;\n        }\n\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n\n          if (field.type === 'node') {\n            var fieldValues = field.values;\n\n            for (var j = 0, jl = fieldValues.length; j < jl; j++) {\n              buildNodeMap(fieldValues[j]);\n            }\n          }\n        }\n      }\n\n      function getNode(node) {\n        // handle case where a node refers to a different one\n        if (node.USE) {\n          return resolveUSE(node.USE);\n        }\n\n        if (node.build !== undefined) return node.build;\n        node.build = buildNode(node);\n        return node.build;\n      } // node builder\n\n\n      function buildNode(node) {\n        var nodeName = node.name;\n        var build;\n\n        switch (nodeName) {\n          case 'Group':\n          case 'Transform':\n          case 'Collision':\n            build = buildGroupingNode(node);\n            break;\n\n          case 'Background':\n            build = buildBackgroundNode(node);\n            break;\n\n          case 'Shape':\n            build = buildShapeNode(node);\n            break;\n\n          case 'Appearance':\n            build = buildAppearanceNode(node);\n            break;\n\n          case 'Material':\n            build = buildMaterialNode(node);\n            break;\n\n          case 'ImageTexture':\n            build = buildImageTextureNode(node);\n            break;\n\n          case 'PixelTexture':\n            build = buildPixelTextureNode(node);\n            break;\n\n          case 'TextureTransform':\n            build = buildTextureTransformNode(node);\n            break;\n\n          case 'IndexedFaceSet':\n            build = buildIndexedFaceSetNode(node);\n            break;\n\n          case 'IndexedLineSet':\n            build = buildIndexedLineSetNode(node);\n            break;\n\n          case 'PointSet':\n            build = buildPointSetNode(node);\n            break;\n\n          case 'Box':\n            build = buildBoxNode(node);\n            break;\n\n          case 'Cone':\n            build = buildConeNode(node);\n            break;\n\n          case 'Cylinder':\n            build = buildCylinderNode(node);\n            break;\n\n          case 'Sphere':\n            build = buildSphereNode(node);\n            break;\n\n          case 'ElevationGrid':\n            build = buildElevationGridNode(node);\n            break;\n\n          case 'Extrusion':\n            build = buildExtrusionNode(node);\n            break;\n\n          case 'Color':\n          case 'Coordinate':\n          case 'Normal':\n          case 'TextureCoordinate':\n            build = buildGeometricNode(node);\n            break;\n\n          case 'WorldInfo':\n            build = buildWorldInfoNode(node);\n            break;\n\n          case 'Anchor':\n          case 'Billboard':\n          case 'Inline':\n          case 'LOD':\n          case 'Switch':\n          case 'AudioClip':\n          case 'DirectionalLight':\n          case 'PointLight':\n          case 'Script':\n          case 'Sound':\n          case 'SpotLight':\n          case 'CylinderSensor':\n          case 'PlaneSensor':\n          case 'ProximitySensor':\n          case 'SphereSensor':\n          case 'TimeSensor':\n          case 'TouchSensor':\n          case 'VisibilitySensor':\n          case 'Text':\n          case 'FontStyle':\n          case 'MovieTexture':\n          case 'ColorInterpolator':\n          case 'CoordinateInterpolator':\n          case 'NormalInterpolator':\n          case 'OrientationInterpolator':\n          case 'PositionInterpolator':\n          case 'ScalarInterpolator':\n          case 'Fog':\n          case 'NavigationInfo':\n          case 'Viewpoint':\n            // node not supported yet\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown node:', nodeName);\n            break;\n        }\n\n        if (build !== undefined && node.DEF !== undefined && build.hasOwnProperty('name') === true) {\n          build.name = node.DEF;\n        }\n\n        return build;\n      }\n\n      function buildGroupingNode(node) {\n        var object = new Group(); //\n\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'bboxCenter':\n              // field not supported\n              break;\n\n            case 'bboxSize':\n              // field not supported\n              break;\n\n            case 'center':\n              // field not supported\n              break;\n\n            case 'children':\n              parseFieldChildren(fieldValues, object);\n              break;\n\n            case 'collide':\n              // field not supported\n              break;\n\n            case 'rotation':\n              var axis = new Vector3(fieldValues[0], fieldValues[1], fieldValues[2]);\n              var angle = fieldValues[3];\n              object.quaternion.setFromAxisAngle(axis, angle);\n              break;\n\n            case 'scale':\n              object.scale.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n\n            case 'scaleOrientation':\n              // field not supported\n              break;\n\n            case 'translation':\n              object.position.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n\n            case 'proxy':\n              // field not supported\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        return object;\n      }\n\n      function buildBackgroundNode(node) {\n        var group = new Group();\n        var groundAngle, groundColor;\n        var skyAngle, skyColor;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'groundAngle':\n              groundAngle = fieldValues;\n              break;\n\n            case 'groundColor':\n              groundColor = fieldValues;\n              break;\n\n            case 'backUrl':\n              // field not supported\n              break;\n\n            case 'bottomUrl':\n              // field not supported\n              break;\n\n            case 'frontUrl':\n              // field not supported\n              break;\n\n            case 'leftUrl':\n              // field not supported\n              break;\n\n            case 'rightUrl':\n              // field not supported\n              break;\n\n            case 'topUrl':\n              // field not supported\n              break;\n\n            case 'skyAngle':\n              skyAngle = fieldValues;\n              break;\n\n            case 'skyColor':\n              skyColor = fieldValues;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var radius = 10000; // sky\n\n        if (skyColor) {\n          var skyGeometry = new SphereGeometry(radius, 32, 16);\n          var skyMaterial = new MeshBasicMaterial({\n            fog: false,\n            side: BackSide,\n            depthWrite: false,\n            depthTest: false\n          });\n\n          if (skyColor.length > 3) {\n            paintFaces(skyGeometry, radius, skyAngle, toColorArray(skyColor), true);\n            skyMaterial.vertexColors = true;\n          } else {\n            skyMaterial.color.setRGB(skyColor[0], skyColor[1], skyColor[2]);\n          }\n\n          var sky = new Mesh(skyGeometry, skyMaterial);\n          group.add(sky);\n        } // ground\n\n\n        if (groundColor) {\n          if (groundColor.length > 0) {\n            var groundGeometry = new SphereGeometry(radius, 32, 16, 0, 2 * Math.PI, 0.5 * Math.PI, 1.5 * Math.PI);\n            var groundMaterial = new MeshBasicMaterial({\n              fog: false,\n              side: BackSide,\n              vertexColors: true,\n              depthWrite: false,\n              depthTest: false\n            });\n            paintFaces(groundGeometry, radius, groundAngle, toColorArray(groundColor), false);\n            var ground = new Mesh(groundGeometry, groundMaterial);\n            group.add(ground);\n          }\n        } // render background group first\n\n\n        group.renderOrder = -Infinity;\n        return group;\n      }\n\n      function buildShapeNode(node) {\n        var fields = node.fields; // if the appearance field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n\n        var material = new MeshBasicMaterial({\n          color: 0x000000\n        });\n        var geometry;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'appearance':\n              if (fieldValues[0] !== null) {\n                material = getNode(fieldValues[0]);\n              }\n\n              break;\n\n            case 'geometry':\n              if (fieldValues[0] !== null) {\n                geometry = getNode(fieldValues[0]);\n              }\n\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        } // build 3D object\n\n\n        var object;\n\n        if (geometry && geometry.attributes.position) {\n          var type = geometry._type;\n\n          if (type === 'points') {\n            // points\n            var pointsMaterial = new PointsMaterial({\n              color: 0xffffff\n            });\n\n            if (geometry.attributes.color !== undefined) {\n              pointsMaterial.vertexColors = true;\n            } else {\n              // if the color field is NULL and there is a material defined for the appearance affecting this PointSet, then use the emissiveColor of the material to draw the points\n              if (material.isMeshPhongMaterial) {\n                pointsMaterial.color.copy(material.emissive);\n              }\n            }\n\n            object = new Points(geometry, pointsMaterial);\n          } else if (type === 'line') {\n            // lines\n            var lineMaterial = new LineBasicMaterial({\n              color: 0xffffff\n            });\n\n            if (geometry.attributes.color !== undefined) {\n              lineMaterial.vertexColors = true;\n            } else {\n              // if the color field is NULL and there is a material defined for the appearance affecting this IndexedLineSet, then use the emissiveColor of the material to draw the lines\n              if (material.isMeshPhongMaterial) {\n                lineMaterial.color.copy(material.emissive);\n              }\n            }\n\n            object = new LineSegments(geometry, lineMaterial);\n          } else {\n            // consider meshes\n            // check \"solid\" hint (it's placed in the geometry but affects the material)\n            if (geometry._solid !== undefined) {\n              material.side = geometry._solid ? FrontSide : DoubleSide;\n            } // check for vertex colors\n\n\n            if (geometry.attributes.color !== undefined) {\n              material.vertexColors = true;\n            }\n\n            object = new Mesh(geometry, material);\n          }\n        } else {\n          object = new Object3D(); // if the geometry field is NULL or no vertices are defined the object is not drawn\n\n          object.visible = false;\n        }\n\n        return object;\n      }\n\n      function buildAppearanceNode(node) {\n        var material = new MeshPhongMaterial();\n        var transformData;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'material':\n              if (fieldValues[0] !== null) {\n                var materialData = getNode(fieldValues[0]);\n                if (materialData.diffuseColor) material.color.copy(materialData.diffuseColor);\n                if (materialData.emissiveColor) material.emissive.copy(materialData.emissiveColor);\n                if (materialData.shininess) material.shininess = materialData.shininess;\n                if (materialData.specularColor) material.specular.copy(materialData.specularColor);\n                if (materialData.transparency) material.opacity = 1 - materialData.transparency;\n                if (materialData.transparency > 0) material.transparent = true;\n              } else {\n                // if the material field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n                material = new MeshBasicMaterial({\n                  color: 0x000000\n                });\n              }\n\n              break;\n\n            case 'texture':\n              var textureNode = fieldValues[0];\n\n              if (textureNode !== null) {\n                if (textureNode.name === 'ImageTexture' || textureNode.name === 'PixelTexture') {\n                  material.map = getNode(textureNode);\n                }\n              }\n\n              break;\n\n            case 'textureTransform':\n              if (fieldValues[0] !== null) {\n                transformData = getNode(fieldValues[0]);\n              }\n\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        } // only apply texture transform data if a texture was defined\n\n\n        if (material.map) {\n          // respect VRML lighting model\n          if (material.map.__type) {\n            switch (material.map.__type) {\n              case TEXTURE_TYPE.INTENSITY_ALPHA:\n                material.opacity = 1; // ignore transparency\n\n                break;\n\n              case TEXTURE_TYPE.RGB:\n                material.color.set(0xffffff); // ignore material color\n\n                break;\n\n              case TEXTURE_TYPE.RGBA:\n                material.color.set(0xffffff); // ignore material color\n\n                material.opacity = 1; // ignore transparency\n\n                break;\n            }\n\n            delete material.map.__type;\n          } // apply texture transform\n\n\n          if (transformData) {\n            material.map.center.copy(transformData.center);\n            material.map.rotation = transformData.rotation;\n            material.map.repeat.copy(transformData.scale);\n            material.map.offset.copy(transformData.translation);\n          }\n        }\n\n        return material;\n      }\n\n      function buildMaterialNode(node) {\n        var materialData = {};\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'ambientIntensity':\n              // field not supported\n              break;\n\n            case 'diffuseColor':\n              materialData.diffuseColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n\n            case 'emissiveColor':\n              materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n\n            case 'shininess':\n              materialData.shininess = fieldValues[0];\n              break;\n\n            case 'specularColor':\n              materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n\n            case 'transparency':\n              materialData.transparency = fieldValues[0];\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        return materialData;\n      }\n\n      function parseHexColor(hex, textureType, color) {\n        switch (textureType) {\n          case TEXTURE_TYPE.INTENSITY:\n            // Intensity texture: A one-component image specifies one-byte hexadecimal or integer values representing the intensity of the image\n            var value = parseInt(hex);\n            color.r = value;\n            color.g = value;\n            color.b = value;\n            break;\n\n          case TEXTURE_TYPE.INTENSITY_ALPHA:\n            // Intensity+Alpha texture: A two-component image specifies the intensity in the first (high) byte and the alpha opacity in the second (low) byte.\n            var value = parseInt('0x' + hex.substring(2, 4));\n            color.r = value;\n            color.g = value;\n            color.b = value;\n            color.a = parseInt('0x' + hex.substring(4, 6));\n            break;\n\n          case TEXTURE_TYPE.RGB:\n            // RGB texture: Pixels in a three-component image specify the red component in the first (high) byte, followed by the green and blue components\n            color.r = parseInt('0x' + hex.substring(2, 4));\n            color.g = parseInt('0x' + hex.substring(4, 6));\n            color.b = parseInt('0x' + hex.substring(6, 8));\n            break;\n\n          case TEXTURE_TYPE.RGBA:\n            // RGBA texture: Four-component images specify the alpha opacity byte after red/green/blue\n            color.r = parseInt('0x' + hex.substring(2, 4));\n            color.g = parseInt('0x' + hex.substring(4, 6));\n            color.b = parseInt('0x' + hex.substring(6, 8));\n            color.a = parseInt('0x' + hex.substring(8, 10));\n            break;\n        }\n      }\n\n      function getTextureType(num_components) {\n        var type;\n\n        switch (num_components) {\n          case 1:\n            type = TEXTURE_TYPE.INTENSITY;\n            break;\n\n          case 2:\n            type = TEXTURE_TYPE.INTENSITY_ALPHA;\n            break;\n\n          case 3:\n            type = TEXTURE_TYPE.RGB;\n            break;\n\n          case 4:\n            type = TEXTURE_TYPE.RGBA;\n            break;\n        }\n\n        return type;\n      }\n\n      function buildPixelTextureNode(node) {\n        var texture;\n        var wrapS = RepeatWrapping;\n        var wrapT = RepeatWrapping;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'image':\n              var width = fieldValues[0];\n              var height = fieldValues[1];\n              var num_components = fieldValues[2];\n              var useAlpha = num_components === 2 || num_components === 4;\n              var textureType = getTextureType(num_components);\n              var size = (useAlpha === true ? 4 : 3) * (width * height);\n              var data = new Uint8Array(size);\n              var color = {\n                r: 0,\n                g: 0,\n                b: 0,\n                a: 0\n              };\n\n              for (var j = 3, k = 0, jl = fieldValues.length; j < jl; j++, k++) {\n                parseHexColor(fieldValues[j], textureType, color);\n\n                if (useAlpha === true) {\n                  var stride = k * 4;\n                  data[stride + 0] = color.r;\n                  data[stride + 1] = color.g;\n                  data[stride + 2] = color.b;\n                  data[stride + 3] = color.a;\n                } else {\n                  var stride = k * 3;\n                  data[stride + 0] = color.r;\n                  data[stride + 1] = color.g;\n                  data[stride + 2] = color.b;\n                }\n              }\n\n              texture = new DataTexture(data, width, height, useAlpha === true ? RGBAFormat : RGBFormat);\n              texture.__type = textureType; // needed for material modifications\n\n              break;\n\n            case 'repeatS':\n              if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n              break;\n\n            case 'repeatT':\n              if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        if (texture) {\n          texture.wrapS = wrapS;\n          texture.wrapT = wrapT;\n        }\n\n        return texture;\n      }\n\n      function buildImageTextureNode(node) {\n        var texture;\n        var wrapS = RepeatWrapping;\n        var wrapT = RepeatWrapping;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'url':\n              var url = fieldValues[0];\n              if (url) texture = textureLoader.load(url);\n              break;\n\n            case 'repeatS':\n              if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n              break;\n\n            case 'repeatT':\n              if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        if (texture) {\n          texture.wrapS = wrapS;\n          texture.wrapT = wrapT;\n        }\n\n        return texture;\n      }\n\n      function buildTextureTransformNode(node) {\n        var transformData = {\n          center: new Vector2(),\n          rotation: new Vector2(),\n          scale: new Vector2(),\n          translation: new Vector2()\n        };\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'center':\n              transformData.center.set(fieldValues[0], fieldValues[1]);\n              break;\n\n            case 'rotation':\n              transformData.rotation = fieldValues[0];\n              break;\n\n            case 'scale':\n              transformData.scale.set(fieldValues[0], fieldValues[1]);\n              break;\n\n            case 'translation':\n              transformData.translation.set(fieldValues[0], fieldValues[1]);\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        return transformData;\n      }\n\n      function buildGeometricNode(node) {\n        return node.fields[0].values;\n      }\n\n      function buildWorldInfoNode(node) {\n        var worldInfo = {};\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'title':\n              worldInfo.title = fieldValues[0];\n              break;\n\n            case 'info':\n              worldInfo.info = fieldValues;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        return worldInfo;\n      }\n\n      function buildIndexedFaceSetNode(node) {\n        var color, coord, normal, texCoord;\n        var ccw = true,\n            solid = true,\n            creaseAngle = 0;\n        var colorIndex, coordIndex, normalIndex, texCoordIndex;\n        var colorPerVertex = true,\n            normalPerVertex = true;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'color':\n              var colorNode = fieldValues[0];\n\n              if (colorNode !== null) {\n                color = getNode(colorNode);\n              }\n\n              break;\n\n            case 'coord':\n              var coordNode = fieldValues[0];\n\n              if (coordNode !== null) {\n                coord = getNode(coordNode);\n              }\n\n              break;\n\n            case 'normal':\n              var normalNode = fieldValues[0];\n\n              if (normalNode !== null) {\n                normal = getNode(normalNode);\n              }\n\n              break;\n\n            case 'texCoord':\n              var texCoordNode = fieldValues[0];\n\n              if (texCoordNode !== null) {\n                texCoord = getNode(texCoordNode);\n              }\n\n              break;\n\n            case 'ccw':\n              ccw = fieldValues[0];\n              break;\n\n            case 'colorIndex':\n              colorIndex = fieldValues;\n              break;\n\n            case 'colorPerVertex':\n              colorPerVertex = fieldValues[0];\n              break;\n\n            case 'convex':\n              // field not supported\n              break;\n\n            case 'coordIndex':\n              coordIndex = fieldValues;\n              break;\n\n            case 'creaseAngle':\n              creaseAngle = fieldValues[0];\n              break;\n\n            case 'normalIndex':\n              normalIndex = fieldValues;\n              break;\n\n            case 'normalPerVertex':\n              normalPerVertex = fieldValues[0];\n              break;\n\n            case 'solid':\n              solid = fieldValues[0];\n              break;\n\n            case 'texCoordIndex':\n              texCoordIndex = fieldValues;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        if (coordIndex === undefined) {\n          console.warn('THREE.VRMLLoader: Missing coordIndex.');\n          return new BufferGeometry(); // handle VRML files with incomplete geometry definition\n        }\n\n        var triangulatedCoordIndex = triangulateFaceIndex(coordIndex, ccw);\n        var positionAttribute;\n        var colorAttribute;\n        var normalAttribute;\n        var uvAttribute;\n\n        if (color) {\n          if (colorPerVertex === true) {\n            if (colorIndex && colorIndex.length > 0) {\n              // if the colorIndex field is not empty, then it is used to choose colors for each vertex of the IndexedFaceSet.\n              var triangulatedColorIndex = triangulateFaceIndex(colorIndex, ccw);\n              colorAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedColorIndex, color, 3);\n            } else {\n              // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n              colorAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(color, 3));\n            }\n          } else {\n            if (colorIndex && colorIndex.length > 0) {\n              // if the colorIndex field is not empty, then they are used to choose one color for each face of the IndexedFaceSet\n              var flattenFaceColors = flattenData(color, colorIndex);\n              var triangulatedFaceColors = triangulateFaceData(flattenFaceColors, coordIndex);\n              colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n            } else {\n              // if the colorIndex field is empty, then the color are applied to each face of the IndexedFaceSet in order\n              var triangulatedFaceColors = triangulateFaceData(color, coordIndex);\n              colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n            }\n          }\n        }\n\n        if (normal) {\n          if (normalPerVertex === true) {\n            // consider vertex normals\n            if (normalIndex && normalIndex.length > 0) {\n              // if the normalIndex field is not empty, then it is used to choose normals for each vertex of the IndexedFaceSet.\n              var triangulatedNormalIndex = triangulateFaceIndex(normalIndex, ccw);\n              normalAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedNormalIndex, normal, 3);\n            } else {\n              // if the normalIndex field is empty, then the coordIndex field is used to choose normals from the Normal node\n              normalAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(normal, 3));\n            }\n          } else {\n            // consider face normals\n            if (normalIndex && normalIndex.length > 0) {\n              // if the normalIndex field is not empty, then they are used to choose one normal for each face of the IndexedFaceSet\n              var flattenFaceNormals = flattenData(normal, normalIndex);\n              var triangulatedFaceNormals = triangulateFaceData(flattenFaceNormals, coordIndex);\n              normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n            } else {\n              // if the normalIndex field is empty, then the normals are applied to each face of the IndexedFaceSet in order\n              var triangulatedFaceNormals = triangulateFaceData(normal, coordIndex);\n              normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n            }\n          }\n        } else {\n          // if the normal field is NULL, then the loader should automatically generate normals, using creaseAngle to determine if and how normals are smoothed across shared vertices\n          normalAttribute = computeNormalAttribute(triangulatedCoordIndex, coord, creaseAngle);\n        }\n\n        if (texCoord) {\n          // texture coordinates are always defined on vertex level\n          if (texCoordIndex && texCoordIndex.length > 0) {\n            // if the texCoordIndex field is not empty, then it is used to choose texture coordinates for each vertex of the IndexedFaceSet.\n            var triangulatedTexCoordIndex = triangulateFaceIndex(texCoordIndex, ccw);\n            uvAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedTexCoordIndex, texCoord, 2);\n          } else {\n            // if the texCoordIndex field is empty, then the coordIndex array is used to choose texture coordinates from the TextureCoordinate node\n            uvAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(texCoord, 2));\n          }\n        }\n\n        var geometry = new BufferGeometry();\n        positionAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(coord, 3));\n        geometry.setAttribute('position', positionAttribute);\n        geometry.setAttribute('normal', normalAttribute); // optional attributes\n\n        if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n        if (uvAttribute) geometry.setAttribute('uv', uvAttribute); // \"solid\" influences the material so let's store it for later use\n\n        geometry._solid = solid;\n        geometry._type = 'mesh';\n        return geometry;\n      }\n\n      function buildIndexedLineSetNode(node) {\n        var color, coord;\n        var colorIndex, coordIndex;\n        var colorPerVertex = true;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'color':\n              var colorNode = fieldValues[0];\n\n              if (colorNode !== null) {\n                color = getNode(colorNode);\n              }\n\n              break;\n\n            case 'coord':\n              var coordNode = fieldValues[0];\n\n              if (coordNode !== null) {\n                coord = getNode(coordNode);\n              }\n\n              break;\n\n            case 'colorIndex':\n              colorIndex = fieldValues;\n              break;\n\n            case 'colorPerVertex':\n              colorPerVertex = fieldValues[0];\n              break;\n\n            case 'coordIndex':\n              coordIndex = fieldValues;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        } // build lines\n\n\n        var colorAttribute;\n        var expandedLineIndex = expandLineIndex(coordIndex); // create an index for three.js's linesegment primitive\n\n        if (color) {\n          if (colorPerVertex === true) {\n            if (colorIndex.length > 0) {\n              // if the colorIndex field is not empty, then one color is used for each polyline of the IndexedLineSet.\n              var expandedColorIndex = expandLineIndex(colorIndex); // compute colors for each line segment (rendering primitve)\n\n              colorAttribute = computeAttributeFromIndexedData(expandedLineIndex, expandedColorIndex, color, 3); // compute data on vertex level\n            } else {\n              // if the colorIndex field is empty, then the colors are applied to each polyline of the IndexedLineSet in order.\n              colorAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(color, 3));\n            }\n          } else {\n            if (colorIndex.length > 0) {\n              // if the colorIndex field is not empty, then colors are applied to each vertex of the IndexedLineSet\n              var flattenLineColors = flattenData(color, colorIndex); // compute colors for each VRML primitve\n\n              var expandedLineColors = expandLineData(flattenLineColors, coordIndex); // compute colors for each line segment (rendering primitve)\n\n              colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors); // compute data on vertex level\n            } else {\n              // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n              var expandedLineColors = expandLineData(color, coordIndex); // compute colors for each line segment (rendering primitve)\n\n              colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors); // compute data on vertex level\n            }\n          }\n        } //\n\n\n        var geometry = new BufferGeometry();\n        var positionAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(coord, 3));\n        geometry.setAttribute('position', positionAttribute);\n        if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n        geometry._type = 'line';\n        return geometry;\n      }\n\n      function buildPointSetNode(node) {\n        var geometry;\n        var color, coord;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'color':\n              var colorNode = fieldValues[0];\n\n              if (colorNode !== null) {\n                color = getNode(colorNode);\n              }\n\n              break;\n\n            case 'coord':\n              var coordNode = fieldValues[0];\n\n              if (coordNode !== null) {\n                coord = getNode(coordNode);\n              }\n\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var geometry = new BufferGeometry();\n        geometry.setAttribute('position', new Float32BufferAttribute(coord, 3));\n        if (color) geometry.setAttribute('color', new Float32BufferAttribute(color, 3));\n        geometry._type = 'points';\n        return geometry;\n      }\n\n      function buildBoxNode(node) {\n        var size = new Vector3(2, 2, 2);\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'size':\n              size.x = fieldValues[0];\n              size.y = fieldValues[1];\n              size.z = fieldValues[2];\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var geometry = new BoxGeometry(size.x, size.y, size.z);\n        return geometry;\n      }\n\n      function buildConeNode(node) {\n        var radius = 1,\n            height = 2,\n            openEnded = false;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'bottom':\n              openEnded = !fieldValues[0];\n              break;\n\n            case 'bottomRadius':\n              radius = fieldValues[0];\n              break;\n\n            case 'height':\n              height = fieldValues[0];\n              break;\n\n            case 'side':\n              // field not supported\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var geometry = new ConeGeometry(radius, height, 16, 1, openEnded);\n        return geometry;\n      }\n\n      function buildCylinderNode(node) {\n        var radius = 1,\n            height = 2;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'bottom':\n              // field not supported\n              break;\n\n            case 'radius':\n              radius = fieldValues[0];\n              break;\n\n            case 'height':\n              height = fieldValues[0];\n              break;\n\n            case 'side':\n              // field not supported\n              break;\n\n            case 'top':\n              // field not supported\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var geometry = new CylinderGeometry(radius, radius, height, 16, 1);\n        return geometry;\n      }\n\n      function buildSphereNode(node) {\n        var radius = 1;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'radius':\n              radius = fieldValues[0];\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var geometry = new SphereGeometry(radius, 16, 16);\n        return geometry;\n      }\n\n      function buildElevationGridNode(node) {\n        var color;\n        var normal;\n        var texCoord;\n        var height;\n        var colorPerVertex = true;\n        var normalPerVertex = true;\n        var solid = true;\n        var ccw = true;\n        var creaseAngle = 0;\n        var xDimension = 2;\n        var zDimension = 2;\n        var xSpacing = 1;\n        var zSpacing = 1;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'color':\n              var colorNode = fieldValues[0];\n\n              if (colorNode !== null) {\n                color = getNode(colorNode);\n              }\n\n              break;\n\n            case 'normal':\n              var normalNode = fieldValues[0];\n\n              if (normalNode !== null) {\n                normal = getNode(normalNode);\n              }\n\n              break;\n\n            case 'texCoord':\n              var texCoordNode = fieldValues[0];\n\n              if (texCoordNode !== null) {\n                texCoord = getNode(texCoordNode);\n              }\n\n              break;\n\n            case 'height':\n              height = fieldValues;\n              break;\n\n            case 'ccw':\n              ccw = fieldValues[0];\n              break;\n\n            case 'colorPerVertex':\n              colorPerVertex = fieldValues[0];\n              break;\n\n            case 'creaseAngle':\n              creaseAngle = fieldValues[0];\n              break;\n\n            case 'normalPerVertex':\n              normalPerVertex = fieldValues[0];\n              break;\n\n            case 'solid':\n              solid = fieldValues[0];\n              break;\n\n            case 'xDimension':\n              xDimension = fieldValues[0];\n              break;\n\n            case 'xSpacing':\n              xSpacing = fieldValues[0];\n              break;\n\n            case 'zDimension':\n              zDimension = fieldValues[0];\n              break;\n\n            case 'zSpacing':\n              zSpacing = fieldValues[0];\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        } // vertex data\n\n\n        var vertices = [];\n        var normals = [];\n        var colors = [];\n        var uvs = [];\n\n        for (var _i9 = 0; _i9 < zDimension; _i9++) {\n          for (var j = 0; j < xDimension; j++) {\n            // compute a row major index\n            var index = _i9 * xDimension + j; // vertices\n\n            var x = xSpacing * _i9;\n            var y = height[index];\n            var z = zSpacing * j;\n            vertices.push(x, y, z); // colors\n\n            if (color && colorPerVertex === true) {\n              var r = color[index * 3 + 0];\n              var g = color[index * 3 + 1];\n              var b = color[index * 3 + 2];\n              colors.push(r, g, b);\n            } // normals\n\n\n            if (normal && normalPerVertex === true) {\n              var xn = normal[index * 3 + 0];\n              var yn = normal[index * 3 + 1];\n              var zn = normal[index * 3 + 2];\n              normals.push(xn, yn, zn);\n            } // uvs\n\n\n            if (texCoord) {\n              var s = texCoord[index * 2 + 0];\n              var t = texCoord[index * 2 + 1];\n              uvs.push(s, t);\n            } else {\n              uvs.push(_i9 / (xDimension - 1), j / (zDimension - 1));\n            }\n          }\n        } // indices\n\n\n        var indices = [];\n\n        for (var _i10 = 0; _i10 < xDimension - 1; _i10++) {\n          for (var _j = 0; _j < zDimension - 1; _j++) {\n            // from https://tecfa.unige.ch/guides/vrml/vrml97/spec/part1/nodesRef.html#ElevationGrid\n            var a = _i10 + _j * xDimension;\n            var b = _i10 + (_j + 1) * xDimension;\n            var c = _i10 + 1 + (_j + 1) * xDimension;\n            var d = _i10 + 1 + _j * xDimension; // faces\n\n            if (ccw === true) {\n              indices.push(a, c, b);\n              indices.push(c, a, d);\n            } else {\n              indices.push(a, b, c);\n              indices.push(c, d, a);\n            }\n          }\n        } //\n\n\n        var positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n        var uvAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(uvs, 2));\n        var colorAttribute;\n        var normalAttribute; // color attribute\n\n        if (color) {\n          if (colorPerVertex === false) {\n            for (var _i11 = 0; _i11 < xDimension - 1; _i11++) {\n              for (var _j2 = 0; _j2 < zDimension - 1; _j2++) {\n                var index = _i11 + _j2 * (xDimension - 1);\n                var r = color[index * 3 + 0];\n                var g = color[index * 3 + 1];\n                var b = color[index * 3 + 2]; // one color per quad\n\n                colors.push(r, g, b);\n                colors.push(r, g, b);\n                colors.push(r, g, b);\n                colors.push(r, g, b);\n                colors.push(r, g, b);\n                colors.push(r, g, b);\n              }\n            }\n\n            colorAttribute = new Float32BufferAttribute(colors, 3);\n          } else {\n            colorAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(colors, 3));\n          }\n        } // normal attribute\n\n\n        if (normal) {\n          if (normalPerVertex === false) {\n            for (var _i12 = 0; _i12 < xDimension - 1; _i12++) {\n              for (var _j3 = 0; _j3 < zDimension - 1; _j3++) {\n                var index = _i12 + _j3 * (xDimension - 1);\n                var xn = normal[index * 3 + 0];\n                var yn = normal[index * 3 + 1];\n                var zn = normal[index * 3 + 2]; // one normal per quad\n\n                normals.push(xn, yn, zn);\n                normals.push(xn, yn, zn);\n                normals.push(xn, yn, zn);\n                normals.push(xn, yn, zn);\n                normals.push(xn, yn, zn);\n                normals.push(xn, yn, zn);\n              }\n            }\n\n            normalAttribute = new Float32BufferAttribute(normals, 3);\n          } else {\n            normalAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(normals, 3));\n          }\n        } else {\n          normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n        } // build geometry\n\n\n        var geometry = new BufferGeometry();\n        geometry.setAttribute('position', positionAttribute);\n        geometry.setAttribute('normal', normalAttribute);\n        geometry.setAttribute('uv', uvAttribute);\n        if (colorAttribute) geometry.setAttribute('color', colorAttribute); // \"solid\" influences the material so let's store it for later use\n\n        geometry._solid = solid;\n        geometry._type = 'mesh';\n        return geometry;\n      }\n\n      function buildExtrusionNode(node) {\n        var crossSection = [1, 1, 1, -1, -1, -1, -1, 1, 1, 1];\n        var spine = [0, 0, 0, 0, 1, 0];\n        var scale;\n        var orientation;\n        var beginCap = true;\n        var ccw = true;\n        var creaseAngle = 0;\n        var endCap = true;\n        var solid = true;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'beginCap':\n              beginCap = fieldValues[0];\n              break;\n\n            case 'ccw':\n              ccw = fieldValues[0];\n              break;\n\n            case 'convex':\n              // field not supported\n              break;\n\n            case 'creaseAngle':\n              creaseAngle = fieldValues[0];\n              break;\n\n            case 'crossSection':\n              crossSection = fieldValues;\n              break;\n\n            case 'endCap':\n              endCap = fieldValues[0];\n              break;\n\n            case 'orientation':\n              orientation = fieldValues;\n              break;\n\n            case 'scale':\n              scale = fieldValues;\n              break;\n\n            case 'solid':\n              solid = fieldValues[0];\n              break;\n\n            case 'spine':\n              spine = fieldValues; // only extrusion along the Y-axis are supported so far\n\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var crossSectionClosed = crossSection[0] === crossSection[crossSection.length - 2] && crossSection[1] === crossSection[crossSection.length - 1]; // vertices\n\n        var vertices = [];\n        var spineVector = new Vector3();\n        var scaling = new Vector3();\n        var axis = new Vector3();\n        var vertex = new Vector3();\n        var quaternion = new Quaternion();\n\n        for (var _i13 = 0, j = 0, o = 0, il = spine.length; _i13 < il; _i13 += 3, j += 2, o += 4) {\n          spineVector.fromArray(spine, _i13);\n          scaling.x = scale ? scale[j + 0] : 1;\n          scaling.y = 1;\n          scaling.z = scale ? scale[j + 1] : 1;\n          axis.x = orientation ? orientation[o + 0] : 0;\n          axis.y = orientation ? orientation[o + 1] : 0;\n          axis.z = orientation ? orientation[o + 2] : 1;\n          var angle = orientation ? orientation[o + 3] : 0;\n\n          for (var k = 0, kl = crossSection.length; k < kl; k += 2) {\n            vertex.x = crossSection[k + 0];\n            vertex.y = 0;\n            vertex.z = crossSection[k + 1]; // scale\n\n            vertex.multiply(scaling); // rotate\n\n            quaternion.setFromAxisAngle(axis, angle);\n            vertex.applyQuaternion(quaternion); // translate\n\n            vertex.add(spineVector);\n            vertices.push(vertex.x, vertex.y, vertex.z);\n          }\n        } // indices\n\n\n        var indices = [];\n        var spineCount = spine.length / 3;\n        var crossSectionCount = crossSection.length / 2;\n\n        for (var _i14 = 0; _i14 < spineCount - 1; _i14++) {\n          for (var _j4 = 0; _j4 < crossSectionCount - 1; _j4++) {\n            var a = _j4 + _i14 * crossSectionCount;\n            var b = _j4 + 1 + _i14 * crossSectionCount;\n            var c = _j4 + (_i14 + 1) * crossSectionCount;\n            var d = _j4 + 1 + (_i14 + 1) * crossSectionCount;\n\n            if (_j4 === crossSectionCount - 2 && crossSectionClosed === true) {\n              b = _i14 * crossSectionCount;\n              d = (_i14 + 1) * crossSectionCount;\n            }\n\n            if (ccw === true) {\n              indices.push(a, b, c);\n              indices.push(c, b, d);\n            } else {\n              indices.push(a, c, b);\n              indices.push(c, d, b);\n            }\n          }\n        } // triangulate cap\n\n\n        if (beginCap === true || endCap === true) {\n          var contour = [];\n\n          for (var _i15 = 0, _l9 = crossSection.length; _i15 < _l9; _i15 += 2) {\n            contour.push(new Vector2(crossSection[_i15], crossSection[_i15 + 1]));\n          }\n\n          var faces = ShapeUtils.triangulateShape(contour, []);\n          var capIndices = [];\n\n          for (var _i16 = 0, _l10 = faces.length; _i16 < _l10; _i16++) {\n            var face = faces[_i16];\n            capIndices.push(face[0], face[1], face[2]);\n          } // begin cap\n\n\n          if (beginCap === true) {\n            for (var _i17 = 0, _l11 = capIndices.length; _i17 < _l11; _i17 += 3) {\n              if (ccw === true) {\n                indices.push(capIndices[_i17 + 0], capIndices[_i17 + 1], capIndices[_i17 + 2]);\n              } else {\n                indices.push(capIndices[_i17 + 0], capIndices[_i17 + 2], capIndices[_i17 + 1]);\n              }\n            }\n          } // end cap\n\n\n          if (endCap === true) {\n            var indexOffset = crossSectionCount * (spineCount - 1); // references to the first vertex of the last cross section\n\n            for (var _i18 = 0, _l12 = capIndices.length; _i18 < _l12; _i18 += 3) {\n              if (ccw === true) {\n                indices.push(indexOffset + capIndices[_i18 + 0], indexOffset + capIndices[_i18 + 2], indexOffset + capIndices[_i18 + 1]);\n              } else {\n                indices.push(indexOffset + capIndices[_i18 + 0], indexOffset + capIndices[_i18 + 1], indexOffset + capIndices[_i18 + 2]);\n              }\n            }\n          }\n        }\n\n        var positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n        var normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n        var geometry = new BufferGeometry();\n        geometry.setAttribute('position', positionAttribute);\n        geometry.setAttribute('normal', normalAttribute); // no uvs yet\n        // \"solid\" influences the material so let's store it for later use\n\n        geometry._solid = solid;\n        geometry._type = 'mesh';\n        return geometry;\n      } // helper functions\n\n\n      function resolveUSE(identifier) {\n        var node = nodeMap[identifier];\n        var build = getNode(node); // because the same 3D objects can have different transformations, it's necessary to clone them.\n        // materials can be influenced by the geometry (e.g. vertex normals). cloning is necessary to avoid\n        // any side effects\n\n        return build.isObject3D || build.isMaterial ? build.clone() : build;\n      }\n\n      function parseFieldChildren(children, owner) {\n        for (var i = 0, l = children.length; i < l; i++) {\n          var object = getNode(children[i]);\n          if (object instanceof Object3D) owner.add(object);\n        }\n      }\n\n      function triangulateFaceIndex(index, ccw) {\n        var indices = []; // since face defintions can have more than three vertices, it's necessary to\n        // perform a simple triangulation\n\n        var start = 0;\n\n        for (var i = 0, l = index.length; i < l; i++) {\n          var i1 = index[start];\n          var i2 = index[i + (ccw ? 1 : 2)];\n          var i3 = index[i + (ccw ? 2 : 1)];\n          indices.push(i1, i2, i3); // an index of -1 indicates that the current face has ended and the next one begins\n\n          if (index[i + 3] === -1 || i + 3 >= l) {\n            i += 3;\n            start = i + 1;\n          }\n        }\n\n        return indices;\n      }\n\n      function triangulateFaceData(data, index) {\n        var triangulatedData = [];\n        var start = 0;\n\n        for (var i = 0, l = index.length; i < l; i++) {\n          var stride = start * 3;\n          var x = data[stride];\n          var y = data[stride + 1];\n          var z = data[stride + 2];\n          triangulatedData.push(x, y, z); // an index of -1 indicates that the current face has ended and the next one begins\n\n          if (index[i + 3] === -1 || i + 3 >= l) {\n            i += 3;\n            start++;\n          }\n        }\n\n        return triangulatedData;\n      }\n\n      function flattenData(data, index) {\n        var flattenData = [];\n\n        for (var i = 0, l = index.length; i < l; i++) {\n          var i1 = index[i];\n          var stride = i1 * 3;\n          var x = data[stride];\n          var y = data[stride + 1];\n          var z = data[stride + 2];\n          flattenData.push(x, y, z);\n        }\n\n        return flattenData;\n      }\n\n      function expandLineIndex(index) {\n        var indices = [];\n\n        for (var i = 0, l = index.length; i < l; i++) {\n          var i1 = index[i];\n          var i2 = index[i + 1];\n          indices.push(i1, i2); // an index of -1 indicates that the current line has ended and the next one begins\n\n          if (index[i + 2] === -1 || i + 2 >= l) {\n            i += 2;\n          }\n        }\n\n        return indices;\n      }\n\n      function expandLineData(data, index) {\n        var triangulatedData = [];\n        var start = 0;\n\n        for (var i = 0, l = index.length; i < l; i++) {\n          var stride = start * 3;\n          var x = data[stride];\n          var y = data[stride + 1];\n          var z = data[stride + 2];\n          triangulatedData.push(x, y, z); // an index of -1 indicates that the current line has ended and the next one begins\n\n          if (index[i + 2] === -1 || i + 2 >= l) {\n            i += 2;\n            start++;\n          }\n        }\n\n        return triangulatedData;\n      }\n\n      var vA = new Vector3();\n      var vB = new Vector3();\n      var vC = new Vector3();\n      var uvA = new Vector2();\n      var uvB = new Vector2();\n      var uvC = new Vector2();\n\n      function computeAttributeFromIndexedData(coordIndex, index, data, itemSize) {\n        var array = []; // we use the coordIndex.length as delimiter since normalIndex must contain at least as many indices\n\n        for (var i = 0, l = coordIndex.length; i < l; i += 3) {\n          var a = index[i];\n          var b = index[i + 1];\n          var c = index[i + 2];\n\n          if (itemSize === 2) {\n            uvA.fromArray(data, a * itemSize);\n            uvB.fromArray(data, b * itemSize);\n            uvC.fromArray(data, c * itemSize);\n            array.push(uvA.x, uvA.y);\n            array.push(uvB.x, uvB.y);\n            array.push(uvC.x, uvC.y);\n          } else {\n            vA.fromArray(data, a * itemSize);\n            vB.fromArray(data, b * itemSize);\n            vC.fromArray(data, c * itemSize);\n            array.push(vA.x, vA.y, vA.z);\n            array.push(vB.x, vB.y, vB.z);\n            array.push(vC.x, vC.y, vC.z);\n          }\n        }\n\n        return new Float32BufferAttribute(array, itemSize);\n      }\n\n      function computeAttributeFromFaceData(index, faceData) {\n        var array = [];\n\n        for (var i = 0, j = 0, l = index.length; i < l; i += 3, j++) {\n          vA.fromArray(faceData, j * 3);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vA.x, vA.y, vA.z);\n        }\n\n        return new Float32BufferAttribute(array, 3);\n      }\n\n      function computeAttributeFromLineData(index, lineData) {\n        var array = [];\n\n        for (var i = 0, j = 0, l = index.length; i < l; i += 2, j++) {\n          vA.fromArray(lineData, j * 3);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vA.x, vA.y, vA.z);\n        }\n\n        return new Float32BufferAttribute(array, 3);\n      }\n\n      function toNonIndexedAttribute(indices, attribute) {\n        var array = attribute.array;\n        var itemSize = attribute.itemSize;\n        var array2 = new array.constructor(indices.length * itemSize);\n        var index = 0,\n            index2 = 0;\n\n        for (var i = 0, l = indices.length; i < l; i++) {\n          index = indices[i] * itemSize;\n\n          for (var j = 0; j < itemSize; j++) {\n            array2[index2++] = array[index++];\n          }\n        }\n\n        return new Float32BufferAttribute(array2, itemSize);\n      }\n\n      var ab = new Vector3();\n      var cb = new Vector3();\n\n      function computeNormalAttribute(index, coord, creaseAngle) {\n        var faces = [];\n        var vertexNormals = {}; // prepare face and raw vertex normals\n\n        for (var i = 0, l = index.length; i < l; i += 3) {\n          var a = index[i];\n          var b = index[i + 1];\n          var c = index[i + 2];\n          var face = new Face(a, b, c);\n          vA.fromArray(coord, a * 3);\n          vB.fromArray(coord, b * 3);\n          vC.fromArray(coord, c * 3);\n          cb.subVectors(vC, vB);\n          ab.subVectors(vA, vB);\n          cb.cross(ab);\n          cb.normalize();\n          face.normal.copy(cb);\n          if (vertexNormals[a] === undefined) vertexNormals[a] = [];\n          if (vertexNormals[b] === undefined) vertexNormals[b] = [];\n          if (vertexNormals[c] === undefined) vertexNormals[c] = [];\n          vertexNormals[a].push(face.normal);\n          vertexNormals[b].push(face.normal);\n          vertexNormals[c].push(face.normal);\n          faces.push(face);\n        } // compute vertex normals and build final geometry\n\n\n        var normals = [];\n\n        for (var _i19 = 0, _l13 = faces.length; _i19 < _l13; _i19++) {\n          var face = faces[_i19];\n          var nA = weightedNormal(vertexNormals[face.a], face.normal, creaseAngle);\n          var nB = weightedNormal(vertexNormals[face.b], face.normal, creaseAngle);\n          var nC = weightedNormal(vertexNormals[face.c], face.normal, creaseAngle);\n          vA.fromArray(coord, face.a * 3);\n          vB.fromArray(coord, face.b * 3);\n          vC.fromArray(coord, face.c * 3);\n          normals.push(nA.x, nA.y, nA.z);\n          normals.push(nB.x, nB.y, nB.z);\n          normals.push(nC.x, nC.y, nC.z);\n        }\n\n        return new Float32BufferAttribute(normals, 3);\n      }\n\n      function weightedNormal(normals, vector, creaseAngle) {\n        var normal = new Vector3();\n\n        if (creaseAngle === 0) {\n          normal.copy(vector);\n        } else {\n          for (var i = 0, l = normals.length; i < l; i++) {\n            if (normals[i].angleTo(vector) < creaseAngle) {\n              normal.add(normals[i]);\n            }\n          }\n        }\n\n        return normal.normalize();\n      }\n\n      function toColorArray(colors) {\n        var array = [];\n\n        for (var i = 0, l = colors.length; i < l; i += 3) {\n          array.push(new Color(colors[i], colors[i + 1], colors[i + 2]));\n        }\n\n        return array;\n      }\n      /**\n       * Vertically paints the faces interpolating between the\n       * specified colors at the specified angels. This is used for the Background\n       * node, but could be applied to other nodes with multiple faces as well.\n       *\n       * When used with the Background node, default is directionIsDown is true if\n       * interpolating the skyColor down from the Zenith. When interpolationg up from\n       * the Nadir i.e. interpolating the groundColor, the directionIsDown is false.\n       *\n       * The first angle is never specified, it is the Zenith (0 rad). Angles are specified\n       * in radians. The geometry is thought a sphere, but could be anything. The color interpolation\n       * is linear along the Y axis in any case.\n       *\n       * You must specify one more color than you have angles at the beginning of the colors array.\n       * This is the color of the Zenith (the top of the shape).\n       *\n       * @param {BufferGeometry} geometry\n       * @param {number} radius\n       * @param {array} angles\n       * @param {array} colors\n       * @param {boolean} topDown - Whether to work top down or bottom up.\n       */\n\n\n      function paintFaces(geometry, radius, angles, colors, topDown) {\n        // compute threshold values\n        var thresholds = [];\n        var startAngle = topDown === true ? 0 : Math.PI;\n\n        for (var i = 0, l = colors.length; i < l; i++) {\n          var angle = i === 0 ? 0 : angles[i - 1];\n          angle = topDown === true ? angle : startAngle - angle;\n          var point = new Vector3();\n          point.setFromSphericalCoords(radius, angle, 0);\n          thresholds.push(point);\n        } // generate vertex colors\n\n\n        var indices = geometry.index;\n        var positionAttribute = geometry.attributes.position;\n        var colorAttribute = new BufferAttribute(new Float32Array(geometry.attributes.position.count * 3), 3);\n        var position = new Vector3();\n        var color = new Color();\n\n        for (var _i20 = 0; _i20 < indices.count; _i20++) {\n          var index = indices.getX(_i20);\n          position.fromBufferAttribute(positionAttribute, index);\n          var thresholdIndexA, thresholdIndexB;\n          var t = 1;\n\n          for (var j = 1; j < thresholds.length; j++) {\n            thresholdIndexA = j - 1;\n            thresholdIndexB = j;\n            var thresholdA = thresholds[thresholdIndexA];\n            var thresholdB = thresholds[thresholdIndexB];\n\n            if (topDown === true) {\n              // interpolation for sky color\n              if (position.y <= thresholdA.y && position.y > thresholdB.y) {\n                t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n                break;\n              }\n            } else {\n              // interpolation for ground color\n              if (position.y >= thresholdA.y && position.y < thresholdB.y) {\n                t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n                break;\n              }\n            }\n          }\n\n          var colorA = colors[thresholdIndexA];\n          var colorB = colors[thresholdIndexB];\n          color.copy(colorA).lerp(colorB, t);\n          colorAttribute.setXYZ(index, color.r, color.g, color.b);\n        }\n\n        geometry.setAttribute('color', colorAttribute);\n      } //\n\n\n      var textureLoader = new TextureLoader(this.manager);\n      textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin); // check version (only 2.0 is supported)\n\n      if (data.indexOf('#VRML V2.0') === -1) {\n        throw Error('THREE.VRMLLexer: Version of VRML asset not supported.');\n      } // create JSON representing the tree structure of the VRML asset\n\n\n      var tree = generateVRMLTree(data); // parse the tree structure to a three.js scene\n\n      var scene = parseTree(tree);\n      return scene;\n    }\n  });\n\n  function VRMLLexer(tokens) {\n    this.lexer = new Lexer(tokens); // eslint-disable-line no-undef\n  }\n\n  VRMLLexer.prototype = {\n    constructor: VRMLLexer,\n    lex: function lex(inputText) {\n      var lexingResult = this.lexer.tokenize(inputText);\n\n      if (lexingResult.errors.length > 0) {\n        console.error(lexingResult.errors);\n        throw Error('THREE.VRMLLexer: Lexing errors detected.');\n      }\n\n      return lexingResult;\n    }\n  };\n\n  function VRMLParser(tokenVocabulary) {\n    Parser.call(this, tokenVocabulary); // eslint-disable-line no-undef\n\n    var $ = this;\n    var Version = tokenVocabulary['Version'];\n    var LCurly = tokenVocabulary['LCurly'];\n    var RCurly = tokenVocabulary['RCurly'];\n    var LSquare = tokenVocabulary['LSquare'];\n    var RSquare = tokenVocabulary['RSquare'];\n    var Identifier = tokenVocabulary['Identifier'];\n    var RouteIdentifier = tokenVocabulary['RouteIdentifier'];\n    var StringLiteral = tokenVocabulary['StringLiteral'];\n    var HexLiteral = tokenVocabulary['HexLiteral'];\n    var NumberLiteral = tokenVocabulary['NumberLiteral'];\n    var TrueLiteral = tokenVocabulary['TrueLiteral'];\n    var FalseLiteral = tokenVocabulary['FalseLiteral'];\n    var NullLiteral = tokenVocabulary['NullLiteral'];\n    var DEF = tokenVocabulary['DEF'];\n    var USE = tokenVocabulary['USE'];\n    var ROUTE = tokenVocabulary['ROUTE'];\n    var TO = tokenVocabulary['TO'];\n    var NodeName = tokenVocabulary['NodeName'];\n    $.RULE('vrml', function () {\n      $.SUBRULE($.version);\n      $.AT_LEAST_ONE(function () {\n        $.SUBRULE($.node);\n      });\n      $.MANY(function () {\n        $.SUBRULE($.route);\n      });\n    });\n    $.RULE('version', function () {\n      $.CONSUME(Version);\n    });\n    $.RULE('node', function () {\n      $.OPTION(function () {\n        $.SUBRULE($.def);\n      });\n      $.CONSUME(NodeName);\n      $.CONSUME(LCurly);\n      $.MANY(function () {\n        $.SUBRULE($.field);\n      });\n      $.CONSUME(RCurly);\n    });\n    $.RULE('field', function () {\n      $.CONSUME(Identifier);\n      $.OR2([{\n        ALT: function ALT() {\n          $.SUBRULE($.singleFieldValue);\n        }\n      }, {\n        ALT: function ALT() {\n          $.SUBRULE($.multiFieldValue);\n        }\n      }]);\n    });\n    $.RULE('def', function () {\n      $.CONSUME(DEF);\n      $.OR([{\n        ALT: function ALT() {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function ALT() {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('use', function () {\n      $.CONSUME(USE);\n      $.OR([{\n        ALT: function ALT() {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function ALT() {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('singleFieldValue', function () {\n      $.AT_LEAST_ONE(function () {\n        $.OR([{\n          ALT: function ALT() {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function ALT() {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(TrueLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(FalseLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n    });\n    $.RULE('multiFieldValue', function () {\n      $.CONSUME(LSquare);\n      $.MANY(function () {\n        $.OR([{\n          ALT: function ALT() {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function ALT() {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n      $.CONSUME(RSquare);\n    });\n    $.RULE('route', function () {\n      $.CONSUME(ROUTE);\n      $.CONSUME(RouteIdentifier);\n      $.CONSUME(TO);\n      $.CONSUME2(RouteIdentifier);\n    });\n    this.performSelfAnalysis();\n  }\n\n  VRMLParser.prototype = Object.create(Parser.prototype); // eslint-disable-line no-undef\n\n  VRMLParser.prototype.constructor = VRMLParser;\n\n  function Face(a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.normal = new Vector3();\n  }\n\n  var TEXTURE_TYPE = {\n    INTENSITY: 1,\n    INTENSITY_ALPHA: 2,\n    RGB: 3,\n    RGBA: 4\n  };\n  return VRMLLoader;\n}();\n\nexport { VRMLLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","Vector3","Vector2","TextureLoader","Scene","Object3D","Group","SphereGeometry","MeshBasicMaterial","BackSide","Mesh","PointsMaterial","Points","LineBasicMaterial","LineSegments","FrontSide","DoubleSide","MeshPhongMaterial","Color","DataTexture","RGBAFormat","RGBFormat","BufferGeometry","Float32BufferAttribute","BoxGeometry","ConeGeometry","CylinderGeometry","Quaternion","ShapeUtils","BufferAttribute","RepeatWrapping","ClampToEdgeWrapping","Parser","createToken","Lexer","VRMLLoader","manager","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","nodeMap","generateVRMLTree","tokenData","createTokens","lexer","VRMLLexer","tokens","parser","VRMLParser","tokenVocabulary","visitor","createVisitor","getBaseCstVisitorConstructor","lexingResult","lex","input","cstOutput","vrml","errors","length","Error","ast","visit","RouteIdentifier","name","pattern","Identifier","longer_alt","nodeTypes","Version","NodeName","RegExp","join","DEF","USE","ROUTE","TO","StringLiteral","HexLiteral","NumberLiteral","TrueLiteral","FalseLiteral","NullLiteral","LSquare","RSquare","LCurly","RCurly","Comment","group","SKIPPED","WhiteSpace","i","l","token","BaseVRMLVisitor","VRMLToASTVisitor","validateVisitor","ctx","version","nodes","routes","node","push","route","image","fields","field","def","type","values","result","singleFieldValue","multiFieldValue","use","processField","FROM","stringLiteral","replace","numberLiteral","parseFloat","hexLiteral","trueLiteral","falseLiteral","forEach","parseTree","tree","scene","buildNodeMap","object","getNode","add","userData","worldInfo","fieldValues","j","jl","resolveUSE","build","undefined","buildNode","nodeName","buildGroupingNode","buildBackgroundNode","buildShapeNode","buildAppearanceNode","buildMaterialNode","buildImageTextureNode","buildPixelTextureNode","buildTextureTransformNode","buildIndexedFaceSetNode","buildIndexedLineSetNode","buildPointSetNode","buildBoxNode","buildConeNode","buildCylinderNode","buildSphereNode","buildElevationGridNode","buildExtrusionNode","buildGeometricNode","buildWorldInfoNode","warn","hasOwnProperty","fieldName","parseFieldChildren","axis","angle","quaternion","setFromAxisAngle","scale","set","position","groundAngle","groundColor","skyAngle","skyColor","radius","skyGeometry","skyMaterial","fog","side","depthWrite","depthTest","paintFaces","toColorArray","vertexColors","color","setRGB","sky","groundGeometry","Math","PI","groundMaterial","ground","renderOrder","Infinity","material","geometry","attributes","_type","pointsMaterial","isMeshPhongMaterial","copy","emissive","lineMaterial","_solid","visible","transformData","materialData","diffuseColor","emissiveColor","shininess","specularColor","specular","transparency","opacity","transparent","textureNode","map","__type","TEXTURE_TYPE","INTENSITY_ALPHA","RGB","RGBA","center","rotation","repeat","offset","translation","parseHexColor","hex","textureType","INTENSITY","value","parseInt","r","g","b","substring","a","getTextureType","num_components","texture","wrapS","wrapT","width","height","useAlpha","size","Uint8Array","k","stride","textureLoader","title","info","coord","normal","texCoord","ccw","solid","creaseAngle","colorIndex","coordIndex","normalIndex","texCoordIndex","colorPerVertex","normalPerVertex","colorNode","coordNode","normalNode","texCoordNode","triangulatedCoordIndex","triangulateFaceIndex","positionAttribute","colorAttribute","normalAttribute","uvAttribute","triangulatedColorIndex","computeAttributeFromIndexedData","toNonIndexedAttribute","flattenFaceColors","flattenData","triangulatedFaceColors","triangulateFaceData","computeAttributeFromFaceData","triangulatedNormalIndex","flattenFaceNormals","triangulatedFaceNormals","computeNormalAttribute","triangulatedTexCoordIndex","setAttribute","expandedLineIndex","expandLineIndex","expandedColorIndex","flattenLineColors","expandedLineColors","expandLineData","computeAttributeFromLineData","x","y","z","openEnded","xDimension","zDimension","xSpacing","zSpacing","vertices","normals","colors","uvs","index","xn","yn","zn","s","t","indices","c","d","crossSection","spine","orientation","beginCap","endCap","crossSectionClosed","spineVector","scaling","vertex","o","il","fromArray","kl","multiply","applyQuaternion","spineCount","crossSectionCount","contour","faces","triangulateShape","capIndices","face","indexOffset","identifier","isObject3D","isMaterial","clone","children","owner","start","i1","i2","i3","triangulatedData","vA","vB","vC","uvA","uvB","uvC","itemSize","array","faceData","lineData","attribute","array2","index2","ab","cb","vertexNormals","Face","subVectors","cross","normalize","nA","weightedNormal","nB","nC","vector","angleTo","angles","topDown","thresholds","startAngle","point","setFromSphericalCoords","Float32Array","count","getX","fromBufferAttribute","thresholdIndexA","thresholdIndexB","thresholdA","thresholdB","abs","colorA","colorB","lerp","setXYZ","resourcePath","setCrossOrigin","crossOrigin","indexOf","inputText","tokenize","$","RULE","SUBRULE","AT_LEAST_ONE","MANY","CONSUME","OPTION","OR2","ALT","OR","CONSUME2","performSelfAnalysis"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/loaders/VRMLLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, Vector3, Vector2, TextureLoader, Scene, Object3D, Group, SphereGeometry, MeshBasicMaterial, BackSide, Mesh, PointsMaterial, Points, LineBasicMaterial, LineSegments, FrontSide, DoubleSide, MeshPhongMaterial, Color, DataTexture, RGBAFormat, RGBFormat, BufferGeometry, Float32BufferAttribute, BoxGeometry, ConeGeometry, CylinderGeometry, Quaternion, ShapeUtils, BufferAttribute, RepeatWrapping, ClampToEdgeWrapping } from 'three';\nimport { Parser, createToken, Lexer } from 'chevrotain';\n\nvar VRMLLoader = function () {\n  // class definitions\n  function VRMLLoader(manager) {\n    Loader.call(this, manager);\n  }\n\n  VRMLLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n    constructor: VRMLLoader,\n    load: function (url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    },\n    parse: function (data, path) {\n      var nodeMap = {};\n\n      function generateVRMLTree(data) {\n        // create lexer, parser and visitor\n        var tokenData = createTokens();\n        var lexer = new VRMLLexer(tokenData.tokens);\n        var parser = new VRMLParser(tokenData.tokenVocabulary);\n        var visitor = createVisitor(parser.getBaseCstVisitorConstructor()); // lexing\n\n        var lexingResult = lexer.lex(data);\n        parser.input = lexingResult.tokens; // parsing\n\n        var cstOutput = parser.vrml();\n\n        if (parser.errors.length > 0) {\n          console.error(parser.errors);\n          throw Error('THREE.VRMLLoader: Parsing errors detected.');\n        } // actions\n\n\n        var ast = visitor.visit(cstOutput);\n        return ast;\n      }\n\n      function createTokens() {\n        // from http://gun.teipir.gr/VRML-amgem/spec/part1/concepts.html#SyntaxBasics\n        var RouteIdentifier = createToken({\n          name: 'RouteIdentifier',\n          pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*[\\.][^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/\n        });\n        var Identifier = createToken({\n          name: 'Identifier',\n          pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/,\n          longer_alt: RouteIdentifier\n        }); // from http://gun.teipir.gr/VRML-amgem/spec/part1/nodesRef.html\n\n        var nodeTypes = ['Anchor', 'Billboard', 'Collision', 'Group', 'Transform', // grouping nodes\n        'Inline', 'LOD', 'Switch', // special groups\n        'AudioClip', 'DirectionalLight', 'PointLight', 'Script', 'Shape', 'Sound', 'SpotLight', 'WorldInfo', // common nodes\n        'CylinderSensor', 'PlaneSensor', 'ProximitySensor', 'SphereSensor', 'TimeSensor', 'TouchSensor', 'VisibilitySensor', // sensors\n        'Box', 'Cone', 'Cylinder', 'ElevationGrid', 'Extrusion', 'IndexedFaceSet', 'IndexedLineSet', 'PointSet', 'Sphere', // geometries\n        'Color', 'Coordinate', 'Normal', 'TextureCoordinate', // geometric properties\n        'Appearance', 'FontStyle', 'ImageTexture', 'Material', 'MovieTexture', 'PixelTexture', 'TextureTransform', // appearance\n        'ColorInterpolator', 'CoordinateInterpolator', 'NormalInterpolator', 'OrientationInterpolator', 'PositionInterpolator', 'ScalarInterpolator', // interpolators\n        'Background', 'Fog', 'NavigationInfo', 'Viewpoint', // bindable nodes\n        'Text' // Text must be placed at the end of the regex so there are no matches for TextureTransform and TextureCoordinate\n        ]; //\n\n        var Version = createToken({\n          name: 'Version',\n          pattern: /#VRML.*/,\n          longer_alt: Identifier\n        });\n        var NodeName = createToken({\n          name: 'NodeName',\n          pattern: new RegExp(nodeTypes.join('|')),\n          longer_alt: Identifier\n        });\n        var DEF = createToken({\n          name: 'DEF',\n          pattern: /DEF/,\n          longer_alt: Identifier\n        });\n        var USE = createToken({\n          name: 'USE',\n          pattern: /USE/,\n          longer_alt: Identifier\n        });\n        var ROUTE = createToken({\n          name: 'ROUTE',\n          pattern: /ROUTE/,\n          longer_alt: Identifier\n        });\n        var TO = createToken({\n          name: 'TO',\n          pattern: /TO/,\n          longer_alt: Identifier\n        }); //\n\n        var StringLiteral = createToken({\n          name: 'StringLiteral',\n          pattern: /\"(:?[^\\\\\"\\n\\r]+|\\\\(:?[bfnrtv\"\\\\/]|u[0-9a-fA-F]{4}))*\"/\n        });\n        var HexLiteral = createToken({\n          name: 'HexLiteral',\n          pattern: /0[xX][0-9a-fA-F]+/\n        });\n        var NumberLiteral = createToken({\n          name: 'NumberLiteral',\n          pattern: /[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?/\n        });\n        var TrueLiteral = createToken({\n          name: 'TrueLiteral',\n          pattern: /TRUE/\n        });\n        var FalseLiteral = createToken({\n          name: 'FalseLiteral',\n          pattern: /FALSE/\n        });\n        var NullLiteral = createToken({\n          name: 'NullLiteral',\n          pattern: /NULL/\n        });\n        var LSquare = createToken({\n          name: 'LSquare',\n          pattern: /\\[/\n        });\n        var RSquare = createToken({\n          name: 'RSquare',\n          pattern: /]/\n        });\n        var LCurly = createToken({\n          name: 'LCurly',\n          pattern: /{/\n        });\n        var RCurly = createToken({\n          name: 'RCurly',\n          pattern: /}/\n        });\n        var Comment = createToken({\n          name: 'Comment',\n          pattern: /#.*/,\n          group: Lexer.SKIPPED // eslint-disable-line no-undef\n\n        }); // commas, blanks, tabs, newlines and carriage returns are whitespace characters wherever they appear outside of string fields\n\n        var WhiteSpace = createToken({\n          name: 'WhiteSpace',\n          pattern: /[ ,\\s]/,\n          group: Lexer.SKIPPED // eslint-disable-line no-undef\n\n        });\n        var tokens = [WhiteSpace, // keywords appear before the Identifier\n        NodeName, DEF, USE, ROUTE, TO, TrueLiteral, FalseLiteral, NullLiteral, // the Identifier must appear after the keywords because all keywords are valid identifiers\n        Version, Identifier, RouteIdentifier, StringLiteral, HexLiteral, NumberLiteral, LSquare, RSquare, LCurly, RCurly, Comment];\n        var tokenVocabulary = {};\n\n        for (let i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n          tokenVocabulary[token.name] = token;\n        }\n\n        return {\n          tokens: tokens,\n          tokenVocabulary: tokenVocabulary\n        };\n      }\n\n      function createVisitor(BaseVRMLVisitor) {\n        // the visitor is created dynmaically based on the given base class\n        function VRMLToASTVisitor() {\n          BaseVRMLVisitor.call(this);\n          this.validateVisitor();\n        }\n\n        VRMLToASTVisitor.prototype = Object.assign(Object.create(BaseVRMLVisitor.prototype), {\n          constructor: VRMLToASTVisitor,\n          vrml: function (ctx) {\n            var data = {\n              version: this.visit(ctx.version),\n              nodes: [],\n              routes: []\n            };\n\n            for (let i = 0, l = ctx.node.length; i < l; i++) {\n              var node = ctx.node[i];\n              data.nodes.push(this.visit(node));\n            }\n\n            if (ctx.route) {\n              for (let i = 0, l = ctx.route.length; i < l; i++) {\n                var route = ctx.route[i];\n                data.routes.push(this.visit(route));\n              }\n            }\n\n            return data;\n          },\n          version: function (ctx) {\n            return ctx.Version[0].image;\n          },\n          node: function (ctx) {\n            var data = {\n              name: ctx.NodeName[0].image,\n              fields: []\n            };\n\n            if (ctx.field) {\n              for (let i = 0, l = ctx.field.length; i < l; i++) {\n                var field = ctx.field[i];\n                data.fields.push(this.visit(field));\n              }\n            } // DEF\n\n\n            if (ctx.def) {\n              data.DEF = this.visit(ctx.def[0]);\n            }\n\n            return data;\n          },\n          field: function (ctx) {\n            var data = {\n              name: ctx.Identifier[0].image,\n              type: null,\n              values: null\n            };\n            var result; // SFValue\n\n            if (ctx.singleFieldValue) {\n              result = this.visit(ctx.singleFieldValue[0]);\n            } // MFValue\n\n\n            if (ctx.multiFieldValue) {\n              result = this.visit(ctx.multiFieldValue[0]);\n            }\n\n            data.type = result.type;\n            data.values = result.values;\n            return data;\n          },\n          def: function (ctx) {\n            return (ctx.Identifier || ctx.NodeName)[0].image;\n          },\n          use: function (ctx) {\n            return {\n              USE: (ctx.Identifier || ctx.NodeName)[0].image\n            };\n          },\n          singleFieldValue: function (ctx) {\n            return processField(this, ctx);\n          },\n          multiFieldValue: function (ctx) {\n            return processField(this, ctx);\n          },\n          route: function (ctx) {\n            var data = {\n              FROM: ctx.RouteIdentifier[0].image,\n              TO: ctx.RouteIdentifier[1].image\n            };\n            return data;\n          }\n        });\n\n        function processField(scope, ctx) {\n          var field = {\n            type: null,\n            values: []\n          };\n\n          if (ctx.node) {\n            field.type = 'node';\n\n            for (let i = 0, l = ctx.node.length; i < l; i++) {\n              var node = ctx.node[i];\n              field.values.push(scope.visit(node));\n            }\n          }\n\n          if (ctx.use) {\n            field.type = 'use';\n\n            for (let i = 0, l = ctx.use.length; i < l; i++) {\n              var use = ctx.use[i];\n              field.values.push(scope.visit(use));\n            }\n          }\n\n          if (ctx.StringLiteral) {\n            field.type = 'string';\n\n            for (let i = 0, l = ctx.StringLiteral.length; i < l; i++) {\n              var stringLiteral = ctx.StringLiteral[i];\n              field.values.push(stringLiteral.image.replace(/'|\"/g, ''));\n            }\n          }\n\n          if (ctx.NumberLiteral) {\n            field.type = 'number';\n\n            for (let i = 0, l = ctx.NumberLiteral.length; i < l; i++) {\n              var numberLiteral = ctx.NumberLiteral[i];\n              field.values.push(parseFloat(numberLiteral.image));\n            }\n          }\n\n          if (ctx.HexLiteral) {\n            field.type = 'hex';\n\n            for (let i = 0, l = ctx.HexLiteral.length; i < l; i++) {\n              var hexLiteral = ctx.HexLiteral[i];\n              field.values.push(hexLiteral.image);\n            }\n          }\n\n          if (ctx.TrueLiteral) {\n            field.type = 'boolean';\n\n            for (let i = 0, l = ctx.TrueLiteral.length; i < l; i++) {\n              var trueLiteral = ctx.TrueLiteral[i];\n              if (trueLiteral.image === 'TRUE') field.values.push(true);\n            }\n          }\n\n          if (ctx.FalseLiteral) {\n            field.type = 'boolean';\n\n            for (let i = 0, l = ctx.FalseLiteral.length; i < l; i++) {\n              var falseLiteral = ctx.FalseLiteral[i];\n              if (falseLiteral.image === 'FALSE') field.values.push(false);\n            }\n          }\n\n          if (ctx.NullLiteral) {\n            field.type = 'null';\n            ctx.NullLiteral.forEach(function () {\n              field.values.push(null);\n            });\n          }\n\n          return field;\n        }\n\n        return new VRMLToASTVisitor();\n      }\n\n      function parseTree(tree) {\n        // console.log( JSON.stringify( tree, null, 2 ) );\n        var nodes = tree.nodes;\n        var scene = new Scene(); // first iteration: build nodemap based on DEF statements\n\n        for (let i = 0, l = nodes.length; i < l; i++) {\n          var node = nodes[i];\n          buildNodeMap(node);\n        } // second iteration: build nodes\n\n\n        for (let i = 0, l = nodes.length; i < l; i++) {\n          var node = nodes[i];\n          var object = getNode(node);\n          if (object instanceof Object3D) scene.add(object);\n          if (node.name === 'WorldInfo') scene.userData.worldInfo = object;\n        }\n\n        return scene;\n      }\n\n      function buildNodeMap(node) {\n        if (node.DEF) {\n          nodeMap[node.DEF] = node;\n        }\n\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n\n          if (field.type === 'node') {\n            var fieldValues = field.values;\n\n            for (let j = 0, jl = fieldValues.length; j < jl; j++) {\n              buildNodeMap(fieldValues[j]);\n            }\n          }\n        }\n      }\n\n      function getNode(node) {\n        // handle case where a node refers to a different one\n        if (node.USE) {\n          return resolveUSE(node.USE);\n        }\n\n        if (node.build !== undefined) return node.build;\n        node.build = buildNode(node);\n        return node.build;\n      } // node builder\n\n\n      function buildNode(node) {\n        var nodeName = node.name;\n        var build;\n\n        switch (nodeName) {\n          case 'Group':\n          case 'Transform':\n          case 'Collision':\n            build = buildGroupingNode(node);\n            break;\n\n          case 'Background':\n            build = buildBackgroundNode(node);\n            break;\n\n          case 'Shape':\n            build = buildShapeNode(node);\n            break;\n\n          case 'Appearance':\n            build = buildAppearanceNode(node);\n            break;\n\n          case 'Material':\n            build = buildMaterialNode(node);\n            break;\n\n          case 'ImageTexture':\n            build = buildImageTextureNode(node);\n            break;\n\n          case 'PixelTexture':\n            build = buildPixelTextureNode(node);\n            break;\n\n          case 'TextureTransform':\n            build = buildTextureTransformNode(node);\n            break;\n\n          case 'IndexedFaceSet':\n            build = buildIndexedFaceSetNode(node);\n            break;\n\n          case 'IndexedLineSet':\n            build = buildIndexedLineSetNode(node);\n            break;\n\n          case 'PointSet':\n            build = buildPointSetNode(node);\n            break;\n\n          case 'Box':\n            build = buildBoxNode(node);\n            break;\n\n          case 'Cone':\n            build = buildConeNode(node);\n            break;\n\n          case 'Cylinder':\n            build = buildCylinderNode(node);\n            break;\n\n          case 'Sphere':\n            build = buildSphereNode(node);\n            break;\n\n          case 'ElevationGrid':\n            build = buildElevationGridNode(node);\n            break;\n\n          case 'Extrusion':\n            build = buildExtrusionNode(node);\n            break;\n\n          case 'Color':\n          case 'Coordinate':\n          case 'Normal':\n          case 'TextureCoordinate':\n            build = buildGeometricNode(node);\n            break;\n\n          case 'WorldInfo':\n            build = buildWorldInfoNode(node);\n            break;\n\n          case 'Anchor':\n          case 'Billboard':\n          case 'Inline':\n          case 'LOD':\n          case 'Switch':\n          case 'AudioClip':\n          case 'DirectionalLight':\n          case 'PointLight':\n          case 'Script':\n          case 'Sound':\n          case 'SpotLight':\n          case 'CylinderSensor':\n          case 'PlaneSensor':\n          case 'ProximitySensor':\n          case 'SphereSensor':\n          case 'TimeSensor':\n          case 'TouchSensor':\n          case 'VisibilitySensor':\n          case 'Text':\n          case 'FontStyle':\n          case 'MovieTexture':\n          case 'ColorInterpolator':\n          case 'CoordinateInterpolator':\n          case 'NormalInterpolator':\n          case 'OrientationInterpolator':\n          case 'PositionInterpolator':\n          case 'ScalarInterpolator':\n          case 'Fog':\n          case 'NavigationInfo':\n          case 'Viewpoint':\n            // node not supported yet\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown node:', nodeName);\n            break;\n        }\n\n        if (build !== undefined && node.DEF !== undefined && build.hasOwnProperty('name') === true) {\n          build.name = node.DEF;\n        }\n\n        return build;\n      }\n\n      function buildGroupingNode(node) {\n        var object = new Group(); //\n\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'bboxCenter':\n              // field not supported\n              break;\n\n            case 'bboxSize':\n              // field not supported\n              break;\n\n            case 'center':\n              // field not supported\n              break;\n\n            case 'children':\n              parseFieldChildren(fieldValues, object);\n              break;\n\n            case 'collide':\n              // field not supported\n              break;\n\n            case 'rotation':\n              var axis = new Vector3(fieldValues[0], fieldValues[1], fieldValues[2]);\n              var angle = fieldValues[3];\n              object.quaternion.setFromAxisAngle(axis, angle);\n              break;\n\n            case 'scale':\n              object.scale.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n\n            case 'scaleOrientation':\n              // field not supported\n              break;\n\n            case 'translation':\n              object.position.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n\n            case 'proxy':\n              // field not supported\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        return object;\n      }\n\n      function buildBackgroundNode(node) {\n        var group = new Group();\n        var groundAngle, groundColor;\n        var skyAngle, skyColor;\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'groundAngle':\n              groundAngle = fieldValues;\n              break;\n\n            case 'groundColor':\n              groundColor = fieldValues;\n              break;\n\n            case 'backUrl':\n              // field not supported\n              break;\n\n            case 'bottomUrl':\n              // field not supported\n              break;\n\n            case 'frontUrl':\n              // field not supported\n              break;\n\n            case 'leftUrl':\n              // field not supported\n              break;\n\n            case 'rightUrl':\n              // field not supported\n              break;\n\n            case 'topUrl':\n              // field not supported\n              break;\n\n            case 'skyAngle':\n              skyAngle = fieldValues;\n              break;\n\n            case 'skyColor':\n              skyColor = fieldValues;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var radius = 10000; // sky\n\n        if (skyColor) {\n          var skyGeometry = new SphereGeometry(radius, 32, 16);\n          var skyMaterial = new MeshBasicMaterial({\n            fog: false,\n            side: BackSide,\n            depthWrite: false,\n            depthTest: false\n          });\n\n          if (skyColor.length > 3) {\n            paintFaces(skyGeometry, radius, skyAngle, toColorArray(skyColor), true);\n            skyMaterial.vertexColors = true;\n          } else {\n            skyMaterial.color.setRGB(skyColor[0], skyColor[1], skyColor[2]);\n          }\n\n          var sky = new Mesh(skyGeometry, skyMaterial);\n          group.add(sky);\n        } // ground\n\n\n        if (groundColor) {\n          if (groundColor.length > 0) {\n            var groundGeometry = new SphereGeometry(radius, 32, 16, 0, 2 * Math.PI, 0.5 * Math.PI, 1.5 * Math.PI);\n            var groundMaterial = new MeshBasicMaterial({\n              fog: false,\n              side: BackSide,\n              vertexColors: true,\n              depthWrite: false,\n              depthTest: false\n            });\n            paintFaces(groundGeometry, radius, groundAngle, toColorArray(groundColor), false);\n            var ground = new Mesh(groundGeometry, groundMaterial);\n            group.add(ground);\n          }\n        } // render background group first\n\n\n        group.renderOrder = -Infinity;\n        return group;\n      }\n\n      function buildShapeNode(node) {\n        var fields = node.fields; // if the appearance field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n\n        var material = new MeshBasicMaterial({\n          color: 0x000000\n        });\n        var geometry;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'appearance':\n              if (fieldValues[0] !== null) {\n                material = getNode(fieldValues[0]);\n              }\n\n              break;\n\n            case 'geometry':\n              if (fieldValues[0] !== null) {\n                geometry = getNode(fieldValues[0]);\n              }\n\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        } // build 3D object\n\n\n        var object;\n\n        if (geometry && geometry.attributes.position) {\n          var type = geometry._type;\n\n          if (type === 'points') {\n            // points\n            var pointsMaterial = new PointsMaterial({\n              color: 0xffffff\n            });\n\n            if (geometry.attributes.color !== undefined) {\n              pointsMaterial.vertexColors = true;\n            } else {\n              // if the color field is NULL and there is a material defined for the appearance affecting this PointSet, then use the emissiveColor of the material to draw the points\n              if (material.isMeshPhongMaterial) {\n                pointsMaterial.color.copy(material.emissive);\n              }\n            }\n\n            object = new Points(geometry, pointsMaterial);\n          } else if (type === 'line') {\n            // lines\n            var lineMaterial = new LineBasicMaterial({\n              color: 0xffffff\n            });\n\n            if (geometry.attributes.color !== undefined) {\n              lineMaterial.vertexColors = true;\n            } else {\n              // if the color field is NULL and there is a material defined for the appearance affecting this IndexedLineSet, then use the emissiveColor of the material to draw the lines\n              if (material.isMeshPhongMaterial) {\n                lineMaterial.color.copy(material.emissive);\n              }\n            }\n\n            object = new LineSegments(geometry, lineMaterial);\n          } else {\n            // consider meshes\n            // check \"solid\" hint (it's placed in the geometry but affects the material)\n            if (geometry._solid !== undefined) {\n              material.side = geometry._solid ? FrontSide : DoubleSide;\n            } // check for vertex colors\n\n\n            if (geometry.attributes.color !== undefined) {\n              material.vertexColors = true;\n            }\n\n            object = new Mesh(geometry, material);\n          }\n        } else {\n          object = new Object3D(); // if the geometry field is NULL or no vertices are defined the object is not drawn\n\n          object.visible = false;\n        }\n\n        return object;\n      }\n\n      function buildAppearanceNode(node) {\n        var material = new MeshPhongMaterial();\n        var transformData;\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'material':\n              if (fieldValues[0] !== null) {\n                var materialData = getNode(fieldValues[0]);\n                if (materialData.diffuseColor) material.color.copy(materialData.diffuseColor);\n                if (materialData.emissiveColor) material.emissive.copy(materialData.emissiveColor);\n                if (materialData.shininess) material.shininess = materialData.shininess;\n                if (materialData.specularColor) material.specular.copy(materialData.specularColor);\n                if (materialData.transparency) material.opacity = 1 - materialData.transparency;\n                if (materialData.transparency > 0) material.transparent = true;\n              } else {\n                // if the material field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n                material = new MeshBasicMaterial({\n                  color: 0x000000\n                });\n              }\n\n              break;\n\n            case 'texture':\n              var textureNode = fieldValues[0];\n\n              if (textureNode !== null) {\n                if (textureNode.name === 'ImageTexture' || textureNode.name === 'PixelTexture') {\n                  material.map = getNode(textureNode);\n                }\n              }\n\n              break;\n\n            case 'textureTransform':\n              if (fieldValues[0] !== null) {\n                transformData = getNode(fieldValues[0]);\n              }\n\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        } // only apply texture transform data if a texture was defined\n\n\n        if (material.map) {\n          // respect VRML lighting model\n          if (material.map.__type) {\n            switch (material.map.__type) {\n              case TEXTURE_TYPE.INTENSITY_ALPHA:\n                material.opacity = 1; // ignore transparency\n\n                break;\n\n              case TEXTURE_TYPE.RGB:\n                material.color.set(0xffffff); // ignore material color\n\n                break;\n\n              case TEXTURE_TYPE.RGBA:\n                material.color.set(0xffffff); // ignore material color\n\n                material.opacity = 1; // ignore transparency\n\n                break;\n            }\n\n            delete material.map.__type;\n          } // apply texture transform\n\n\n          if (transformData) {\n            material.map.center.copy(transformData.center);\n            material.map.rotation = transformData.rotation;\n            material.map.repeat.copy(transformData.scale);\n            material.map.offset.copy(transformData.translation);\n          }\n        }\n\n        return material;\n      }\n\n      function buildMaterialNode(node) {\n        var materialData = {};\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'ambientIntensity':\n              // field not supported\n              break;\n\n            case 'diffuseColor':\n              materialData.diffuseColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n\n            case 'emissiveColor':\n              materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n\n            case 'shininess':\n              materialData.shininess = fieldValues[0];\n              break;\n\n            case 'specularColor':\n              materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n\n            case 'transparency':\n              materialData.transparency = fieldValues[0];\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        return materialData;\n      }\n\n      function parseHexColor(hex, textureType, color) {\n        switch (textureType) {\n          case TEXTURE_TYPE.INTENSITY:\n            // Intensity texture: A one-component image specifies one-byte hexadecimal or integer values representing the intensity of the image\n            var value = parseInt(hex);\n            color.r = value;\n            color.g = value;\n            color.b = value;\n            break;\n\n          case TEXTURE_TYPE.INTENSITY_ALPHA:\n            // Intensity+Alpha texture: A two-component image specifies the intensity in the first (high) byte and the alpha opacity in the second (low) byte.\n            var value = parseInt('0x' + hex.substring(2, 4));\n            color.r = value;\n            color.g = value;\n            color.b = value;\n            color.a = parseInt('0x' + hex.substring(4, 6));\n            break;\n\n          case TEXTURE_TYPE.RGB:\n            // RGB texture: Pixels in a three-component image specify the red component in the first (high) byte, followed by the green and blue components\n            color.r = parseInt('0x' + hex.substring(2, 4));\n            color.g = parseInt('0x' + hex.substring(4, 6));\n            color.b = parseInt('0x' + hex.substring(6, 8));\n            break;\n\n          case TEXTURE_TYPE.RGBA:\n            // RGBA texture: Four-component images specify the alpha opacity byte after red/green/blue\n            color.r = parseInt('0x' + hex.substring(2, 4));\n            color.g = parseInt('0x' + hex.substring(4, 6));\n            color.b = parseInt('0x' + hex.substring(6, 8));\n            color.a = parseInt('0x' + hex.substring(8, 10));\n            break;\n        }\n      }\n\n      function getTextureType(num_components) {\n        var type;\n\n        switch (num_components) {\n          case 1:\n            type = TEXTURE_TYPE.INTENSITY;\n            break;\n\n          case 2:\n            type = TEXTURE_TYPE.INTENSITY_ALPHA;\n            break;\n\n          case 3:\n            type = TEXTURE_TYPE.RGB;\n            break;\n\n          case 4:\n            type = TEXTURE_TYPE.RGBA;\n            break;\n        }\n\n        return type;\n      }\n\n      function buildPixelTextureNode(node) {\n        var texture;\n        var wrapS = RepeatWrapping;\n        var wrapT = RepeatWrapping;\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'image':\n              var width = fieldValues[0];\n              var height = fieldValues[1];\n              var num_components = fieldValues[2];\n              var useAlpha = num_components === 2 || num_components === 4;\n              var textureType = getTextureType(num_components);\n              var size = (useAlpha === true ? 4 : 3) * (width * height);\n              var data = new Uint8Array(size);\n              var color = {\n                r: 0,\n                g: 0,\n                b: 0,\n                a: 0\n              };\n\n              for (let j = 3, k = 0, jl = fieldValues.length; j < jl; j++, k++) {\n                parseHexColor(fieldValues[j], textureType, color);\n\n                if (useAlpha === true) {\n                  var stride = k * 4;\n                  data[stride + 0] = color.r;\n                  data[stride + 1] = color.g;\n                  data[stride + 2] = color.b;\n                  data[stride + 3] = color.a;\n                } else {\n                  var stride = k * 3;\n                  data[stride + 0] = color.r;\n                  data[stride + 1] = color.g;\n                  data[stride + 2] = color.b;\n                }\n              }\n\n              texture = new DataTexture(data, width, height, useAlpha === true ? RGBAFormat : RGBFormat);\n              texture.__type = textureType; // needed for material modifications\n\n              break;\n\n            case 'repeatS':\n              if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n              break;\n\n            case 'repeatT':\n              if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        if (texture) {\n          texture.wrapS = wrapS;\n          texture.wrapT = wrapT;\n        }\n\n        return texture;\n      }\n\n      function buildImageTextureNode(node) {\n        var texture;\n        var wrapS = RepeatWrapping;\n        var wrapT = RepeatWrapping;\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'url':\n              var url = fieldValues[0];\n              if (url) texture = textureLoader.load(url);\n              break;\n\n            case 'repeatS':\n              if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n              break;\n\n            case 'repeatT':\n              if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        if (texture) {\n          texture.wrapS = wrapS;\n          texture.wrapT = wrapT;\n        }\n\n        return texture;\n      }\n\n      function buildTextureTransformNode(node) {\n        var transformData = {\n          center: new Vector2(),\n          rotation: new Vector2(),\n          scale: new Vector2(),\n          translation: new Vector2()\n        };\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'center':\n              transformData.center.set(fieldValues[0], fieldValues[1]);\n              break;\n\n            case 'rotation':\n              transformData.rotation = fieldValues[0];\n              break;\n\n            case 'scale':\n              transformData.scale.set(fieldValues[0], fieldValues[1]);\n              break;\n\n            case 'translation':\n              transformData.translation.set(fieldValues[0], fieldValues[1]);\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        return transformData;\n      }\n\n      function buildGeometricNode(node) {\n        return node.fields[0].values;\n      }\n\n      function buildWorldInfoNode(node) {\n        var worldInfo = {};\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'title':\n              worldInfo.title = fieldValues[0];\n              break;\n\n            case 'info':\n              worldInfo.info = fieldValues;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        return worldInfo;\n      }\n\n      function buildIndexedFaceSetNode(node) {\n        var color, coord, normal, texCoord;\n        var ccw = true,\n            solid = true,\n            creaseAngle = 0;\n        var colorIndex, coordIndex, normalIndex, texCoordIndex;\n        var colorPerVertex = true,\n            normalPerVertex = true;\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'color':\n              var colorNode = fieldValues[0];\n\n              if (colorNode !== null) {\n                color = getNode(colorNode);\n              }\n\n              break;\n\n            case 'coord':\n              var coordNode = fieldValues[0];\n\n              if (coordNode !== null) {\n                coord = getNode(coordNode);\n              }\n\n              break;\n\n            case 'normal':\n              var normalNode = fieldValues[0];\n\n              if (normalNode !== null) {\n                normal = getNode(normalNode);\n              }\n\n              break;\n\n            case 'texCoord':\n              var texCoordNode = fieldValues[0];\n\n              if (texCoordNode !== null) {\n                texCoord = getNode(texCoordNode);\n              }\n\n              break;\n\n            case 'ccw':\n              ccw = fieldValues[0];\n              break;\n\n            case 'colorIndex':\n              colorIndex = fieldValues;\n              break;\n\n            case 'colorPerVertex':\n              colorPerVertex = fieldValues[0];\n              break;\n\n            case 'convex':\n              // field not supported\n              break;\n\n            case 'coordIndex':\n              coordIndex = fieldValues;\n              break;\n\n            case 'creaseAngle':\n              creaseAngle = fieldValues[0];\n              break;\n\n            case 'normalIndex':\n              normalIndex = fieldValues;\n              break;\n\n            case 'normalPerVertex':\n              normalPerVertex = fieldValues[0];\n              break;\n\n            case 'solid':\n              solid = fieldValues[0];\n              break;\n\n            case 'texCoordIndex':\n              texCoordIndex = fieldValues;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        if (coordIndex === undefined) {\n          console.warn('THREE.VRMLLoader: Missing coordIndex.');\n          return new BufferGeometry(); // handle VRML files with incomplete geometry definition\n        }\n\n        var triangulatedCoordIndex = triangulateFaceIndex(coordIndex, ccw);\n        var positionAttribute;\n        var colorAttribute;\n        var normalAttribute;\n        var uvAttribute;\n\n        if (color) {\n          if (colorPerVertex === true) {\n            if (colorIndex && colorIndex.length > 0) {\n              // if the colorIndex field is not empty, then it is used to choose colors for each vertex of the IndexedFaceSet.\n              var triangulatedColorIndex = triangulateFaceIndex(colorIndex, ccw);\n              colorAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedColorIndex, color, 3);\n            } else {\n              // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n              colorAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(color, 3));\n            }\n          } else {\n            if (colorIndex && colorIndex.length > 0) {\n              // if the colorIndex field is not empty, then they are used to choose one color for each face of the IndexedFaceSet\n              var flattenFaceColors = flattenData(color, colorIndex);\n              var triangulatedFaceColors = triangulateFaceData(flattenFaceColors, coordIndex);\n              colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n            } else {\n              // if the colorIndex field is empty, then the color are applied to each face of the IndexedFaceSet in order\n              var triangulatedFaceColors = triangulateFaceData(color, coordIndex);\n              colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n            }\n          }\n        }\n\n        if (normal) {\n          if (normalPerVertex === true) {\n            // consider vertex normals\n            if (normalIndex && normalIndex.length > 0) {\n              // if the normalIndex field is not empty, then it is used to choose normals for each vertex of the IndexedFaceSet.\n              var triangulatedNormalIndex = triangulateFaceIndex(normalIndex, ccw);\n              normalAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedNormalIndex, normal, 3);\n            } else {\n              // if the normalIndex field is empty, then the coordIndex field is used to choose normals from the Normal node\n              normalAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(normal, 3));\n            }\n          } else {\n            // consider face normals\n            if (normalIndex && normalIndex.length > 0) {\n              // if the normalIndex field is not empty, then they are used to choose one normal for each face of the IndexedFaceSet\n              var flattenFaceNormals = flattenData(normal, normalIndex);\n              var triangulatedFaceNormals = triangulateFaceData(flattenFaceNormals, coordIndex);\n              normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n            } else {\n              // if the normalIndex field is empty, then the normals are applied to each face of the IndexedFaceSet in order\n              var triangulatedFaceNormals = triangulateFaceData(normal, coordIndex);\n              normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n            }\n          }\n        } else {\n          // if the normal field is NULL, then the loader should automatically generate normals, using creaseAngle to determine if and how normals are smoothed across shared vertices\n          normalAttribute = computeNormalAttribute(triangulatedCoordIndex, coord, creaseAngle);\n        }\n\n        if (texCoord) {\n          // texture coordinates are always defined on vertex level\n          if (texCoordIndex && texCoordIndex.length > 0) {\n            // if the texCoordIndex field is not empty, then it is used to choose texture coordinates for each vertex of the IndexedFaceSet.\n            var triangulatedTexCoordIndex = triangulateFaceIndex(texCoordIndex, ccw);\n            uvAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedTexCoordIndex, texCoord, 2);\n          } else {\n            // if the texCoordIndex field is empty, then the coordIndex array is used to choose texture coordinates from the TextureCoordinate node\n            uvAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(texCoord, 2));\n          }\n        }\n\n        var geometry = new BufferGeometry();\n        positionAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(coord, 3));\n        geometry.setAttribute('position', positionAttribute);\n        geometry.setAttribute('normal', normalAttribute); // optional attributes\n\n        if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n        if (uvAttribute) geometry.setAttribute('uv', uvAttribute); // \"solid\" influences the material so let's store it for later use\n\n        geometry._solid = solid;\n        geometry._type = 'mesh';\n        return geometry;\n      }\n\n      function buildIndexedLineSetNode(node) {\n        var color, coord;\n        var colorIndex, coordIndex;\n        var colorPerVertex = true;\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'color':\n              var colorNode = fieldValues[0];\n\n              if (colorNode !== null) {\n                color = getNode(colorNode);\n              }\n\n              break;\n\n            case 'coord':\n              var coordNode = fieldValues[0];\n\n              if (coordNode !== null) {\n                coord = getNode(coordNode);\n              }\n\n              break;\n\n            case 'colorIndex':\n              colorIndex = fieldValues;\n              break;\n\n            case 'colorPerVertex':\n              colorPerVertex = fieldValues[0];\n              break;\n\n            case 'coordIndex':\n              coordIndex = fieldValues;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        } // build lines\n\n\n        var colorAttribute;\n        var expandedLineIndex = expandLineIndex(coordIndex); // create an index for three.js's linesegment primitive\n\n        if (color) {\n          if (colorPerVertex === true) {\n            if (colorIndex.length > 0) {\n              // if the colorIndex field is not empty, then one color is used for each polyline of the IndexedLineSet.\n              var expandedColorIndex = expandLineIndex(colorIndex); // compute colors for each line segment (rendering primitve)\n\n              colorAttribute = computeAttributeFromIndexedData(expandedLineIndex, expandedColorIndex, color, 3); // compute data on vertex level\n            } else {\n              // if the colorIndex field is empty, then the colors are applied to each polyline of the IndexedLineSet in order.\n              colorAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(color, 3));\n            }\n          } else {\n            if (colorIndex.length > 0) {\n              // if the colorIndex field is not empty, then colors are applied to each vertex of the IndexedLineSet\n              var flattenLineColors = flattenData(color, colorIndex); // compute colors for each VRML primitve\n\n              var expandedLineColors = expandLineData(flattenLineColors, coordIndex); // compute colors for each line segment (rendering primitve)\n\n              colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors); // compute data on vertex level\n            } else {\n              // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n              var expandedLineColors = expandLineData(color, coordIndex); // compute colors for each line segment (rendering primitve)\n\n              colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors); // compute data on vertex level\n            }\n          }\n        } //\n\n\n        var geometry = new BufferGeometry();\n        var positionAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(coord, 3));\n        geometry.setAttribute('position', positionAttribute);\n        if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n        geometry._type = 'line';\n        return geometry;\n      }\n\n      function buildPointSetNode(node) {\n        var geometry;\n        var color, coord;\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'color':\n              var colorNode = fieldValues[0];\n\n              if (colorNode !== null) {\n                color = getNode(colorNode);\n              }\n\n              break;\n\n            case 'coord':\n              var coordNode = fieldValues[0];\n\n              if (coordNode !== null) {\n                coord = getNode(coordNode);\n              }\n\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var geometry = new BufferGeometry();\n        geometry.setAttribute('position', new Float32BufferAttribute(coord, 3));\n        if (color) geometry.setAttribute('color', new Float32BufferAttribute(color, 3));\n        geometry._type = 'points';\n        return geometry;\n      }\n\n      function buildBoxNode(node) {\n        var size = new Vector3(2, 2, 2);\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'size':\n              size.x = fieldValues[0];\n              size.y = fieldValues[1];\n              size.z = fieldValues[2];\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var geometry = new BoxGeometry(size.x, size.y, size.z);\n        return geometry;\n      }\n\n      function buildConeNode(node) {\n        var radius = 1,\n            height = 2,\n            openEnded = false;\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'bottom':\n              openEnded = !fieldValues[0];\n              break;\n\n            case 'bottomRadius':\n              radius = fieldValues[0];\n              break;\n\n            case 'height':\n              height = fieldValues[0];\n              break;\n\n            case 'side':\n              // field not supported\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var geometry = new ConeGeometry(radius, height, 16, 1, openEnded);\n        return geometry;\n      }\n\n      function buildCylinderNode(node) {\n        var radius = 1,\n            height = 2;\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'bottom':\n              // field not supported\n              break;\n\n            case 'radius':\n              radius = fieldValues[0];\n              break;\n\n            case 'height':\n              height = fieldValues[0];\n              break;\n\n            case 'side':\n              // field not supported\n              break;\n\n            case 'top':\n              // field not supported\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var geometry = new CylinderGeometry(radius, radius, height, 16, 1);\n        return geometry;\n      }\n\n      function buildSphereNode(node) {\n        var radius = 1;\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'radius':\n              radius = fieldValues[0];\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var geometry = new SphereGeometry(radius, 16, 16);\n        return geometry;\n      }\n\n      function buildElevationGridNode(node) {\n        var color;\n        var normal;\n        var texCoord;\n        var height;\n        var colorPerVertex = true;\n        var normalPerVertex = true;\n        var solid = true;\n        var ccw = true;\n        var creaseAngle = 0;\n        var xDimension = 2;\n        var zDimension = 2;\n        var xSpacing = 1;\n        var zSpacing = 1;\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'color':\n              var colorNode = fieldValues[0];\n\n              if (colorNode !== null) {\n                color = getNode(colorNode);\n              }\n\n              break;\n\n            case 'normal':\n              var normalNode = fieldValues[0];\n\n              if (normalNode !== null) {\n                normal = getNode(normalNode);\n              }\n\n              break;\n\n            case 'texCoord':\n              var texCoordNode = fieldValues[0];\n\n              if (texCoordNode !== null) {\n                texCoord = getNode(texCoordNode);\n              }\n\n              break;\n\n            case 'height':\n              height = fieldValues;\n              break;\n\n            case 'ccw':\n              ccw = fieldValues[0];\n              break;\n\n            case 'colorPerVertex':\n              colorPerVertex = fieldValues[0];\n              break;\n\n            case 'creaseAngle':\n              creaseAngle = fieldValues[0];\n              break;\n\n            case 'normalPerVertex':\n              normalPerVertex = fieldValues[0];\n              break;\n\n            case 'solid':\n              solid = fieldValues[0];\n              break;\n\n            case 'xDimension':\n              xDimension = fieldValues[0];\n              break;\n\n            case 'xSpacing':\n              xSpacing = fieldValues[0];\n              break;\n\n            case 'zDimension':\n              zDimension = fieldValues[0];\n              break;\n\n            case 'zSpacing':\n              zSpacing = fieldValues[0];\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        } // vertex data\n\n\n        var vertices = [];\n        var normals = [];\n        var colors = [];\n        var uvs = [];\n\n        for (let i = 0; i < zDimension; i++) {\n          for (let j = 0; j < xDimension; j++) {\n            // compute a row major index\n            var index = i * xDimension + j; // vertices\n\n            var x = xSpacing * i;\n            var y = height[index];\n            var z = zSpacing * j;\n            vertices.push(x, y, z); // colors\n\n            if (color && colorPerVertex === true) {\n              var r = color[index * 3 + 0];\n              var g = color[index * 3 + 1];\n              var b = color[index * 3 + 2];\n              colors.push(r, g, b);\n            } // normals\n\n\n            if (normal && normalPerVertex === true) {\n              var xn = normal[index * 3 + 0];\n              var yn = normal[index * 3 + 1];\n              var zn = normal[index * 3 + 2];\n              normals.push(xn, yn, zn);\n            } // uvs\n\n\n            if (texCoord) {\n              var s = texCoord[index * 2 + 0];\n              var t = texCoord[index * 2 + 1];\n              uvs.push(s, t);\n            } else {\n              uvs.push(i / (xDimension - 1), j / (zDimension - 1));\n            }\n          }\n        } // indices\n\n\n        var indices = [];\n\n        for (let i = 0; i < xDimension - 1; i++) {\n          for (let j = 0; j < zDimension - 1; j++) {\n            // from https://tecfa.unige.ch/guides/vrml/vrml97/spec/part1/nodesRef.html#ElevationGrid\n            var a = i + j * xDimension;\n            var b = i + (j + 1) * xDimension;\n            var c = i + 1 + (j + 1) * xDimension;\n            var d = i + 1 + j * xDimension; // faces\n\n            if (ccw === true) {\n              indices.push(a, c, b);\n              indices.push(c, a, d);\n            } else {\n              indices.push(a, b, c);\n              indices.push(c, d, a);\n            }\n          }\n        } //\n\n\n        var positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n        var uvAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(uvs, 2));\n        var colorAttribute;\n        var normalAttribute; // color attribute\n\n        if (color) {\n          if (colorPerVertex === false) {\n            for (let i = 0; i < xDimension - 1; i++) {\n              for (let j = 0; j < zDimension - 1; j++) {\n                var index = i + j * (xDimension - 1);\n                var r = color[index * 3 + 0];\n                var g = color[index * 3 + 1];\n                var b = color[index * 3 + 2]; // one color per quad\n\n                colors.push(r, g, b);\n                colors.push(r, g, b);\n                colors.push(r, g, b);\n                colors.push(r, g, b);\n                colors.push(r, g, b);\n                colors.push(r, g, b);\n              }\n            }\n\n            colorAttribute = new Float32BufferAttribute(colors, 3);\n          } else {\n            colorAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(colors, 3));\n          }\n        } // normal attribute\n\n\n        if (normal) {\n          if (normalPerVertex === false) {\n            for (let i = 0; i < xDimension - 1; i++) {\n              for (let j = 0; j < zDimension - 1; j++) {\n                var index = i + j * (xDimension - 1);\n                var xn = normal[index * 3 + 0];\n                var yn = normal[index * 3 + 1];\n                var zn = normal[index * 3 + 2]; // one normal per quad\n\n                normals.push(xn, yn, zn);\n                normals.push(xn, yn, zn);\n                normals.push(xn, yn, zn);\n                normals.push(xn, yn, zn);\n                normals.push(xn, yn, zn);\n                normals.push(xn, yn, zn);\n              }\n            }\n\n            normalAttribute = new Float32BufferAttribute(normals, 3);\n          } else {\n            normalAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(normals, 3));\n          }\n        } else {\n          normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n        } // build geometry\n\n\n        var geometry = new BufferGeometry();\n        geometry.setAttribute('position', positionAttribute);\n        geometry.setAttribute('normal', normalAttribute);\n        geometry.setAttribute('uv', uvAttribute);\n        if (colorAttribute) geometry.setAttribute('color', colorAttribute); // \"solid\" influences the material so let's store it for later use\n\n        geometry._solid = solid;\n        geometry._type = 'mesh';\n        return geometry;\n      }\n\n      function buildExtrusionNode(node) {\n        var crossSection = [1, 1, 1, -1, -1, -1, -1, 1, 1, 1];\n        var spine = [0, 0, 0, 0, 1, 0];\n        var scale;\n        var orientation;\n        var beginCap = true;\n        var ccw = true;\n        var creaseAngle = 0;\n        var endCap = true;\n        var solid = true;\n        var fields = node.fields;\n\n        for (let i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'beginCap':\n              beginCap = fieldValues[0];\n              break;\n\n            case 'ccw':\n              ccw = fieldValues[0];\n              break;\n\n            case 'convex':\n              // field not supported\n              break;\n\n            case 'creaseAngle':\n              creaseAngle = fieldValues[0];\n              break;\n\n            case 'crossSection':\n              crossSection = fieldValues;\n              break;\n\n            case 'endCap':\n              endCap = fieldValues[0];\n              break;\n\n            case 'orientation':\n              orientation = fieldValues;\n              break;\n\n            case 'scale':\n              scale = fieldValues;\n              break;\n\n            case 'solid':\n              solid = fieldValues[0];\n              break;\n\n            case 'spine':\n              spine = fieldValues; // only extrusion along the Y-axis are supported so far\n\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var crossSectionClosed = crossSection[0] === crossSection[crossSection.length - 2] && crossSection[1] === crossSection[crossSection.length - 1]; // vertices\n\n        var vertices = [];\n        var spineVector = new Vector3();\n        var scaling = new Vector3();\n        var axis = new Vector3();\n        var vertex = new Vector3();\n        var quaternion = new Quaternion();\n\n        for (let i = 0, j = 0, o = 0, il = spine.length; i < il; i += 3, j += 2, o += 4) {\n          spineVector.fromArray(spine, i);\n          scaling.x = scale ? scale[j + 0] : 1;\n          scaling.y = 1;\n          scaling.z = scale ? scale[j + 1] : 1;\n          axis.x = orientation ? orientation[o + 0] : 0;\n          axis.y = orientation ? orientation[o + 1] : 0;\n          axis.z = orientation ? orientation[o + 2] : 1;\n          var angle = orientation ? orientation[o + 3] : 0;\n\n          for (let k = 0, kl = crossSection.length; k < kl; k += 2) {\n            vertex.x = crossSection[k + 0];\n            vertex.y = 0;\n            vertex.z = crossSection[k + 1]; // scale\n\n            vertex.multiply(scaling); // rotate\n\n            quaternion.setFromAxisAngle(axis, angle);\n            vertex.applyQuaternion(quaternion); // translate\n\n            vertex.add(spineVector);\n            vertices.push(vertex.x, vertex.y, vertex.z);\n          }\n        } // indices\n\n\n        var indices = [];\n        var spineCount = spine.length / 3;\n        var crossSectionCount = crossSection.length / 2;\n\n        for (let i = 0; i < spineCount - 1; i++) {\n          for (let j = 0; j < crossSectionCount - 1; j++) {\n            var a = j + i * crossSectionCount;\n            var b = j + 1 + i * crossSectionCount;\n            var c = j + (i + 1) * crossSectionCount;\n            var d = j + 1 + (i + 1) * crossSectionCount;\n\n            if (j === crossSectionCount - 2 && crossSectionClosed === true) {\n              b = i * crossSectionCount;\n              d = (i + 1) * crossSectionCount;\n            }\n\n            if (ccw === true) {\n              indices.push(a, b, c);\n              indices.push(c, b, d);\n            } else {\n              indices.push(a, c, b);\n              indices.push(c, d, b);\n            }\n          }\n        } // triangulate cap\n\n\n        if (beginCap === true || endCap === true) {\n          var contour = [];\n\n          for (let i = 0, l = crossSection.length; i < l; i += 2) {\n            contour.push(new Vector2(crossSection[i], crossSection[i + 1]));\n          }\n\n          var faces = ShapeUtils.triangulateShape(contour, []);\n          var capIndices = [];\n\n          for (let i = 0, l = faces.length; i < l; i++) {\n            var face = faces[i];\n            capIndices.push(face[0], face[1], face[2]);\n          } // begin cap\n\n\n          if (beginCap === true) {\n            for (let i = 0, l = capIndices.length; i < l; i += 3) {\n              if (ccw === true) {\n                indices.push(capIndices[i + 0], capIndices[i + 1], capIndices[i + 2]);\n              } else {\n                indices.push(capIndices[i + 0], capIndices[i + 2], capIndices[i + 1]);\n              }\n            }\n          } // end cap\n\n\n          if (endCap === true) {\n            var indexOffset = crossSectionCount * (spineCount - 1); // references to the first vertex of the last cross section\n\n            for (let i = 0, l = capIndices.length; i < l; i += 3) {\n              if (ccw === true) {\n                indices.push(indexOffset + capIndices[i + 0], indexOffset + capIndices[i + 2], indexOffset + capIndices[i + 1]);\n              } else {\n                indices.push(indexOffset + capIndices[i + 0], indexOffset + capIndices[i + 1], indexOffset + capIndices[i + 2]);\n              }\n            }\n          }\n        }\n\n        var positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n        var normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n        var geometry = new BufferGeometry();\n        geometry.setAttribute('position', positionAttribute);\n        geometry.setAttribute('normal', normalAttribute); // no uvs yet\n        // \"solid\" influences the material so let's store it for later use\n\n        geometry._solid = solid;\n        geometry._type = 'mesh';\n        return geometry;\n      } // helper functions\n\n\n      function resolveUSE(identifier) {\n        var node = nodeMap[identifier];\n        var build = getNode(node); // because the same 3D objects can have different transformations, it's necessary to clone them.\n        // materials can be influenced by the geometry (e.g. vertex normals). cloning is necessary to avoid\n        // any side effects\n\n        return build.isObject3D || build.isMaterial ? build.clone() : build;\n      }\n\n      function parseFieldChildren(children, owner) {\n        for (let i = 0, l = children.length; i < l; i++) {\n          var object = getNode(children[i]);\n          if (object instanceof Object3D) owner.add(object);\n        }\n      }\n\n      function triangulateFaceIndex(index, ccw) {\n        var indices = []; // since face defintions can have more than three vertices, it's necessary to\n        // perform a simple triangulation\n\n        var start = 0;\n\n        for (let i = 0, l = index.length; i < l; i++) {\n          var i1 = index[start];\n          var i2 = index[i + (ccw ? 1 : 2)];\n          var i3 = index[i + (ccw ? 2 : 1)];\n          indices.push(i1, i2, i3); // an index of -1 indicates that the current face has ended and the next one begins\n\n          if (index[i + 3] === -1 || i + 3 >= l) {\n            i += 3;\n            start = i + 1;\n          }\n        }\n\n        return indices;\n      }\n\n      function triangulateFaceData(data, index) {\n        var triangulatedData = [];\n        var start = 0;\n\n        for (let i = 0, l = index.length; i < l; i++) {\n          var stride = start * 3;\n          var x = data[stride];\n          var y = data[stride + 1];\n          var z = data[stride + 2];\n          triangulatedData.push(x, y, z); // an index of -1 indicates that the current face has ended and the next one begins\n\n          if (index[i + 3] === -1 || i + 3 >= l) {\n            i += 3;\n            start++;\n          }\n        }\n\n        return triangulatedData;\n      }\n\n      function flattenData(data, index) {\n        var flattenData = [];\n\n        for (let i = 0, l = index.length; i < l; i++) {\n          var i1 = index[i];\n          var stride = i1 * 3;\n          var x = data[stride];\n          var y = data[stride + 1];\n          var z = data[stride + 2];\n          flattenData.push(x, y, z);\n        }\n\n        return flattenData;\n      }\n\n      function expandLineIndex(index) {\n        var indices = [];\n\n        for (let i = 0, l = index.length; i < l; i++) {\n          var i1 = index[i];\n          var i2 = index[i + 1];\n          indices.push(i1, i2); // an index of -1 indicates that the current line has ended and the next one begins\n\n          if (index[i + 2] === -1 || i + 2 >= l) {\n            i += 2;\n          }\n        }\n\n        return indices;\n      }\n\n      function expandLineData(data, index) {\n        var triangulatedData = [];\n        var start = 0;\n\n        for (let i = 0, l = index.length; i < l; i++) {\n          var stride = start * 3;\n          var x = data[stride];\n          var y = data[stride + 1];\n          var z = data[stride + 2];\n          triangulatedData.push(x, y, z); // an index of -1 indicates that the current line has ended and the next one begins\n\n          if (index[i + 2] === -1 || i + 2 >= l) {\n            i += 2;\n            start++;\n          }\n        }\n\n        return triangulatedData;\n      }\n\n      var vA = new Vector3();\n      var vB = new Vector3();\n      var vC = new Vector3();\n      var uvA = new Vector2();\n      var uvB = new Vector2();\n      var uvC = new Vector2();\n\n      function computeAttributeFromIndexedData(coordIndex, index, data, itemSize) {\n        var array = []; // we use the coordIndex.length as delimiter since normalIndex must contain at least as many indices\n\n        for (let i = 0, l = coordIndex.length; i < l; i += 3) {\n          var a = index[i];\n          var b = index[i + 1];\n          var c = index[i + 2];\n\n          if (itemSize === 2) {\n            uvA.fromArray(data, a * itemSize);\n            uvB.fromArray(data, b * itemSize);\n            uvC.fromArray(data, c * itemSize);\n            array.push(uvA.x, uvA.y);\n            array.push(uvB.x, uvB.y);\n            array.push(uvC.x, uvC.y);\n          } else {\n            vA.fromArray(data, a * itemSize);\n            vB.fromArray(data, b * itemSize);\n            vC.fromArray(data, c * itemSize);\n            array.push(vA.x, vA.y, vA.z);\n            array.push(vB.x, vB.y, vB.z);\n            array.push(vC.x, vC.y, vC.z);\n          }\n        }\n\n        return new Float32BufferAttribute(array, itemSize);\n      }\n\n      function computeAttributeFromFaceData(index, faceData) {\n        var array = [];\n\n        for (let i = 0, j = 0, l = index.length; i < l; i += 3, j++) {\n          vA.fromArray(faceData, j * 3);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vA.x, vA.y, vA.z);\n        }\n\n        return new Float32BufferAttribute(array, 3);\n      }\n\n      function computeAttributeFromLineData(index, lineData) {\n        var array = [];\n\n        for (let i = 0, j = 0, l = index.length; i < l; i += 2, j++) {\n          vA.fromArray(lineData, j * 3);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vA.x, vA.y, vA.z);\n        }\n\n        return new Float32BufferAttribute(array, 3);\n      }\n\n      function toNonIndexedAttribute(indices, attribute) {\n        var array = attribute.array;\n        var itemSize = attribute.itemSize;\n        var array2 = new array.constructor(indices.length * itemSize);\n        var index = 0,\n            index2 = 0;\n\n        for (let i = 0, l = indices.length; i < l; i++) {\n          index = indices[i] * itemSize;\n\n          for (let j = 0; j < itemSize; j++) {\n            array2[index2++] = array[index++];\n          }\n        }\n\n        return new Float32BufferAttribute(array2, itemSize);\n      }\n\n      var ab = new Vector3();\n      var cb = new Vector3();\n\n      function computeNormalAttribute(index, coord, creaseAngle) {\n        var faces = [];\n        var vertexNormals = {}; // prepare face and raw vertex normals\n\n        for (let i = 0, l = index.length; i < l; i += 3) {\n          var a = index[i];\n          var b = index[i + 1];\n          var c = index[i + 2];\n          var face = new Face(a, b, c);\n          vA.fromArray(coord, a * 3);\n          vB.fromArray(coord, b * 3);\n          vC.fromArray(coord, c * 3);\n          cb.subVectors(vC, vB);\n          ab.subVectors(vA, vB);\n          cb.cross(ab);\n          cb.normalize();\n          face.normal.copy(cb);\n          if (vertexNormals[a] === undefined) vertexNormals[a] = [];\n          if (vertexNormals[b] === undefined) vertexNormals[b] = [];\n          if (vertexNormals[c] === undefined) vertexNormals[c] = [];\n          vertexNormals[a].push(face.normal);\n          vertexNormals[b].push(face.normal);\n          vertexNormals[c].push(face.normal);\n          faces.push(face);\n        } // compute vertex normals and build final geometry\n\n\n        var normals = [];\n\n        for (let i = 0, l = faces.length; i < l; i++) {\n          var face = faces[i];\n          var nA = weightedNormal(vertexNormals[face.a], face.normal, creaseAngle);\n          var nB = weightedNormal(vertexNormals[face.b], face.normal, creaseAngle);\n          var nC = weightedNormal(vertexNormals[face.c], face.normal, creaseAngle);\n          vA.fromArray(coord, face.a * 3);\n          vB.fromArray(coord, face.b * 3);\n          vC.fromArray(coord, face.c * 3);\n          normals.push(nA.x, nA.y, nA.z);\n          normals.push(nB.x, nB.y, nB.z);\n          normals.push(nC.x, nC.y, nC.z);\n        }\n\n        return new Float32BufferAttribute(normals, 3);\n      }\n\n      function weightedNormal(normals, vector, creaseAngle) {\n        var normal = new Vector3();\n\n        if (creaseAngle === 0) {\n          normal.copy(vector);\n        } else {\n          for (let i = 0, l = normals.length; i < l; i++) {\n            if (normals[i].angleTo(vector) < creaseAngle) {\n              normal.add(normals[i]);\n            }\n          }\n        }\n\n        return normal.normalize();\n      }\n\n      function toColorArray(colors) {\n        var array = [];\n\n        for (let i = 0, l = colors.length; i < l; i += 3) {\n          array.push(new Color(colors[i], colors[i + 1], colors[i + 2]));\n        }\n\n        return array;\n      }\n      /**\n       * Vertically paints the faces interpolating between the\n       * specified colors at the specified angels. This is used for the Background\n       * node, but could be applied to other nodes with multiple faces as well.\n       *\n       * When used with the Background node, default is directionIsDown is true if\n       * interpolating the skyColor down from the Zenith. When interpolationg up from\n       * the Nadir i.e. interpolating the groundColor, the directionIsDown is false.\n       *\n       * The first angle is never specified, it is the Zenith (0 rad). Angles are specified\n       * in radians. The geometry is thought a sphere, but could be anything. The color interpolation\n       * is linear along the Y axis in any case.\n       *\n       * You must specify one more color than you have angles at the beginning of the colors array.\n       * This is the color of the Zenith (the top of the shape).\n       *\n       * @param {BufferGeometry} geometry\n       * @param {number} radius\n       * @param {array} angles\n       * @param {array} colors\n       * @param {boolean} topDown - Whether to work top down or bottom up.\n       */\n\n\n      function paintFaces(geometry, radius, angles, colors, topDown) {\n        // compute threshold values\n        var thresholds = [];\n        var startAngle = topDown === true ? 0 : Math.PI;\n\n        for (let i = 0, l = colors.length; i < l; i++) {\n          var angle = i === 0 ? 0 : angles[i - 1];\n          angle = topDown === true ? angle : startAngle - angle;\n          var point = new Vector3();\n          point.setFromSphericalCoords(radius, angle, 0);\n          thresholds.push(point);\n        } // generate vertex colors\n\n\n        var indices = geometry.index;\n        var positionAttribute = geometry.attributes.position;\n        var colorAttribute = new BufferAttribute(new Float32Array(geometry.attributes.position.count * 3), 3);\n        var position = new Vector3();\n        var color = new Color();\n\n        for (let i = 0; i < indices.count; i++) {\n          var index = indices.getX(i);\n          position.fromBufferAttribute(positionAttribute, index);\n          var thresholdIndexA, thresholdIndexB;\n          var t = 1;\n\n          for (let j = 1; j < thresholds.length; j++) {\n            thresholdIndexA = j - 1;\n            thresholdIndexB = j;\n            var thresholdA = thresholds[thresholdIndexA];\n            var thresholdB = thresholds[thresholdIndexB];\n\n            if (topDown === true) {\n              // interpolation for sky color\n              if (position.y <= thresholdA.y && position.y > thresholdB.y) {\n                t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n                break;\n              }\n            } else {\n              // interpolation for ground color\n              if (position.y >= thresholdA.y && position.y < thresholdB.y) {\n                t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n                break;\n              }\n            }\n          }\n\n          var colorA = colors[thresholdIndexA];\n          var colorB = colors[thresholdIndexB];\n          color.copy(colorA).lerp(colorB, t);\n          colorAttribute.setXYZ(index, color.r, color.g, color.b);\n        }\n\n        geometry.setAttribute('color', colorAttribute);\n      } //\n\n\n      var textureLoader = new TextureLoader(this.manager);\n      textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin); // check version (only 2.0 is supported)\n\n      if (data.indexOf('#VRML V2.0') === -1) {\n        throw Error('THREE.VRMLLexer: Version of VRML asset not supported.');\n      } // create JSON representing the tree structure of the VRML asset\n\n\n      var tree = generateVRMLTree(data); // parse the tree structure to a three.js scene\n\n      var scene = parseTree(tree);\n      return scene;\n    }\n  });\n\n  function VRMLLexer(tokens) {\n    this.lexer = new Lexer(tokens); // eslint-disable-line no-undef\n  }\n\n  VRMLLexer.prototype = {\n    constructor: VRMLLexer,\n    lex: function (inputText) {\n      var lexingResult = this.lexer.tokenize(inputText);\n\n      if (lexingResult.errors.length > 0) {\n        console.error(lexingResult.errors);\n        throw Error('THREE.VRMLLexer: Lexing errors detected.');\n      }\n\n      return lexingResult;\n    }\n  };\n\n  function VRMLParser(tokenVocabulary) {\n    Parser.call(this, tokenVocabulary); // eslint-disable-line no-undef\n\n    var $ = this;\n    var Version = tokenVocabulary['Version'];\n    var LCurly = tokenVocabulary['LCurly'];\n    var RCurly = tokenVocabulary['RCurly'];\n    var LSquare = tokenVocabulary['LSquare'];\n    var RSquare = tokenVocabulary['RSquare'];\n    var Identifier = tokenVocabulary['Identifier'];\n    var RouteIdentifier = tokenVocabulary['RouteIdentifier'];\n    var StringLiteral = tokenVocabulary['StringLiteral'];\n    var HexLiteral = tokenVocabulary['HexLiteral'];\n    var NumberLiteral = tokenVocabulary['NumberLiteral'];\n    var TrueLiteral = tokenVocabulary['TrueLiteral'];\n    var FalseLiteral = tokenVocabulary['FalseLiteral'];\n    var NullLiteral = tokenVocabulary['NullLiteral'];\n    var DEF = tokenVocabulary['DEF'];\n    var USE = tokenVocabulary['USE'];\n    var ROUTE = tokenVocabulary['ROUTE'];\n    var TO = tokenVocabulary['TO'];\n    var NodeName = tokenVocabulary['NodeName'];\n    $.RULE('vrml', function () {\n      $.SUBRULE($.version);\n      $.AT_LEAST_ONE(function () {\n        $.SUBRULE($.node);\n      });\n      $.MANY(function () {\n        $.SUBRULE($.route);\n      });\n    });\n    $.RULE('version', function () {\n      $.CONSUME(Version);\n    });\n    $.RULE('node', function () {\n      $.OPTION(function () {\n        $.SUBRULE($.def);\n      });\n      $.CONSUME(NodeName);\n      $.CONSUME(LCurly);\n      $.MANY(function () {\n        $.SUBRULE($.field);\n      });\n      $.CONSUME(RCurly);\n    });\n    $.RULE('field', function () {\n      $.CONSUME(Identifier);\n      $.OR2([{\n        ALT: function () {\n          $.SUBRULE($.singleFieldValue);\n        }\n      }, {\n        ALT: function () {\n          $.SUBRULE($.multiFieldValue);\n        }\n      }]);\n    });\n    $.RULE('def', function () {\n      $.CONSUME(DEF);\n      $.OR([{\n        ALT: function () {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function () {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('use', function () {\n      $.CONSUME(USE);\n      $.OR([{\n        ALT: function () {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function () {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('singleFieldValue', function () {\n      $.AT_LEAST_ONE(function () {\n        $.OR([{\n          ALT: function () {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function () {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(TrueLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(FalseLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n    });\n    $.RULE('multiFieldValue', function () {\n      $.CONSUME(LSquare);\n      $.MANY(function () {\n        $.OR([{\n          ALT: function () {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function () {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n      $.CONSUME(RSquare);\n    });\n    $.RULE('route', function () {\n      $.CONSUME(ROUTE);\n      $.CONSUME(RouteIdentifier);\n      $.CONSUME(TO);\n      $.CONSUME2(RouteIdentifier);\n    });\n    this.performSelfAnalysis();\n  }\n\n  VRMLParser.prototype = Object.create(Parser.prototype); // eslint-disable-line no-undef\n\n  VRMLParser.prototype.constructor = VRMLParser;\n\n  function Face(a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.normal = new Vector3();\n  }\n\n  var TEXTURE_TYPE = {\n    INTENSITY: 1,\n    INTENSITY_ALPHA: 2,\n    RGB: 3,\n    RGBA: 4\n  };\n  return VRMLLoader;\n}();\n\nexport { VRMLLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}