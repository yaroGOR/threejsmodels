{"ast":null,"code":"import { Mesh, Color, Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, WebGLRenderTarget, MathUtils, ShaderMaterial, UniformsUtils, LinearFilter, RGBFormat } from 'three';\n\nvar Reflector = function Reflector(geometry, options) {\n  Mesh.call(this, geometry);\n  this.type = 'Reflector';\n  var scope = this;\n  options = options || {};\n  var color = options.color !== undefined ? new Color(options.color) : new Color(0x7f7f7f);\n  var textureWidth = options.textureWidth || 512;\n  var textureHeight = options.textureHeight || 512;\n  var clipBias = options.clipBias || 0;\n  var shader = options.shader || Reflector.ReflectorShader; //\n\n  var reflectorPlane = new Plane();\n  var normal = new Vector3();\n  var reflectorWorldPosition = new Vector3();\n  var cameraWorldPosition = new Vector3();\n  var rotationMatrix = new Matrix4();\n  var lookAtPosition = new Vector3(0, 0, -1);\n  var clipPlane = new Vector4();\n  var view = new Vector3();\n  var target = new Vector3();\n  var q = new Vector4();\n  var textureMatrix = new Matrix4();\n  var virtualCamera = new PerspectiveCamera();\n  var parameters = {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBFormat\n  };\n  var renderTarget = new WebGLRenderTarget(textureWidth, textureHeight, parameters);\n\n  if (!MathUtils.isPowerOfTwo(textureWidth) || !MathUtils.isPowerOfTwo(textureHeight)) {\n    renderTarget.texture.generateMipmaps = false;\n  }\n\n  var material = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(shader.uniforms),\n    fragmentShader: shader.fragmentShader,\n    vertexShader: shader.vertexShader\n  });\n  material.uniforms['tDiffuse'].value = renderTarget.texture;\n  material.uniforms['color'].value = color;\n  material.uniforms['textureMatrix'].value = textureMatrix;\n  this.material = material;\n\n  this.onBeforeRender = function (renderer, scene, camera) {\n    reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(scope.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(scope.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    var projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0 - clipBias;\n    projectionMatrix.elements[14] = clipPlane.w; // Render\n\n    renderTarget.texture.encoding = renderer.outputEncoding;\n    scope.visible = false;\n    var currentRenderTarget = renderer.getRenderTarget();\n    var currentXrEnabled = renderer.xr.enabled;\n    var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n    renderer.xr.enabled = false; // Avoid camera modification\n\n    renderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n    renderer.setRenderTarget(renderTarget);\n    renderer.state.buffers.depth.setMask(true); // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n    if (renderer.autoClear === false) renderer.clear();\n    renderer.render(scene, virtualCamera);\n    renderer.xr.enabled = currentXrEnabled;\n    renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    renderer.setRenderTarget(currentRenderTarget); // Restore viewport\n\n    var viewport = camera.viewport;\n\n    if (viewport !== undefined) {\n      renderer.state.viewport(viewport);\n    }\n\n    scope.visible = true;\n  };\n\n  this.getRenderTarget = function () {\n    return renderTarget;\n  };\n};\n\nReflector.prototype = Object.create(Mesh.prototype);\nReflector.prototype.constructor = Reflector;\nReflector.ReflectorShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader: ['uniform mat4 textureMatrix;', 'varying vec4 vUv;', 'void main() {', '\tvUv = textureMatrix * vec4( position, 1.0 );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 color;', 'uniform sampler2D tDiffuse;', 'varying vec4 vUv;', 'float blendOverlay( float base, float blend ) {', '\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );', '}', 'vec3 blendOverlay( vec3 base, vec3 blend ) {', '\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );', '}', 'void main() {', '\tvec4 base = texture2DProj( tDiffuse, vUv );', '\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );', '}'].join('\\n')\n};\nexport { Reflector };","map":{"version":3,"names":["Mesh","Color","Plane","Vector3","Matrix4","Vector4","PerspectiveCamera","WebGLRenderTarget","MathUtils","ShaderMaterial","UniformsUtils","LinearFilter","RGBFormat","Reflector","geometry","options","call","type","scope","color","undefined","textureWidth","textureHeight","clipBias","shader","ReflectorShader","reflectorPlane","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","virtualCamera","parameters","minFilter","magFilter","format","renderTarget","isPowerOfTwo","texture","generateMipmaps","material","uniforms","clone","fragmentShader","vertexShader","value","onBeforeRender","renderer","scene","camera","setFromMatrixPosition","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","Math","sign","elements","w","multiplyScalar","encoding","outputEncoding","visible","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","viewport","prototype","Object","create","constructor","tDiffuse","join"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/objects/Reflector.js"],"sourcesContent":["import { Mesh, Color, Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, WebGLRenderTarget, MathUtils, ShaderMaterial, UniformsUtils, LinearFilter, RGBFormat } from 'three';\n\nvar Reflector = function (geometry, options) {\n  Mesh.call(this, geometry);\n  this.type = 'Reflector';\n  var scope = this;\n  options = options || {};\n  var color = options.color !== undefined ? new Color(options.color) : new Color(0x7f7f7f);\n  var textureWidth = options.textureWidth || 512;\n  var textureHeight = options.textureHeight || 512;\n  var clipBias = options.clipBias || 0;\n  var shader = options.shader || Reflector.ReflectorShader; //\n\n  var reflectorPlane = new Plane();\n  var normal = new Vector3();\n  var reflectorWorldPosition = new Vector3();\n  var cameraWorldPosition = new Vector3();\n  var rotationMatrix = new Matrix4();\n  var lookAtPosition = new Vector3(0, 0, -1);\n  var clipPlane = new Vector4();\n  var view = new Vector3();\n  var target = new Vector3();\n  var q = new Vector4();\n  var textureMatrix = new Matrix4();\n  var virtualCamera = new PerspectiveCamera();\n  var parameters = {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBFormat\n  };\n  var renderTarget = new WebGLRenderTarget(textureWidth, textureHeight, parameters);\n\n  if (!MathUtils.isPowerOfTwo(textureWidth) || !MathUtils.isPowerOfTwo(textureHeight)) {\n    renderTarget.texture.generateMipmaps = false;\n  }\n\n  var material = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(shader.uniforms),\n    fragmentShader: shader.fragmentShader,\n    vertexShader: shader.vertexShader\n  });\n  material.uniforms['tDiffuse'].value = renderTarget.texture;\n  material.uniforms['color'].value = color;\n  material.uniforms['textureMatrix'].value = textureMatrix;\n  this.material = material;\n\n  this.onBeforeRender = function (renderer, scene, camera) {\n    reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(scope.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(scope.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    var projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0 - clipBias;\n    projectionMatrix.elements[14] = clipPlane.w; // Render\n\n    renderTarget.texture.encoding = renderer.outputEncoding;\n    scope.visible = false;\n    var currentRenderTarget = renderer.getRenderTarget();\n    var currentXrEnabled = renderer.xr.enabled;\n    var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n    renderer.xr.enabled = false; // Avoid camera modification\n\n    renderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n    renderer.setRenderTarget(renderTarget);\n    renderer.state.buffers.depth.setMask(true); // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n    if (renderer.autoClear === false) renderer.clear();\n    renderer.render(scene, virtualCamera);\n    renderer.xr.enabled = currentXrEnabled;\n    renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    renderer.setRenderTarget(currentRenderTarget); // Restore viewport\n\n    var viewport = camera.viewport;\n\n    if (viewport !== undefined) {\n      renderer.state.viewport(viewport);\n    }\n\n    scope.visible = true;\n  };\n\n  this.getRenderTarget = function () {\n    return renderTarget;\n  };\n};\n\nReflector.prototype = Object.create(Mesh.prototype);\nReflector.prototype.constructor = Reflector;\nReflector.ReflectorShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader: ['uniform mat4 textureMatrix;', 'varying vec4 vUv;', 'void main() {', '\tvUv = textureMatrix * vec4( position, 1.0 );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 color;', 'uniform sampler2D tDiffuse;', 'varying vec4 vUv;', 'float blendOverlay( float base, float blend ) {', '\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );', '}', 'vec3 blendOverlay( vec3 base, vec3 blend ) {', '\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );', '}', 'void main() {', '\tvec4 base = texture2DProj( tDiffuse, vUv );', '\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );', '}'].join('\\n')\n};\n\nexport { Reflector };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}