{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { VERSION, BaseRegExpVisitor } from \"regexp-to-ast\";\nimport { forEach, contains, PRINT_ERROR, PRINT_WARNING, find, isArray, every, values } from \"../utils/utils\";\nimport { getRegExpAst } from \"./reg_exp_parser\";\nimport { charCodeToOptimizedIndex, minOptimizationVal } from \"./lexer\";\nvar complementErrorMessage = \"Complement Sets are not supported for first char optimization\";\nexport var failedOptimizationPrefixMsg = 'Unable to use \"first char\" lexer optimizations:\\n';\nexport function getOptimizedStartCodesIndices(regExp, ensureOptimizations) {\n  if (ensureOptimizations === void 0) {\n    ensureOptimizations = false;\n  }\n\n  try {\n    var ast = getRegExpAst(regExp);\n    var firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase);\n    return firstChars;\n  } catch (e) {\n    /* istanbul ignore next */\n    // Testing this relies on the regexp-to-ast library having a bug... */\n    // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n    if (e.message === complementErrorMessage) {\n      if (ensureOptimizations) {\n        PRINT_WARNING(\"\" + failedOptimizationPrefixMsg + (\"\\tUnable to optimize: < \" + regExp.toString() + \" >\\n\") + \"\\tComplement Sets cannot be automatically optimized.\\n\" + \"\\tThis will disable the lexer's first char optimizations.\\n\" + \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\");\n      }\n    } else {\n      var msgSuffix = \"\";\n\n      if (ensureOptimizations) {\n        msgSuffix = \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" + \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n      }\n\n      PRINT_ERROR(failedOptimizationPrefixMsg + \"\\n\" + (\"\\tFailed parsing: < \" + regExp.toString() + \" >\\n\") + (\"\\tUsing the regexp-to-ast library version: \" + VERSION + \"\\n\") + \"\\tPlease open an issue at: https://github.com/bd82/regexp-to-ast/issues\" + msgSuffix);\n    }\n  }\n\n  return [];\n}\nexport function firstCharOptimizedIndices(ast, result, ignoreCase) {\n  switch (ast.type) {\n    case \"Disjunction\":\n      for (var i = 0; i < ast.value.length; i++) {\n        firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n      }\n\n      break;\n\n    case \"Alternative\":\n      var terms = ast.value;\n\n      for (var i = 0; i < terms.length; i++) {\n        var term = terms[i]; // skip terms that cannot effect the first char results\n\n        switch (term.type) {\n          case \"EndAnchor\": // A group back reference cannot affect potential starting char.\n          // because if a back reference is the first production than automatically\n          // the group being referenced has had to come BEFORE so its codes have already been added\n\n          case \"GroupBackReference\": // assertions do not affect potential starting codes\n\n          case \"Lookahead\":\n          case \"NegativeLookahead\":\n          case \"StartAnchor\":\n          case \"WordBoundary\":\n          case \"NonWordBoundary\":\n            continue;\n        }\n\n        var atom = term;\n\n        switch (atom.type) {\n          case \"Character\":\n            addOptimizedIdxToResult(atom.value, result, ignoreCase);\n            break;\n\n          case \"Set\":\n            if (atom.complement === true) {\n              throw Error(complementErrorMessage);\n            }\n\n            forEach(atom.value, function (code) {\n              if (typeof code === \"number\") {\n                addOptimizedIdxToResult(code, result, ignoreCase);\n              } else {\n                // range\n                var range = code; // cannot optimize when ignoreCase is\n\n                if (ignoreCase === true) {\n                  for (var rangeCode = range.from; rangeCode <= range.to; rangeCode++) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n                } // Optimization (2 orders of magnitude less work for very large ranges)\n                else {\n                  // handle unoptimized values\n                  for (var rangeCode = range.from; rangeCode <= range.to && rangeCode < minOptimizationVal; rangeCode++) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  } // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n\n\n                  if (range.to >= minOptimizationVal) {\n                    var minUnOptVal = range.from >= minOptimizationVal ? range.from : minOptimizationVal;\n                    var maxUnOptVal = range.to;\n                    var minOptIdx = charCodeToOptimizedIndex(minUnOptVal);\n                    var maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal);\n\n                    for (var currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {\n                      result[currOptIdx] = currOptIdx;\n                    }\n                  }\n                }\n              }\n            });\n            break;\n\n          case \"Group\":\n            firstCharOptimizedIndices(atom.value, result, ignoreCase);\n            break;\n\n          /* istanbul ignore next */\n\n          default:\n            throw Error(\"Non Exhaustive Match\");\n        } // reached a mandatory production, no more **start** codes can be found on this alternative\n\n\n        var isOptionalQuantifier = atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n\n        if ( // A group may be optional due to empty contents /(?:)/\n        // or if everything inside it is optional /((a)?)/\n        atom.type === \"Group\" && isWholeOptional(atom) === false || // If this term is not a group it may only be optional if it has an optional quantifier\n        atom.type !== \"Group\" && isOptionalQuantifier === false) {\n          break;\n        }\n      }\n\n      break;\n\n    /* istanbul ignore next */\n\n    default:\n      throw Error(\"non exhaustive match!\");\n  } // console.log(Object.keys(result).length)\n\n\n  return values(result);\n}\n\nfunction addOptimizedIdxToResult(code, result, ignoreCase) {\n  var optimizedCharIdx = charCodeToOptimizedIndex(code);\n  result[optimizedCharIdx] = optimizedCharIdx;\n\n  if (ignoreCase === true) {\n    handleIgnoreCase(code, result);\n  }\n}\n\nfunction handleIgnoreCase(code, result) {\n  var char = String.fromCharCode(code);\n  var upperChar = char.toUpperCase();\n  /* istanbul ignore else */\n\n  if (upperChar !== char) {\n    var optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0));\n    result[optimizedCharIdx] = optimizedCharIdx;\n  } else {\n    var lowerChar = char.toLowerCase();\n\n    if (lowerChar !== char) {\n      var optimizedCharIdx = charCodeToOptimizedIndex(lowerChar.charCodeAt(0));\n      result[optimizedCharIdx] = optimizedCharIdx;\n    }\n  }\n}\n\nfunction findCode(setNode, targetCharCodes) {\n  return find(setNode.value, function (codeOrRange) {\n    if (typeof codeOrRange === \"number\") {\n      return contains(targetCharCodes, codeOrRange);\n    } else {\n      // range\n      var range_1 = codeOrRange;\n      return find(targetCharCodes, function (targetCode) {\n        return range_1.from <= targetCode && targetCode <= range_1.to;\n      }) !== undefined;\n    }\n  });\n}\n\nfunction isWholeOptional(ast) {\n  if (ast.quantifier && ast.quantifier.atLeast === 0) {\n    return true;\n  }\n\n  if (!ast.value) {\n    return false;\n  }\n\n  return isArray(ast.value) ? every(ast.value, isWholeOptional) : isWholeOptional(ast.value);\n}\n\nvar CharCodeFinder =\n/** @class */\nfunction (_super) {\n  __extends(CharCodeFinder, _super);\n\n  function CharCodeFinder(targetCharCodes) {\n    var _this = _super.call(this) || this;\n\n    _this.targetCharCodes = targetCharCodes;\n    _this.found = false;\n    return _this;\n  }\n\n  CharCodeFinder.prototype.visitChildren = function (node) {\n    // No need to keep looking...\n    if (this.found === true) {\n      return;\n    } // switch lookaheads as they do not actually consume any characters thus\n    // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n\n\n    switch (node.type) {\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        return;\n\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        return;\n    }\n\n    _super.prototype.visitChildren.call(this, node);\n  };\n\n  CharCodeFinder.prototype.visitCharacter = function (node) {\n    if (contains(this.targetCharCodes, node.value)) {\n      this.found = true;\n    }\n  };\n\n  CharCodeFinder.prototype.visitSet = function (node) {\n    if (node.complement) {\n      if (findCode(node, this.targetCharCodes) === undefined) {\n        this.found = true;\n      }\n    } else {\n      if (findCode(node, this.targetCharCodes) !== undefined) {\n        this.found = true;\n      }\n    }\n  };\n\n  return CharCodeFinder;\n}(BaseRegExpVisitor);\n\nexport function canMatchCharCode(charCodes, pattern) {\n  if (pattern instanceof RegExp) {\n    var ast = getRegExpAst(pattern);\n    var charCodeFinder = new CharCodeFinder(charCodes);\n    charCodeFinder.visit(ast);\n    return charCodeFinder.found;\n  } else {\n    return find(pattern, function (char) {\n      return contains(charCodes, char.charCodeAt(0));\n    }) !== undefined;\n  }\n}","map":{"version":3,"mappings":"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","names":["VERSION","BaseRegExpVisitor","forEach","contains","PRINT_ERROR","PRINT_WARNING","find","isArray","every","values","getRegExpAst","charCodeToOptimizedIndex","minOptimizationVal","complementErrorMessage","failedOptimizationPrefixMsg","getOptimizedStartCodesIndices","regExp","ensureOptimizations","ast","firstChars","firstCharOptimizedIndices","value","flags","ignoreCase","e","message","toString","msgSuffix","result","type","i","length","terms","term","atom","addOptimizedIdxToResult","complement","Error","code","range","rangeCode","from","to","minUnOptVal","maxUnOptVal","minOptIdx","maxOptIdx","currOptIdx","isOptionalQuantifier","quantifier","undefined","atLeast","isWholeOptional","optimizedCharIdx","handleIgnoreCase","char","String","fromCharCode","upperChar","toUpperCase","charCodeAt","lowerChar","toLowerCase","findCode","setNode","targetCharCodes","codeOrRange","range_1","targetCode","__extends","_super","_this","CharCodeFinder","node","found","visitLookahead","visitNegativeLookahead","visitChildren","call","canMatchCharCode","charCodes","pattern","RegExp","charCodeFinder","visit"],"sourceRoot":"","sources":["../../../src/scan/reg_exp.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}