{"ast":null,"code":"import { Loader, FileLoader, BufferGeometry, BufferAttribute, Vector3, Float32BufferAttribute, LoaderUtils } from 'three';\n/**\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n *\n * Supports both binary and ASCII encoded files, with automatic detection of type.\n *\n * The loader returns a non-indexed buffer geometry.\n *\n * Limitations:\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n *  ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *  var loader = new STLLoader();\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n *    scene.add( new THREE.Mesh( geometry ) );\n *  });\n *\n * For binary STLs geometry might contain colors for vertices. To use it:\n *  // use the same code to load STL as above\n *  if (geometry.hasColors) {\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: true });\n *  } else { .... }\n *  var mesh = new THREE.Mesh( geometry, material );\n *\n * For ASCII STLs containing multiple solids, each solid is assigned to a different group.\n * Groups can be used to assign a different color by defining an array of materials with the same length of\n * geometry.groups and passing it to the Mesh constructor:\n *\n * var mesh = new THREE.Mesh( geometry, material );\n *\n * For example:\n *\n *  var materials = [];\n *  var nGeometryGroups = geometry.groups.length;\n *\n *  var colorMap = ...; // Some logic to index colors.\n *\n *  for (let i = 0; i < nGeometryGroups; i++) {\n *\n *\t\tvar material = new THREE.MeshPhongMaterial({\n *\t\t\tcolor: colorMap[i],\n *\t\t\twireframe: false\n *\t\t});\n *\n *  }\n *\n *  materials.push(material);\n *  var mesh = new THREE.Mesh(geometry, materials);\n */\n\nvar STLLoader = function STLLoader(manager) {\n  Loader.call(this, manager);\n};\n\nSTLLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: STLLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function parse(data) {\n    function isBinary(data) {\n      var expect, face_size, n_faces, reader;\n      reader = new DataView(data);\n      face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n      n_faces = reader.getUint32(80, true);\n      expect = 80 + 32 / 8 + n_faces * face_size;\n\n      if (expect === reader.byteLength) {\n        return true;\n      } // An ASCII STL data must begin with 'solid ' as the first six bytes.\n      // However, ASCII STLs lacking the SPACE after the 'd' are known to be\n      // plentiful.  So, check the first 5 bytes for 'solid'.\n      // Several encodings, such as UTF-8, precede the text with up to 5 bytes:\n      // https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\n      // Search for \"solid\" to start anywhere after those prefixes.\n      // US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\n\n\n      var solid = [115, 111, 108, 105, 100];\n\n      for (var off = 0; off < 5; off++) {\n        // If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\n        if (matchDataViewAt(solid, reader, off)) return false;\n      } // Couldn't find \"solid\" text at the beginning; it is binary STL.\n\n\n      return true;\n    }\n\n    function matchDataViewAt(query, reader, offset) {\n      // Check if each byte in query matches the corresponding byte from the current offset\n      for (var i = 0, il = query.length; i < il; i++) {\n        if (query[i] !== reader.getUint8(offset + i, false)) return false;\n      }\n\n      return true;\n    }\n\n    function parseBinary(data) {\n      var reader = new DataView(data);\n      var faces = reader.getUint32(80, true);\n      var r,\n          g,\n          b,\n          hasColors = false,\n          colors;\n      var defaultR, defaultG, defaultB, alpha; // process STL header\n      // check for default color in header (\"COLOR=rgba\" sequence).\n\n      for (var index = 0; index < 80 - 10; index++) {\n        if (reader.getUint32(index, false) == 0x434f4c4f\n        /*COLO*/\n        && reader.getUint8(index + 4) == 0x52\n        /*'R'*/\n        && reader.getUint8(index + 5) == 0x3d\n        /*'='*/\n        ) {\n          hasColors = true;\n          colors = new Float32Array(faces * 3 * 3);\n          defaultR = reader.getUint8(index + 6) / 255;\n          defaultG = reader.getUint8(index + 7) / 255;\n          defaultB = reader.getUint8(index + 8) / 255;\n          alpha = reader.getUint8(index + 9) / 255;\n        }\n      }\n\n      var dataOffset = 84;\n      var faceLength = 12 * 4 + 2;\n      var geometry = new BufferGeometry();\n      var vertices = new Float32Array(faces * 3 * 3);\n      var normals = new Float32Array(faces * 3 * 3);\n\n      for (var face = 0; face < faces; face++) {\n        var start = dataOffset + face * faceLength;\n        var normalX = reader.getFloat32(start, true);\n        var normalY = reader.getFloat32(start + 4, true);\n        var normalZ = reader.getFloat32(start + 8, true);\n\n        if (hasColors) {\n          var packedColor = reader.getUint16(start + 48, true);\n\n          if ((packedColor & 0x8000) === 0) {\n            // facet has its own unique color\n            r = (packedColor & 0x1f) / 31;\n            g = (packedColor >> 5 & 0x1f) / 31;\n            b = (packedColor >> 10 & 0x1f) / 31;\n          } else {\n            r = defaultR;\n            g = defaultG;\n            b = defaultB;\n          }\n        }\n\n        for (var i = 1; i <= 3; i++) {\n          var vertexstart = start + i * 12;\n          var componentIdx = face * 3 * 3 + (i - 1) * 3;\n          vertices[componentIdx] = reader.getFloat32(vertexstart, true);\n          vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\n          vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\n          normals[componentIdx] = normalX;\n          normals[componentIdx + 1] = normalY;\n          normals[componentIdx + 2] = normalZ;\n\n          if (hasColors) {\n            colors[componentIdx] = r;\n            colors[componentIdx + 1] = g;\n            colors[componentIdx + 2] = b;\n          }\n        }\n      }\n\n      geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n      geometry.setAttribute('normal', new BufferAttribute(normals, 3));\n\n      if (hasColors) {\n        geometry.setAttribute('color', new BufferAttribute(colors, 3));\n        geometry.hasColors = true;\n        geometry.alpha = alpha;\n      }\n\n      return geometry;\n    }\n\n    function parseASCII(data) {\n      var geometry = new BufferGeometry();\n      var patternSolid = /solid([\\s\\S]*?)endsolid/g;\n      var patternFace = /facet([\\s\\S]*?)endfacet/g;\n      var faceCounter = 0;\n      var patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n      var patternVertex = new RegExp('vertex' + patternFloat + patternFloat + patternFloat, 'g');\n      var patternNormal = new RegExp('normal' + patternFloat + patternFloat + patternFloat, 'g');\n      var vertices = [];\n      var normals = [];\n      var normal = new Vector3();\n      var result;\n      var groupCount = 0;\n      var startVertex = 0;\n      var endVertex = 0;\n\n      while ((result = patternSolid.exec(data)) !== null) {\n        startVertex = endVertex;\n        var solid = result[0];\n\n        while ((result = patternFace.exec(solid)) !== null) {\n          var vertexCountPerFace = 0;\n          var normalCountPerFace = 0;\n          var text = result[0];\n\n          while ((result = patternNormal.exec(text)) !== null) {\n            normal.x = parseFloat(result[1]);\n            normal.y = parseFloat(result[2]);\n            normal.z = parseFloat(result[3]);\n            normalCountPerFace++;\n          }\n\n          while ((result = patternVertex.exec(text)) !== null) {\n            vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n            normals.push(normal.x, normal.y, normal.z);\n            vertexCountPerFace++;\n            endVertex++;\n          } // every face have to own ONE valid normal\n\n\n          if (normalCountPerFace !== 1) {\n            console.error(\"THREE.STLLoader: Something isn't right with the normal of face number \" + faceCounter);\n          } // each face have to own THREE valid vertices\n\n\n          if (vertexCountPerFace !== 3) {\n            console.error(\"THREE.STLLoader: Something isn't right with the vertices of face number \" + faceCounter);\n          }\n\n          faceCounter++;\n        }\n\n        var start = startVertex;\n        var count = endVertex - startVertex;\n        geometry.addGroup(start, count, groupCount);\n        groupCount++;\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      return geometry;\n    }\n\n    function ensureString(buffer) {\n      if (typeof buffer !== 'string') {\n        return LoaderUtils.decodeText(new Uint8Array(buffer));\n      }\n\n      return buffer;\n    }\n\n    function ensureBinary(buffer) {\n      if (typeof buffer === 'string') {\n        var array_buffer = new Uint8Array(buffer.length);\n\n        for (var i = 0; i < buffer.length; i++) {\n          array_buffer[i] = buffer.charCodeAt(i) & 0xff; // implicitly assumes little-endian\n        }\n\n        return array_buffer.buffer || array_buffer;\n      } else {\n        return buffer;\n      }\n    } // start\n\n\n    var binData = ensureBinary(data);\n    return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\n  }\n});\nexport { STLLoader };","map":{"version":3,"names":["Loader","FileLoader","BufferGeometry","BufferAttribute","Vector3","Float32BufferAttribute","LoaderUtils","STLLoader","manager","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","isBinary","expect","face_size","n_faces","reader","DataView","getUint32","byteLength","solid","off","matchDataViewAt","query","offset","i","il","length","getUint8","parseBinary","faces","r","g","b","hasColors","colors","defaultR","defaultG","defaultB","alpha","index","Float32Array","dataOffset","faceLength","geometry","vertices","normals","face","start","normalX","getFloat32","normalY","normalZ","packedColor","getUint16","vertexstart","componentIdx","setAttribute","parseASCII","patternSolid","patternFace","faceCounter","patternFloat","source","patternVertex","RegExp","patternNormal","normal","result","groupCount","startVertex","endVertex","exec","vertexCountPerFace","normalCountPerFace","x","parseFloat","y","z","push","count","addGroup","ensureString","buffer","decodeText","Uint8Array","ensureBinary","array_buffer","charCodeAt","binData"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/loaders/STLLoader.js"],"sourcesContent":["import { Loader, FileLoader, BufferGeometry, BufferAttribute, Vector3, Float32BufferAttribute, LoaderUtils } from 'three';\n\n/**\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n *\n * Supports both binary and ASCII encoded files, with automatic detection of type.\n *\n * The loader returns a non-indexed buffer geometry.\n *\n * Limitations:\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n *  ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *  var loader = new STLLoader();\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n *    scene.add( new THREE.Mesh( geometry ) );\n *  });\n *\n * For binary STLs geometry might contain colors for vertices. To use it:\n *  // use the same code to load STL as above\n *  if (geometry.hasColors) {\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: true });\n *  } else { .... }\n *  var mesh = new THREE.Mesh( geometry, material );\n *\n * For ASCII STLs containing multiple solids, each solid is assigned to a different group.\n * Groups can be used to assign a different color by defining an array of materials with the same length of\n * geometry.groups and passing it to the Mesh constructor:\n *\n * var mesh = new THREE.Mesh( geometry, material );\n *\n * For example:\n *\n *  var materials = [];\n *  var nGeometryGroups = geometry.groups.length;\n *\n *  var colorMap = ...; // Some logic to index colors.\n *\n *  for (let i = 0; i < nGeometryGroups; i++) {\n *\n *\t\tvar material = new THREE.MeshPhongMaterial({\n *\t\t\tcolor: colorMap[i],\n *\t\t\twireframe: false\n *\t\t});\n *\n *  }\n *\n *  materials.push(material);\n *  var mesh = new THREE.Mesh(geometry, materials);\n */\n\nvar STLLoader = function (manager) {\n  Loader.call(this, manager);\n};\n\nSTLLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: STLLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function (data) {\n    function isBinary(data) {\n      var expect, face_size, n_faces, reader;\n      reader = new DataView(data);\n      face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n      n_faces = reader.getUint32(80, true);\n      expect = 80 + 32 / 8 + n_faces * face_size;\n\n      if (expect === reader.byteLength) {\n        return true;\n      } // An ASCII STL data must begin with 'solid ' as the first six bytes.\n      // However, ASCII STLs lacking the SPACE after the 'd' are known to be\n      // plentiful.  So, check the first 5 bytes for 'solid'.\n      // Several encodings, such as UTF-8, precede the text with up to 5 bytes:\n      // https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\n      // Search for \"solid\" to start anywhere after those prefixes.\n      // US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\n\n\n      var solid = [115, 111, 108, 105, 100];\n\n      for (let off = 0; off < 5; off++) {\n        // If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\n        if (matchDataViewAt(solid, reader, off)) return false;\n      } // Couldn't find \"solid\" text at the beginning; it is binary STL.\n\n\n      return true;\n    }\n\n    function matchDataViewAt(query, reader, offset) {\n      // Check if each byte in query matches the corresponding byte from the current offset\n      for (let i = 0, il = query.length; i < il; i++) {\n        if (query[i] !== reader.getUint8(offset + i, false)) return false;\n      }\n\n      return true;\n    }\n\n    function parseBinary(data) {\n      var reader = new DataView(data);\n      var faces = reader.getUint32(80, true);\n      var r,\n          g,\n          b,\n          hasColors = false,\n          colors;\n      var defaultR, defaultG, defaultB, alpha; // process STL header\n      // check for default color in header (\"COLOR=rgba\" sequence).\n\n      for (let index = 0; index < 80 - 10; index++) {\n        if (reader.getUint32(index, false) == 0x434f4c4f\n        /*COLO*/\n        && reader.getUint8(index + 4) == 0x52\n        /*'R'*/\n        && reader.getUint8(index + 5) == 0x3d\n        /*'='*/\n        ) {\n            hasColors = true;\n            colors = new Float32Array(faces * 3 * 3);\n            defaultR = reader.getUint8(index + 6) / 255;\n            defaultG = reader.getUint8(index + 7) / 255;\n            defaultB = reader.getUint8(index + 8) / 255;\n            alpha = reader.getUint8(index + 9) / 255;\n          }\n      }\n\n      var dataOffset = 84;\n      var faceLength = 12 * 4 + 2;\n      var geometry = new BufferGeometry();\n      var vertices = new Float32Array(faces * 3 * 3);\n      var normals = new Float32Array(faces * 3 * 3);\n\n      for (let face = 0; face < faces; face++) {\n        var start = dataOffset + face * faceLength;\n        var normalX = reader.getFloat32(start, true);\n        var normalY = reader.getFloat32(start + 4, true);\n        var normalZ = reader.getFloat32(start + 8, true);\n\n        if (hasColors) {\n          var packedColor = reader.getUint16(start + 48, true);\n\n          if ((packedColor & 0x8000) === 0) {\n            // facet has its own unique color\n            r = (packedColor & 0x1f) / 31;\n            g = (packedColor >> 5 & 0x1f) / 31;\n            b = (packedColor >> 10 & 0x1f) / 31;\n          } else {\n            r = defaultR;\n            g = defaultG;\n            b = defaultB;\n          }\n        }\n\n        for (let i = 1; i <= 3; i++) {\n          var vertexstart = start + i * 12;\n          var componentIdx = face * 3 * 3 + (i - 1) * 3;\n          vertices[componentIdx] = reader.getFloat32(vertexstart, true);\n          vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\n          vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\n          normals[componentIdx] = normalX;\n          normals[componentIdx + 1] = normalY;\n          normals[componentIdx + 2] = normalZ;\n\n          if (hasColors) {\n            colors[componentIdx] = r;\n            colors[componentIdx + 1] = g;\n            colors[componentIdx + 2] = b;\n          }\n        }\n      }\n\n      geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n      geometry.setAttribute('normal', new BufferAttribute(normals, 3));\n\n      if (hasColors) {\n        geometry.setAttribute('color', new BufferAttribute(colors, 3));\n        geometry.hasColors = true;\n        geometry.alpha = alpha;\n      }\n\n      return geometry;\n    }\n\n    function parseASCII(data) {\n      var geometry = new BufferGeometry();\n      var patternSolid = /solid([\\s\\S]*?)endsolid/g;\n      var patternFace = /facet([\\s\\S]*?)endfacet/g;\n      var faceCounter = 0;\n      var patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n      var patternVertex = new RegExp('vertex' + patternFloat + patternFloat + patternFloat, 'g');\n      var patternNormal = new RegExp('normal' + patternFloat + patternFloat + patternFloat, 'g');\n      var vertices = [];\n      var normals = [];\n      var normal = new Vector3();\n      var result;\n      var groupCount = 0;\n      var startVertex = 0;\n      var endVertex = 0;\n\n      while ((result = patternSolid.exec(data)) !== null) {\n        startVertex = endVertex;\n        var solid = result[0];\n\n        while ((result = patternFace.exec(solid)) !== null) {\n          var vertexCountPerFace = 0;\n          var normalCountPerFace = 0;\n          var text = result[0];\n\n          while ((result = patternNormal.exec(text)) !== null) {\n            normal.x = parseFloat(result[1]);\n            normal.y = parseFloat(result[2]);\n            normal.z = parseFloat(result[3]);\n            normalCountPerFace++;\n          }\n\n          while ((result = patternVertex.exec(text)) !== null) {\n            vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n            normals.push(normal.x, normal.y, normal.z);\n            vertexCountPerFace++;\n            endVertex++;\n          } // every face have to own ONE valid normal\n\n\n          if (normalCountPerFace !== 1) {\n            console.error(\"THREE.STLLoader: Something isn't right with the normal of face number \" + faceCounter);\n          } // each face have to own THREE valid vertices\n\n\n          if (vertexCountPerFace !== 3) {\n            console.error(\"THREE.STLLoader: Something isn't right with the vertices of face number \" + faceCounter);\n          }\n\n          faceCounter++;\n        }\n\n        var start = startVertex;\n        var count = endVertex - startVertex;\n        geometry.addGroup(start, count, groupCount);\n        groupCount++;\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      return geometry;\n    }\n\n    function ensureString(buffer) {\n      if (typeof buffer !== 'string') {\n        return LoaderUtils.decodeText(new Uint8Array(buffer));\n      }\n\n      return buffer;\n    }\n\n    function ensureBinary(buffer) {\n      if (typeof buffer === 'string') {\n        var array_buffer = new Uint8Array(buffer.length);\n\n        for (let i = 0; i < buffer.length; i++) {\n          array_buffer[i] = buffer.charCodeAt(i) & 0xff; // implicitly assumes little-endian\n        }\n\n        return array_buffer.buffer || array_buffer;\n      } else {\n        return buffer;\n      }\n    } // start\n\n\n    var binData = ensureBinary(data);\n    return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\n  }\n});\n\nexport { STLLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}