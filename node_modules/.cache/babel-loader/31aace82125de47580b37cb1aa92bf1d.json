{"ast":null,"code":"import { DepthTexture, UnsignedShortType, WebGLRenderTarget, LinearFilter, RGBAFormat, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, CustomBlending, Vector3, MathUtils, DataTexture, FloatType, RepeatWrapping } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nvar SSAOPass = function SSAOPass(scene, camera, width, height) {\n  this.width = width !== undefined ? width : 512;\n  this.height = height !== undefined ? height : 512;\n  this.clear = true;\n  this.camera = camera;\n  this.scene = scene;\n  this.kernelRadius = 8;\n  this.kernelSize = 32;\n  this.kernel = [];\n  this.noiseTexture = null;\n  this.output = 0;\n  this.minDistance = 0.005;\n  this.maxDistance = 0.1;\n  this._visibilityCache = new Map(); //\n\n  this.generateSampleKernel();\n  this.generateRandomKernelRotations(); // beauty render target\n\n  var depthTexture = new DepthTexture();\n  depthTexture.type = UnsignedShortType;\n  this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  }); // normal render target with depth buffer\n\n  this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat,\n    depthTexture: depthTexture\n  }); // ssao render target\n\n  this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\n\n  if (SSAOShader === undefined) {\n    console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n  }\n\n  this.ssaoMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOShader.defines),\n    uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n    vertexShader: SSAOShader.vertexShader,\n    fragmentShader: SSAOShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n  this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n  this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n  this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n  this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n  this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n  this.normalMaterial = new MeshNormalMaterial();\n  this.normalMaterial.blending = NoBlending; // blur material\n\n  this.blurMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOBlurShader.defines),\n    uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n    vertexShader: SSAOBlurShader.vertexShader,\n    fragmentShader: SSAOBlurShader.fragmentShader\n  });\n  this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n  this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\n\n  this.depthRenderMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAODepthShader.defines),\n    uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n    vertexShader: SSAODepthShader.vertexShader,\n    fragmentShader: SSAODepthShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n  this.copyMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    transparent: true,\n    depthTest: false,\n    depthWrite: false,\n    blendSrc: DstColorFactor,\n    blendDst: ZeroFactor,\n    blendEquation: AddEquation,\n    blendSrcAlpha: DstAlphaFactor,\n    blendDstAlpha: ZeroFactor,\n    blendEquationAlpha: AddEquation\n  });\n  this.fsQuad = new FullScreenQuad(null);\n  this.originalClearColor = new Color();\n};\n\nSSAOPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SSAOPass,\n  dispose: function dispose() {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose(); // dispose materials\n\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  },\n  render: function render(renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */\n  ) {\n    // render beauty\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    this.restoreVisibility(); // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.');\n    }\n  },\n  renderPass: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n  },\n  generateSampleKernel: function generateSampleKernel() {\n    var kernelSize = this.kernelSize;\n    var kernel = this.kernel;\n\n    for (var i = 0; i < kernelSize; i++) {\n      var sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      var scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  },\n  generateRandomKernelRotations: function generateRandomKernelRotations() {\n    var width = 4,\n        height = 4;\n\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n    }\n\n    var simplex = new SimplexNoise();\n    var size = width * height;\n    var data = new Float32Array(size * 4);\n\n    for (var i = 0; i < size; i++) {\n      var stride = i * 4;\n      var x = Math.random() * 2 - 1;\n      var y = Math.random() * 2 - 1;\n      var z = 0;\n      var noise = simplex.noise3d(x, y, z);\n      data[stride] = noise;\n      data[stride + 1] = noise;\n      data[stride + 2] = noise;\n      data[stride + 3] = 1;\n    }\n\n    this.noiseTexture = new DataTexture(data, width, height, RGBAFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n  },\n  overrideVisibility: function overrideVisibility() {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  },\n  restoreVisibility: function restoreVisibility() {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      var visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n});\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\nexport { SSAOPass };","map":{"version":3,"names":["DepthTexture","UnsignedShortType","WebGLRenderTarget","LinearFilter","RGBAFormat","NearestFilter","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Color","CustomBlending","Vector3","MathUtils","DataTexture","FloatType","RepeatWrapping","FullScreenQuad","Pass","SimplexNoise","SSAOShader","SSAOBlurShader","SSAODepthShader","CopyShader","SSAOPass","scene","camera","width","height","undefined","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","type","beautyRenderTarget","minFilter","magFilter","format","normalRenderTarget","ssaoRenderTarget","blurRenderTarget","clone","console","error","ssaoMaterial","defines","Object","assign","uniforms","vertexShader","fragmentShader","blending","value","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","prototype","create","constructor","dispose","render","renderer","writeBuffer","setRenderTarget","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","x","Math","random","y","z","normalize","scale","lerp","multiplyScalar","push","simplex","size","data","Float32Array","stride","noise","noise3d","wrapS","wrapT","cache","traverse","object","visible","isPoints","isLine","get"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/postprocessing/SSAOPass.js"],"sourcesContent":["import { DepthTexture, UnsignedShortType, WebGLRenderTarget, LinearFilter, RGBAFormat, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, CustomBlending, Vector3, MathUtils, DataTexture, FloatType, RepeatWrapping } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nvar SSAOPass = function (scene, camera, width, height) {\n  this.width = width !== undefined ? width : 512;\n  this.height = height !== undefined ? height : 512;\n  this.clear = true;\n  this.camera = camera;\n  this.scene = scene;\n  this.kernelRadius = 8;\n  this.kernelSize = 32;\n  this.kernel = [];\n  this.noiseTexture = null;\n  this.output = 0;\n  this.minDistance = 0.005;\n  this.maxDistance = 0.1;\n  this._visibilityCache = new Map(); //\n\n  this.generateSampleKernel();\n  this.generateRandomKernelRotations(); // beauty render target\n\n  var depthTexture = new DepthTexture();\n  depthTexture.type = UnsignedShortType;\n  this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  }); // normal render target with depth buffer\n\n  this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat,\n    depthTexture: depthTexture\n  }); // ssao render target\n\n  this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\n\n  if (SSAOShader === undefined) {\n    console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n  }\n\n  this.ssaoMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOShader.defines),\n    uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n    vertexShader: SSAOShader.vertexShader,\n    fragmentShader: SSAOShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n  this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n  this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n  this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n  this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n  this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n  this.normalMaterial = new MeshNormalMaterial();\n  this.normalMaterial.blending = NoBlending; // blur material\n\n  this.blurMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOBlurShader.defines),\n    uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n    vertexShader: SSAOBlurShader.vertexShader,\n    fragmentShader: SSAOBlurShader.fragmentShader\n  });\n  this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n  this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\n\n  this.depthRenderMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAODepthShader.defines),\n    uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n    vertexShader: SSAODepthShader.vertexShader,\n    fragmentShader: SSAODepthShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n  this.copyMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    transparent: true,\n    depthTest: false,\n    depthWrite: false,\n    blendSrc: DstColorFactor,\n    blendDst: ZeroFactor,\n    blendEquation: AddEquation,\n    blendSrcAlpha: DstAlphaFactor,\n    blendDstAlpha: ZeroFactor,\n    blendEquationAlpha: AddEquation\n  });\n  this.fsQuad = new FullScreenQuad(null);\n  this.originalClearColor = new Color();\n};\n\nSSAOPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SSAOPass,\n  dispose: function () {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose(); // dispose materials\n\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  },\n  render: function (renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */\n  ) {\n    // render beauty\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    this.restoreVisibility(); // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.');\n    }\n  },\n  renderPass: function (renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function (renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function (width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n  },\n  generateSampleKernel: function () {\n    var kernelSize = this.kernelSize;\n    var kernel = this.kernel;\n\n    for (let i = 0; i < kernelSize; i++) {\n      var sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      var scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  },\n  generateRandomKernelRotations: function () {\n    var width = 4,\n        height = 4;\n\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n    }\n\n    var simplex = new SimplexNoise();\n    var size = width * height;\n    var data = new Float32Array(size * 4);\n\n    for (let i = 0; i < size; i++) {\n      var stride = i * 4;\n      var x = Math.random() * 2 - 1;\n      var y = Math.random() * 2 - 1;\n      var z = 0;\n      var noise = simplex.noise3d(x, y, z);\n      data[stride] = noise;\n      data[stride + 1] = noise;\n      data[stride + 2] = noise;\n      data[stride + 3] = 1;\n    }\n\n    this.noiseTexture = new DataTexture(data, width, height, RGBAFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n  },\n  overrideVisibility: function () {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  },\n  restoreVisibility: function () {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      var visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n});\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\n\nexport { SSAOPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}