{"ast":null,"code":"import { FloatNode } from '../inputs/FloatNode.js';\n\nfunction MaxMIPLevelNode(texture) {\n  FloatNode.call(this);\n  this.texture = texture;\n  this.maxMIPLevel = 0;\n}\n\nMaxMIPLevelNode.prototype = Object.create(FloatNode.prototype);\nMaxMIPLevelNode.prototype.constructor = MaxMIPLevelNode;\nMaxMIPLevelNode.prototype.nodeType = 'MaxMIPLevel';\nObject.defineProperties(MaxMIPLevelNode.prototype, {\n  value: {\n    get: function get() {\n      if (this.maxMIPLevel === 0) {\n        var image = this.texture.value.image;\n        if (Array.isArray(image)) image = image[0];\n        this.maxMIPLevel = image !== undefined ? Math.log(Math.max(image.width, image.height)) * Math.LOG2E : 0;\n      }\n\n      return this.maxMIPLevel;\n    },\n    set: function set() {}\n  }\n});\n\nMaxMIPLevelNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.texture = this.texture.uuid;\n  }\n\n  return data;\n};\n\nexport { MaxMIPLevelNode };","map":{"version":3,"names":["FloatNode","MaxMIPLevelNode","texture","call","maxMIPLevel","prototype","Object","create","constructor","nodeType","defineProperties","value","get","image","Array","isArray","undefined","Math","log","max","width","height","LOG2E","set","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/nodes/utils/MaxMIPLevelNode.js"],"sourcesContent":["import { FloatNode } from '../inputs/FloatNode.js';\n\nfunction MaxMIPLevelNode(texture) {\n  FloatNode.call(this);\n  this.texture = texture;\n  this.maxMIPLevel = 0;\n}\n\nMaxMIPLevelNode.prototype = Object.create(FloatNode.prototype);\nMaxMIPLevelNode.prototype.constructor = MaxMIPLevelNode;\nMaxMIPLevelNode.prototype.nodeType = 'MaxMIPLevel';\nObject.defineProperties(MaxMIPLevelNode.prototype, {\n  value: {\n    get: function () {\n      if (this.maxMIPLevel === 0) {\n        var image = this.texture.value.image;\n        if (Array.isArray(image)) image = image[0];\n        this.maxMIPLevel = image !== undefined ? Math.log(Math.max(image.width, image.height)) * Math.LOG2E : 0;\n      }\n\n      return this.maxMIPLevel;\n    },\n    set: function () {}\n  }\n});\n\nMaxMIPLevelNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.texture = this.texture.uuid;\n  }\n\n  return data;\n};\n\nexport { MaxMIPLevelNode };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,wBAA1B;;AAEA,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;EAChCF,SAAS,CAACG,IAAV,CAAe,IAAf;EACA,KAAKD,OAAL,GAAeA,OAAf;EACA,KAAKE,WAAL,GAAmB,CAAnB;AACD;;AAEDH,eAAe,CAACI,SAAhB,GAA4BC,MAAM,CAACC,MAAP,CAAcP,SAAS,CAACK,SAAxB,CAA5B;AACAJ,eAAe,CAACI,SAAhB,CAA0BG,WAA1B,GAAwCP,eAAxC;AACAA,eAAe,CAACI,SAAhB,CAA0BI,QAA1B,GAAqC,aAArC;AACAH,MAAM,CAACI,gBAAP,CAAwBT,eAAe,CAACI,SAAxC,EAAmD;EACjDM,KAAK,EAAE;IACLC,GAAG,EAAE,eAAY;MACf,IAAI,KAAKR,WAAL,KAAqB,CAAzB,EAA4B;QAC1B,IAAIS,KAAK,GAAG,KAAKX,OAAL,CAAaS,KAAb,CAAmBE,KAA/B;QACA,IAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0BA,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAb;QAC1B,KAAKT,WAAL,GAAmBS,KAAK,KAAKG,SAAV,GAAsBC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASN,KAAK,CAACO,KAAf,EAAsBP,KAAK,CAACQ,MAA5B,CAAT,IAAgDJ,IAAI,CAACK,KAA3E,GAAmF,CAAtG;MACD;;MAED,OAAO,KAAKlB,WAAZ;IACD,CATI;IAULmB,GAAG,EAAE,eAAY,CAAE;EAVd;AAD0C,CAAnD;;AAeAtB,eAAe,CAACI,SAAhB,CAA0BmB,MAA1B,GAAmC,UAAUC,IAAV,EAAgB;EACjD,IAAIC,IAAI,GAAG,KAAKC,WAAL,CAAiBF,IAAjB,CAAX;;EAEA,IAAI,CAACC,IAAL,EAAW;IACTA,IAAI,GAAG,KAAKE,cAAL,CAAoBH,IAApB,CAAP;IACAC,IAAI,CAACxB,OAAL,GAAe,KAAKA,OAAL,CAAa2B,IAA5B;EACD;;EAED,OAAOH,IAAP;AACD,CATD;;AAWA,SAASzB,eAAT"},"metadata":{},"sourceType":"module"}