{"ast":null,"code":"import { UniformsUtils, UniformsLib } from 'three';\nimport { Node } from '../../core/Node.js';\nimport { ExpressionNode } from '../../core/ExpressionNode.js';\nimport { ColorNode } from '../../inputs/ColorNode.js';\nimport { FloatNode } from '../../inputs/FloatNode.js';\nimport { SpecularMIPLevelNode } from '../../utils/SpecularMIPLevelNode.js';\n\nfunction StandardNode() {\n  Node.call(this);\n  this.color = new ColorNode(0xffffff);\n  this.roughness = new FloatNode(1);\n  this.metalness = new FloatNode(0);\n}\n\nStandardNode.prototype = Object.create(Node.prototype);\nStandardNode.prototype.constructor = StandardNode;\nStandardNode.prototype.nodeType = 'Standard';\n\nStandardNode.prototype.build = function (builder) {\n  var code;\n  builder.define('STANDARD');\n  var useClearcoat = this.clearcoat || this.clearcoatRoughness || this.clearCoatNormal;\n\n  if (useClearcoat) {\n    builder.define('CLEARCOAT');\n  }\n\n  builder.requires.lights = true;\n  builder.extensions.derivatives = true;\n  builder.extensions.shaderTextureLOD = true;\n\n  if (builder.isShader('vertex')) {\n    var position = this.position ? this.position.analyzeAndFlow(builder, 'v3', {\n      cache: 'position'\n    }) : undefined;\n    builder.mergeUniform(UniformsUtils.merge([UniformsLib.fog, UniformsLib.lights]));\n\n    if (UniformsLib.LTC_1) {\n      // add ltc data textures to material uniforms\n      builder.uniforms.ltc_1 = {\n        value: undefined\n      };\n      builder.uniforms.ltc_2 = {\n        value: undefined\n      };\n    }\n\n    builder.addParsCode(['varying vec3 vViewPosition;', '#ifndef FLAT_SHADED', '\tvarying vec3 vNormal;', '#endif', //\"#include <encodings_pars_fragment>\", // encoding functions\n    '#include <fog_pars_vertex>', '#include <morphtarget_pars_vertex>', '#include <skinning_pars_vertex>', '#include <shadowmap_pars_vertex>', '#include <logdepthbuf_pars_vertex>', '#include <clipping_planes_pars_vertex>'].join('\\n'));\n    var output = ['#include <beginnormal_vertex>', '#include <morphnormal_vertex>', '#include <skinbase_vertex>', '#include <skinnormal_vertex>', '#include <defaultnormal_vertex>', '#ifndef FLAT_SHADED', // Normal computed with derivatives when FLAT_SHADED\n    '\tvNormal = normalize( transformedNormal );', '#endif', '#include <begin_vertex>'];\n\n    if (position) {\n      output.push(position.code, position.result ? 'transformed = ' + position.result + ';' : '');\n    }\n\n    output.push('#include <morphtarget_vertex>', '#include <skinning_vertex>', '#include <project_vertex>', '#include <fog_vertex>', '#include <logdepthbuf_vertex>', '#include <clipping_planes_vertex>', '\tvViewPosition = - mvPosition.xyz;', '#include <worldpos_vertex>', '#include <shadowmap_vertex>');\n    code = output.join('\\n');\n  } else {\n    var specularRoughness = new ExpressionNode('material.specularRoughness', 'f');\n    var clearcoatRoughness = new ExpressionNode('material.clearcoatRoughness', 'f');\n    var contextEnvironment = {\n      roughness: specularRoughness,\n      bias: new SpecularMIPLevelNode(specularRoughness),\n      viewNormal: new ExpressionNode('normal', 'v3'),\n      worldNormal: new ExpressionNode('inverseTransformDirection( geometry.normal, viewMatrix )', 'v3'),\n      gamma: true\n    };\n    var contextGammaOnly = {\n      gamma: true\n    };\n    var contextClearcoatEnvironment = {\n      roughness: clearcoatRoughness,\n      bias: new SpecularMIPLevelNode(clearcoatRoughness),\n      viewNormal: new ExpressionNode('clearcoatNormal', 'v3'),\n      worldNormal: new ExpressionNode('inverseTransformDirection( geometry.clearcoatNormal, viewMatrix )', 'v3'),\n      gamma: true\n    }; // analyze all nodes to reuse generate codes\n\n    if (this.mask) this.mask.analyze(builder);\n    this.color.analyze(builder, {\n      slot: 'color',\n      context: contextGammaOnly\n    });\n    this.roughness.analyze(builder);\n    this.metalness.analyze(builder);\n    if (this.alpha) this.alpha.analyze(builder);\n    if (this.normal) this.normal.analyze(builder);\n    if (this.clearcoat) this.clearcoat.analyze(builder);\n    if (this.clearcoatRoughness) this.clearcoatRoughness.analyze(builder);\n    if (this.clearcoatNormal) this.clearcoatNormal.analyze(builder);\n    if (this.reflectivity) this.reflectivity.analyze(builder);\n    if (this.light) this.light.analyze(builder, {\n      cache: 'light'\n    });\n    if (this.ao) this.ao.analyze(builder);\n    if (this.ambient) this.ambient.analyze(builder);\n    if (this.shadow) this.shadow.analyze(builder);\n    if (this.emissive) this.emissive.analyze(builder, {\n      slot: 'emissive'\n    });\n\n    if (this.environment) {\n      // isolate environment from others inputs ( see TextureNode, CubeTextureNode )\n      // environment.analyze will detect if there is a need of calculate irradiance\n      this.environment.analyze(builder, {\n        cache: 'radiance',\n        context: contextEnvironment,\n        slot: 'radiance'\n      });\n\n      if (builder.requires.irradiance) {\n        this.environment.analyze(builder, {\n          cache: 'irradiance',\n          context: contextEnvironment,\n          slot: 'irradiance'\n        });\n      }\n    }\n\n    if (this.sheen) this.sheen.analyze(builder); // build code\n\n    var mask = this.mask ? this.mask.flow(builder, 'b') : undefined;\n    var color = this.color.flow(builder, 'c', {\n      slot: 'color',\n      context: contextGammaOnly\n    });\n    var roughness = this.roughness.flow(builder, 'f');\n    var metalness = this.metalness.flow(builder, 'f');\n    var alpha = this.alpha ? this.alpha.flow(builder, 'f') : undefined;\n    var normal = this.normal ? this.normal.flow(builder, 'v3') : undefined;\n    var clearcoat = this.clearcoat ? this.clearcoat.flow(builder, 'f') : undefined;\n    var clearcoatRoughness = this.clearcoatRoughness ? this.clearcoatRoughness.flow(builder, 'f') : undefined;\n    var clearcoatNormal = this.clearcoatNormal ? this.clearcoatNormal.flow(builder, 'v3') : undefined;\n    var reflectivity = this.reflectivity ? this.reflectivity.flow(builder, 'f') : undefined;\n    var light = this.light ? this.light.flow(builder, 'v3', {\n      cache: 'light'\n    }) : undefined;\n    var ao = this.ao ? this.ao.flow(builder, 'f') : undefined;\n    var ambient = this.ambient ? this.ambient.flow(builder, 'c') : undefined;\n    var shadow = this.shadow ? this.shadow.flow(builder, 'c') : undefined;\n    var emissive = this.emissive ? this.emissive.flow(builder, 'c', {\n      slot: 'emissive'\n    }) : undefined;\n    var environment;\n\n    if (this.environment) {\n      environment = {\n        radiance: this.environment.flow(builder, 'c', {\n          cache: 'radiance',\n          context: contextEnvironment,\n          slot: 'radiance'\n        })\n      };\n\n      if (builder.requires.irradiance) {\n        environment.irradiance = this.environment.flow(builder, 'c', {\n          cache: 'irradiance',\n          context: contextEnvironment,\n          slot: 'irradiance'\n        });\n      }\n    }\n\n    var clearcoatEnv = useClearcoat && environment ? this.environment.flow(builder, 'c', {\n      cache: 'clearcoat',\n      context: contextClearcoatEnvironment,\n      slot: 'environment'\n    }) : undefined;\n    var sheen = this.sheen ? this.sheen.flow(builder, 'c') : undefined;\n    builder.requires.transparent = alpha !== undefined;\n    builder.addParsCode(['varying vec3 vViewPosition;', '#ifndef FLAT_SHADED', '\tvarying vec3 vNormal;', '#endif', '#include <dithering_pars_fragment>', '#include <fog_pars_fragment>', '#include <bsdfs>', '#include <lights_pars_begin>', '#include <lights_physical_pars_fragment>', '#include <shadowmap_pars_fragment>', '#include <logdepthbuf_pars_fragment>'].join('\\n'));\n    var output = ['#include <clipping_planes_fragment>', // add before: prevent undeclared normal\n    '\t#include <normal_fragment_begin>', '\t#include <clearcoat_normal_fragment_begin>', // add before: prevent undeclared material\n    '\tPhysicalMaterial material;', '\tmaterial.diffuseColor = vec3( 1.0 );'];\n\n    if (mask) {\n      output.push(mask.code, 'if ( ! ' + mask.result + ' ) discard;');\n    }\n\n    output.push(color.code, '\tvec3 diffuseColor = ' + color.result + ';', '\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );', '#include <logdepthbuf_fragment>', roughness.code, '\tfloat roughnessFactor = ' + roughness.result + ';', metalness.code, '\tfloat metalnessFactor = ' + metalness.result + ';');\n\n    if (alpha) {\n      output.push(alpha.code, '#ifdef ALPHATEST', '\tif ( ' + alpha.result + ' <= ALPHATEST ) discard;', '#endif');\n    }\n\n    if (normal) {\n      output.push(normal.code, 'normal = ' + normal.result + ';');\n    }\n\n    if (clearcoatNormal) {\n      output.push(clearcoatNormal.code, 'clearcoatNormal = ' + clearcoatNormal.result + ';');\n    } // anti-aliasing code by @elalish\n\n\n    output.push('vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );', 'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );'); // optimization for now\n\n    output.push('material.diffuseColor = ' + (light ? 'vec3( 1.0 )' : 'diffuseColor * ( 1.0 - metalnessFactor )') + ';', 'material.specularRoughness = max( roughnessFactor, 0.0525 );', 'material.specularRoughness += geometryRoughness;', 'material.specularRoughness = min( material.specularRoughness, 1.0 );', 'material.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );');\n\n    if (clearcoat) {\n      output.push(clearcoat.code, 'material.clearcoat = saturate( ' + clearcoat.result + ' );' // Burley clearcoat model\n      );\n    } else if (useClearcoat) {\n      output.push('material.clearcoat = 0.0;');\n    }\n\n    if (clearcoatRoughness) {\n      output.push(clearcoatRoughness.code, 'material.clearcoatRoughness = max( ' + clearcoatRoughness.result + ', 0.0525 );', 'material.clearcoatRoughness += geometryRoughness;', 'material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );');\n    } else if (useClearcoat) {\n      output.push('material.clearcoatRoughness = 0.0;');\n    }\n\n    if (sheen) {\n      output.push('material.sheenColor = ' + sheen.result + ';');\n    }\n\n    if (reflectivity) {\n      output.push(reflectivity.code, 'material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( ' + reflectivity.result + ' ) ), diffuseColor, metalnessFactor );');\n    } else {\n      output.push('material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor, metalnessFactor );');\n    }\n\n    output.push('#include <lights_fragment_begin>');\n\n    if (light) {\n      output.push(light.code, 'reflectedLight.directDiffuse = ' + light.result + ';'); // apply color\n\n      output.push('diffuseColor *= 1.0 - metalnessFactor;', 'reflectedLight.directDiffuse *= diffuseColor;', 'reflectedLight.indirectDiffuse *= diffuseColor;');\n    }\n\n    if (ao) {\n      output.push(ao.code, 'reflectedLight.indirectDiffuse *= ' + ao.result + ';', 'float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );', 'reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ' + ao.result + ', material.specularRoughness );');\n    }\n\n    if (ambient) {\n      output.push(ambient.code, 'reflectedLight.indirectDiffuse += ' + ambient.result + ';');\n    }\n\n    if (shadow) {\n      output.push(shadow.code, 'reflectedLight.directDiffuse *= ' + shadow.result + ';', 'reflectedLight.directSpecular *= ' + shadow.result + ';');\n    }\n\n    if (emissive) {\n      output.push(emissive.code, 'reflectedLight.directDiffuse += ' + emissive.result + ';');\n    }\n\n    if (environment) {\n      output.push(environment.radiance.code);\n\n      if (builder.requires.irradiance) {\n        output.push(environment.irradiance.code);\n      }\n\n      if (clearcoatEnv) {\n        output.push(clearcoatEnv.code, 'clearcoatRadiance += ' + clearcoatEnv.result + ';');\n      }\n\n      output.push('radiance += ' + environment.radiance.result + ';');\n\n      if (builder.requires.irradiance) {\n        output.push('iblIrradiance += PI * ' + environment.irradiance.result + ';');\n      }\n    }\n\n    output.push('#include <lights_fragment_end>');\n    output.push('vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular;');\n\n    if (alpha) {\n      output.push('gl_FragColor = vec4( outgoingLight, ' + alpha.result + ' );');\n    } else {\n      output.push('gl_FragColor = vec4( outgoingLight, 1.0 );');\n    }\n\n    output.push('#include <tonemapping_fragment>', '#include <encodings_fragment>', '#include <fog_fragment>', '#include <premultiplied_alpha_fragment>', '#include <dithering_fragment>');\n    code = output.join('\\n');\n  }\n\n  return code;\n};\n\nStandardNode.prototype.copy = function (source) {\n  Node.prototype.copy.call(this, source); // vertex\n\n  if (source.position) this.position = source.position; // fragment\n\n  this.color = source.color;\n  this.roughness = source.roughness;\n  this.metalness = source.metalness;\n  if (source.mask) this.mask = source.mask;\n  if (source.alpha) this.alpha = source.alpha;\n  if (source.normal) this.normal = source.normal;\n  if (source.clearcoat) this.clearcoat = source.clearcoat;\n  if (source.clearcoatRoughness) this.clearcoatRoughness = source.clearcoatRoughness;\n  if (source.clearcoatNormal) this.clearcoatNormal = source.clearcoatNormal;\n  if (source.reflectivity) this.reflectivity = source.reflectivity;\n  if (source.light) this.light = source.light;\n  if (source.shadow) this.shadow = source.shadow;\n  if (source.ao) this.ao = source.ao;\n  if (source.emissive) this.emissive = source.emissive;\n  if (source.ambient) this.ambient = source.ambient;\n  if (source.environment) this.environment = source.environment;\n  if (source.sheen) this.sheen = source.sheen;\n  return this;\n};\n\nStandardNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta); // vertex\n\n    if (this.position) data.position = this.position.toJSON(meta).uuid; // fragment\n\n    data.color = this.color.toJSON(meta).uuid;\n    data.roughness = this.roughness.toJSON(meta).uuid;\n    data.metalness = this.metalness.toJSON(meta).uuid;\n    if (this.mask) data.mask = this.mask.toJSON(meta).uuid;\n    if (this.alpha) data.alpha = this.alpha.toJSON(meta).uuid;\n    if (this.normal) data.normal = this.normal.toJSON(meta).uuid;\n    if (this.clearcoat) data.clearcoat = this.clearcoat.toJSON(meta).uuid;\n    if (this.clearcoatRoughness) data.clearcoatRoughness = this.clearcoatRoughness.toJSON(meta).uuid;\n    if (this.clearcoatNormal) data.clearcoatNormal = this.clearcoatNormal.toJSON(meta).uuid;\n    if (this.reflectivity) data.reflectivity = this.reflectivity.toJSON(meta).uuid;\n    if (this.light) data.light = this.light.toJSON(meta).uuid;\n    if (this.shadow) data.shadow = this.shadow.toJSON(meta).uuid;\n    if (this.ao) data.ao = this.ao.toJSON(meta).uuid;\n    if (this.emissive) data.emissive = this.emissive.toJSON(meta).uuid;\n    if (this.ambient) data.ambient = this.ambient.toJSON(meta).uuid;\n    if (this.environment) data.environment = this.environment.toJSON(meta).uuid;\n    if (this.sheen) data.sheen = this.sheen.toJSON(meta).uuid;\n  }\n\n  return data;\n};\n\nexport { StandardNode };","map":{"version":3,"names":["UniformsUtils","UniformsLib","Node","ExpressionNode","ColorNode","FloatNode","SpecularMIPLevelNode","StandardNode","call","color","roughness","metalness","prototype","Object","create","constructor","nodeType","build","builder","code","define","useClearcoat","clearcoat","clearcoatRoughness","clearCoatNormal","requires","lights","extensions","derivatives","shaderTextureLOD","isShader","position","analyzeAndFlow","cache","undefined","mergeUniform","merge","fog","LTC_1","uniforms","ltc_1","value","ltc_2","addParsCode","join","output","push","result","specularRoughness","contextEnvironment","bias","viewNormal","worldNormal","gamma","contextGammaOnly","contextClearcoatEnvironment","mask","analyze","slot","context","alpha","normal","clearcoatNormal","reflectivity","light","ao","ambient","shadow","emissive","environment","irradiance","sheen","flow","radiance","clearcoatEnv","transparent","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/nodes/materials/nodes/StandardNode.js"],"sourcesContent":["import { UniformsUtils, UniformsLib } from 'three';\nimport { Node } from '../../core/Node.js';\nimport { ExpressionNode } from '../../core/ExpressionNode.js';\nimport { ColorNode } from '../../inputs/ColorNode.js';\nimport { FloatNode } from '../../inputs/FloatNode.js';\nimport { SpecularMIPLevelNode } from '../../utils/SpecularMIPLevelNode.js';\n\nfunction StandardNode() {\n  Node.call(this);\n  this.color = new ColorNode(0xffffff);\n  this.roughness = new FloatNode(1);\n  this.metalness = new FloatNode(0);\n}\n\nStandardNode.prototype = Object.create(Node.prototype);\nStandardNode.prototype.constructor = StandardNode;\nStandardNode.prototype.nodeType = 'Standard';\n\nStandardNode.prototype.build = function (builder) {\n  var code;\n  builder.define('STANDARD');\n  var useClearcoat = this.clearcoat || this.clearcoatRoughness || this.clearCoatNormal;\n\n  if (useClearcoat) {\n    builder.define('CLEARCOAT');\n  }\n\n  builder.requires.lights = true;\n  builder.extensions.derivatives = true;\n  builder.extensions.shaderTextureLOD = true;\n\n  if (builder.isShader('vertex')) {\n    var position = this.position ? this.position.analyzeAndFlow(builder, 'v3', {\n      cache: 'position'\n    }) : undefined;\n    builder.mergeUniform(UniformsUtils.merge([UniformsLib.fog, UniformsLib.lights]));\n\n    if (UniformsLib.LTC_1) {\n      // add ltc data textures to material uniforms\n      builder.uniforms.ltc_1 = {\n        value: undefined\n      };\n      builder.uniforms.ltc_2 = {\n        value: undefined\n      };\n    }\n\n    builder.addParsCode(['varying vec3 vViewPosition;', '#ifndef FLAT_SHADED', '\tvarying vec3 vNormal;', '#endif', //\"#include <encodings_pars_fragment>\", // encoding functions\n    '#include <fog_pars_vertex>', '#include <morphtarget_pars_vertex>', '#include <skinning_pars_vertex>', '#include <shadowmap_pars_vertex>', '#include <logdepthbuf_pars_vertex>', '#include <clipping_planes_pars_vertex>'].join('\\n'));\n    var output = ['#include <beginnormal_vertex>', '#include <morphnormal_vertex>', '#include <skinbase_vertex>', '#include <skinnormal_vertex>', '#include <defaultnormal_vertex>', '#ifndef FLAT_SHADED', // Normal computed with derivatives when FLAT_SHADED\n    '\tvNormal = normalize( transformedNormal );', '#endif', '#include <begin_vertex>'];\n\n    if (position) {\n      output.push(position.code, position.result ? 'transformed = ' + position.result + ';' : '');\n    }\n\n    output.push('#include <morphtarget_vertex>', '#include <skinning_vertex>', '#include <project_vertex>', '#include <fog_vertex>', '#include <logdepthbuf_vertex>', '#include <clipping_planes_vertex>', '\tvViewPosition = - mvPosition.xyz;', '#include <worldpos_vertex>', '#include <shadowmap_vertex>');\n    code = output.join('\\n');\n  } else {\n    var specularRoughness = new ExpressionNode('material.specularRoughness', 'f');\n    var clearcoatRoughness = new ExpressionNode('material.clearcoatRoughness', 'f');\n    var contextEnvironment = {\n      roughness: specularRoughness,\n      bias: new SpecularMIPLevelNode(specularRoughness),\n      viewNormal: new ExpressionNode('normal', 'v3'),\n      worldNormal: new ExpressionNode('inverseTransformDirection( geometry.normal, viewMatrix )', 'v3'),\n      gamma: true\n    };\n    var contextGammaOnly = {\n      gamma: true\n    };\n    var contextClearcoatEnvironment = {\n      roughness: clearcoatRoughness,\n      bias: new SpecularMIPLevelNode(clearcoatRoughness),\n      viewNormal: new ExpressionNode('clearcoatNormal', 'v3'),\n      worldNormal: new ExpressionNode('inverseTransformDirection( geometry.clearcoatNormal, viewMatrix )', 'v3'),\n      gamma: true\n    }; // analyze all nodes to reuse generate codes\n\n    if (this.mask) this.mask.analyze(builder);\n    this.color.analyze(builder, {\n      slot: 'color',\n      context: contextGammaOnly\n    });\n    this.roughness.analyze(builder);\n    this.metalness.analyze(builder);\n    if (this.alpha) this.alpha.analyze(builder);\n    if (this.normal) this.normal.analyze(builder);\n    if (this.clearcoat) this.clearcoat.analyze(builder);\n    if (this.clearcoatRoughness) this.clearcoatRoughness.analyze(builder);\n    if (this.clearcoatNormal) this.clearcoatNormal.analyze(builder);\n    if (this.reflectivity) this.reflectivity.analyze(builder);\n    if (this.light) this.light.analyze(builder, {\n      cache: 'light'\n    });\n    if (this.ao) this.ao.analyze(builder);\n    if (this.ambient) this.ambient.analyze(builder);\n    if (this.shadow) this.shadow.analyze(builder);\n    if (this.emissive) this.emissive.analyze(builder, {\n      slot: 'emissive'\n    });\n\n    if (this.environment) {\n      // isolate environment from others inputs ( see TextureNode, CubeTextureNode )\n      // environment.analyze will detect if there is a need of calculate irradiance\n      this.environment.analyze(builder, {\n        cache: 'radiance',\n        context: contextEnvironment,\n        slot: 'radiance'\n      });\n\n      if (builder.requires.irradiance) {\n        this.environment.analyze(builder, {\n          cache: 'irradiance',\n          context: contextEnvironment,\n          slot: 'irradiance'\n        });\n      }\n    }\n\n    if (this.sheen) this.sheen.analyze(builder); // build code\n\n    var mask = this.mask ? this.mask.flow(builder, 'b') : undefined;\n    var color = this.color.flow(builder, 'c', {\n      slot: 'color',\n      context: contextGammaOnly\n    });\n    var roughness = this.roughness.flow(builder, 'f');\n    var metalness = this.metalness.flow(builder, 'f');\n    var alpha = this.alpha ? this.alpha.flow(builder, 'f') : undefined;\n    var normal = this.normal ? this.normal.flow(builder, 'v3') : undefined;\n    var clearcoat = this.clearcoat ? this.clearcoat.flow(builder, 'f') : undefined;\n    var clearcoatRoughness = this.clearcoatRoughness ? this.clearcoatRoughness.flow(builder, 'f') : undefined;\n    var clearcoatNormal = this.clearcoatNormal ? this.clearcoatNormal.flow(builder, 'v3') : undefined;\n    var reflectivity = this.reflectivity ? this.reflectivity.flow(builder, 'f') : undefined;\n    var light = this.light ? this.light.flow(builder, 'v3', {\n      cache: 'light'\n    }) : undefined;\n    var ao = this.ao ? this.ao.flow(builder, 'f') : undefined;\n    var ambient = this.ambient ? this.ambient.flow(builder, 'c') : undefined;\n    var shadow = this.shadow ? this.shadow.flow(builder, 'c') : undefined;\n    var emissive = this.emissive ? this.emissive.flow(builder, 'c', {\n      slot: 'emissive'\n    }) : undefined;\n    var environment;\n\n    if (this.environment) {\n      environment = {\n        radiance: this.environment.flow(builder, 'c', {\n          cache: 'radiance',\n          context: contextEnvironment,\n          slot: 'radiance'\n        })\n      };\n\n      if (builder.requires.irradiance) {\n        environment.irradiance = this.environment.flow(builder, 'c', {\n          cache: 'irradiance',\n          context: contextEnvironment,\n          slot: 'irradiance'\n        });\n      }\n    }\n\n    var clearcoatEnv = useClearcoat && environment ? this.environment.flow(builder, 'c', {\n      cache: 'clearcoat',\n      context: contextClearcoatEnvironment,\n      slot: 'environment'\n    }) : undefined;\n    var sheen = this.sheen ? this.sheen.flow(builder, 'c') : undefined;\n    builder.requires.transparent = alpha !== undefined;\n    builder.addParsCode(['varying vec3 vViewPosition;', '#ifndef FLAT_SHADED', '\tvarying vec3 vNormal;', '#endif', '#include <dithering_pars_fragment>', '#include <fog_pars_fragment>', '#include <bsdfs>', '#include <lights_pars_begin>', '#include <lights_physical_pars_fragment>', '#include <shadowmap_pars_fragment>', '#include <logdepthbuf_pars_fragment>'].join('\\n'));\n    var output = ['#include <clipping_planes_fragment>', // add before: prevent undeclared normal\n    '\t#include <normal_fragment_begin>', '\t#include <clearcoat_normal_fragment_begin>', // add before: prevent undeclared material\n    '\tPhysicalMaterial material;', '\tmaterial.diffuseColor = vec3( 1.0 );'];\n\n    if (mask) {\n      output.push(mask.code, 'if ( ! ' + mask.result + ' ) discard;');\n    }\n\n    output.push(color.code, '\tvec3 diffuseColor = ' + color.result + ';', '\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );', '#include <logdepthbuf_fragment>', roughness.code, '\tfloat roughnessFactor = ' + roughness.result + ';', metalness.code, '\tfloat metalnessFactor = ' + metalness.result + ';');\n\n    if (alpha) {\n      output.push(alpha.code, '#ifdef ALPHATEST', '\tif ( ' + alpha.result + ' <= ALPHATEST ) discard;', '#endif');\n    }\n\n    if (normal) {\n      output.push(normal.code, 'normal = ' + normal.result + ';');\n    }\n\n    if (clearcoatNormal) {\n      output.push(clearcoatNormal.code, 'clearcoatNormal = ' + clearcoatNormal.result + ';');\n    } // anti-aliasing code by @elalish\n\n\n    output.push('vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );', 'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );'); // optimization for now\n\n    output.push('material.diffuseColor = ' + (light ? 'vec3( 1.0 )' : 'diffuseColor * ( 1.0 - metalnessFactor )') + ';', 'material.specularRoughness = max( roughnessFactor, 0.0525 );', 'material.specularRoughness += geometryRoughness;', 'material.specularRoughness = min( material.specularRoughness, 1.0 );', 'material.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );');\n\n    if (clearcoat) {\n      output.push(clearcoat.code, 'material.clearcoat = saturate( ' + clearcoat.result + ' );' // Burley clearcoat model\n      );\n    } else if (useClearcoat) {\n      output.push('material.clearcoat = 0.0;');\n    }\n\n    if (clearcoatRoughness) {\n      output.push(clearcoatRoughness.code, 'material.clearcoatRoughness = max( ' + clearcoatRoughness.result + ', 0.0525 );', 'material.clearcoatRoughness += geometryRoughness;', 'material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );');\n    } else if (useClearcoat) {\n      output.push('material.clearcoatRoughness = 0.0;');\n    }\n\n    if (sheen) {\n      output.push('material.sheenColor = ' + sheen.result + ';');\n    }\n\n    if (reflectivity) {\n      output.push(reflectivity.code, 'material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( ' + reflectivity.result + ' ) ), diffuseColor, metalnessFactor );');\n    } else {\n      output.push('material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor, metalnessFactor );');\n    }\n\n    output.push('#include <lights_fragment_begin>');\n\n    if (light) {\n      output.push(light.code, 'reflectedLight.directDiffuse = ' + light.result + ';'); // apply color\n\n      output.push('diffuseColor *= 1.0 - metalnessFactor;', 'reflectedLight.directDiffuse *= diffuseColor;', 'reflectedLight.indirectDiffuse *= diffuseColor;');\n    }\n\n    if (ao) {\n      output.push(ao.code, 'reflectedLight.indirectDiffuse *= ' + ao.result + ';', 'float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );', 'reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ' + ao.result + ', material.specularRoughness );');\n    }\n\n    if (ambient) {\n      output.push(ambient.code, 'reflectedLight.indirectDiffuse += ' + ambient.result + ';');\n    }\n\n    if (shadow) {\n      output.push(shadow.code, 'reflectedLight.directDiffuse *= ' + shadow.result + ';', 'reflectedLight.directSpecular *= ' + shadow.result + ';');\n    }\n\n    if (emissive) {\n      output.push(emissive.code, 'reflectedLight.directDiffuse += ' + emissive.result + ';');\n    }\n\n    if (environment) {\n      output.push(environment.radiance.code);\n\n      if (builder.requires.irradiance) {\n        output.push(environment.irradiance.code);\n      }\n\n      if (clearcoatEnv) {\n        output.push(clearcoatEnv.code, 'clearcoatRadiance += ' + clearcoatEnv.result + ';');\n      }\n\n      output.push('radiance += ' + environment.radiance.result + ';');\n\n      if (builder.requires.irradiance) {\n        output.push('iblIrradiance += PI * ' + environment.irradiance.result + ';');\n      }\n    }\n\n    output.push('#include <lights_fragment_end>');\n    output.push('vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular;');\n\n    if (alpha) {\n      output.push('gl_FragColor = vec4( outgoingLight, ' + alpha.result + ' );');\n    } else {\n      output.push('gl_FragColor = vec4( outgoingLight, 1.0 );');\n    }\n\n    output.push('#include <tonemapping_fragment>', '#include <encodings_fragment>', '#include <fog_fragment>', '#include <premultiplied_alpha_fragment>', '#include <dithering_fragment>');\n    code = output.join('\\n');\n  }\n\n  return code;\n};\n\nStandardNode.prototype.copy = function (source) {\n  Node.prototype.copy.call(this, source); // vertex\n\n  if (source.position) this.position = source.position; // fragment\n\n  this.color = source.color;\n  this.roughness = source.roughness;\n  this.metalness = source.metalness;\n  if (source.mask) this.mask = source.mask;\n  if (source.alpha) this.alpha = source.alpha;\n  if (source.normal) this.normal = source.normal;\n  if (source.clearcoat) this.clearcoat = source.clearcoat;\n  if (source.clearcoatRoughness) this.clearcoatRoughness = source.clearcoatRoughness;\n  if (source.clearcoatNormal) this.clearcoatNormal = source.clearcoatNormal;\n  if (source.reflectivity) this.reflectivity = source.reflectivity;\n  if (source.light) this.light = source.light;\n  if (source.shadow) this.shadow = source.shadow;\n  if (source.ao) this.ao = source.ao;\n  if (source.emissive) this.emissive = source.emissive;\n  if (source.ambient) this.ambient = source.ambient;\n  if (source.environment) this.environment = source.environment;\n  if (source.sheen) this.sheen = source.sheen;\n  return this;\n};\n\nStandardNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta); // vertex\n\n    if (this.position) data.position = this.position.toJSON(meta).uuid; // fragment\n\n    data.color = this.color.toJSON(meta).uuid;\n    data.roughness = this.roughness.toJSON(meta).uuid;\n    data.metalness = this.metalness.toJSON(meta).uuid;\n    if (this.mask) data.mask = this.mask.toJSON(meta).uuid;\n    if (this.alpha) data.alpha = this.alpha.toJSON(meta).uuid;\n    if (this.normal) data.normal = this.normal.toJSON(meta).uuid;\n    if (this.clearcoat) data.clearcoat = this.clearcoat.toJSON(meta).uuid;\n    if (this.clearcoatRoughness) data.clearcoatRoughness = this.clearcoatRoughness.toJSON(meta).uuid;\n    if (this.clearcoatNormal) data.clearcoatNormal = this.clearcoatNormal.toJSON(meta).uuid;\n    if (this.reflectivity) data.reflectivity = this.reflectivity.toJSON(meta).uuid;\n    if (this.light) data.light = this.light.toJSON(meta).uuid;\n    if (this.shadow) data.shadow = this.shadow.toJSON(meta).uuid;\n    if (this.ao) data.ao = this.ao.toJSON(meta).uuid;\n    if (this.emissive) data.emissive = this.emissive.toJSON(meta).uuid;\n    if (this.ambient) data.ambient = this.ambient.toJSON(meta).uuid;\n    if (this.environment) data.environment = this.environment.toJSON(meta).uuid;\n    if (this.sheen) data.sheen = this.sheen.toJSON(meta).uuid;\n  }\n\n  return data;\n};\n\nexport { StandardNode };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}