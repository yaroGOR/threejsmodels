{"ast":null,"code":"import { Mesh, MeshBasicMaterial, Vector3, DataTexture, RGBFormat, NearestFilter, ClampToEdgeWrapping, RawShaderMaterial, Color, Vector2, AdditiveBlending, Box2, Vector4, BufferGeometry, InterleavedBuffer, InterleavedBufferAttribute } from 'three';\n\nvar Lensflare = function Lensflare() {\n  Mesh.call(this, Lensflare.Geometry, new MeshBasicMaterial({\n    opacity: 0,\n    transparent: true\n  }));\n  this.type = 'Lensflare';\n  this.frustumCulled = false;\n  this.renderOrder = Infinity; //\n\n  var positionScreen = new Vector3();\n  var positionView = new Vector3(); // textures\n\n  var tempMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBFormat);\n  tempMap.minFilter = NearestFilter;\n  tempMap.magFilter = NearestFilter;\n  tempMap.wrapS = ClampToEdgeWrapping;\n  tempMap.wrapT = ClampToEdgeWrapping;\n  var occlusionMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBFormat);\n  occlusionMap.minFilter = NearestFilter;\n  occlusionMap.magFilter = NearestFilter;\n  occlusionMap.wrapS = ClampToEdgeWrapping;\n  occlusionMap.wrapT = ClampToEdgeWrapping; // material\n\n  var geometry = Lensflare.Geometry;\n  var material1a = new RawShaderMaterial({\n    uniforms: {\n      scale: {\n        value: null\n      },\n      screenPosition: {\n        value: null\n      }\n    },\n    vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'attribute vec3 position;', 'void main() {', '\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n    fragmentShader: ['precision highp float;', 'void main() {', '\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );', '}'].join('\\n'),\n    depthTest: true,\n    depthWrite: false,\n    transparent: false\n  });\n  var material1b = new RawShaderMaterial({\n    uniforms: {\n      map: {\n        value: tempMap\n      },\n      scale: {\n        value: null\n      },\n      screenPosition: {\n        value: null\n      }\n    },\n    vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'attribute vec3 position;', 'attribute vec2 uv;', 'varying vec2 vUV;', 'void main() {', '\tvUV = uv;', '\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n    fragmentShader: ['precision highp float;', 'uniform sampler2D map;', 'varying vec2 vUV;', 'void main() {', '\tgl_FragColor = texture2D( map, vUV );', '}'].join('\\n'),\n    depthTest: false,\n    depthWrite: false,\n    transparent: false\n  }); // the following object is used for occlusionMap generation\n\n  var mesh1 = new Mesh(geometry, material1a); //\n\n  var elements = [];\n  var shader = LensflareElement.Shader;\n  var material2 = new RawShaderMaterial({\n    uniforms: {\n      map: {\n        value: null\n      },\n      occlusionMap: {\n        value: occlusionMap\n      },\n      color: {\n        value: new Color(0xffffff)\n      },\n      scale: {\n        value: new Vector2()\n      },\n      screenPosition: {\n        value: new Vector3()\n      }\n    },\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader,\n    blending: AdditiveBlending,\n    transparent: true,\n    depthWrite: false\n  });\n  var mesh2 = new Mesh(geometry, material2);\n\n  this.addElement = function (element) {\n    elements.push(element);\n  }; //\n\n\n  var scale = new Vector2();\n  var screenPositionPixels = new Vector2();\n  var validArea = new Box2();\n  var viewport = new Vector4();\n\n  this.onBeforeRender = function (renderer, scene, camera) {\n    renderer.getCurrentViewport(viewport);\n    var invAspect = viewport.w / viewport.z;\n    var halfViewportWidth = viewport.z / 2.0;\n    var halfViewportHeight = viewport.w / 2.0;\n    var size = 16 / viewport.w;\n    scale.set(size * invAspect, size);\n    validArea.min.set(viewport.x, viewport.y);\n    validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16)); // calculate position in screen space\n\n    positionView.setFromMatrixPosition(this.matrixWorld);\n    positionView.applyMatrix4(camera.matrixWorldInverse);\n    if (positionView.z > 0) return; // lensflare is behind the camera\n\n    positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix); // horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n    screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n    screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8; // screen cull\n\n    if (validArea.containsPoint(screenPositionPixels)) {\n      // save current RGB to temp texture\n      renderer.copyFramebufferToTexture(screenPositionPixels, tempMap); // render pink quad\n\n      var uniforms = material1a.uniforms;\n      uniforms['scale'].value = scale;\n      uniforms['screenPosition'].value = positionScreen;\n      renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null); // copy result to occlusionMap\n\n      renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap); // restore graphics\n\n      var uniforms = material1b.uniforms;\n      uniforms['scale'].value = scale;\n      uniforms['screenPosition'].value = positionScreen;\n      renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null); // render elements\n\n      var vecX = -positionScreen.x * 2;\n      var vecY = -positionScreen.y * 2;\n\n      for (var i = 0, l = elements.length; i < l; i++) {\n        var element = elements[i];\n        var uniforms = material2.uniforms;\n        uniforms['color'].value.copy(element.color);\n        uniforms['map'].value = element.texture;\n        uniforms['screenPosition'].value.x = positionScreen.x + vecX * element.distance;\n        uniforms['screenPosition'].value.y = positionScreen.y + vecY * element.distance;\n        var size = element.size / viewport.w;\n        var invAspect = viewport.w / viewport.z;\n        uniforms['scale'].value.set(size * invAspect, size);\n        material2.uniformsNeedUpdate = true;\n        renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null);\n      }\n    }\n  };\n\n  this.dispose = function () {\n    material1a.dispose();\n    material1b.dispose();\n    material2.dispose();\n    tempMap.dispose();\n    occlusionMap.dispose();\n\n    for (var i = 0, l = elements.length; i < l; i++) {\n      elements[i].texture.dispose();\n    }\n  };\n};\n\nLensflare.prototype = Object.create(Mesh.prototype);\nLensflare.prototype.constructor = Lensflare;\nLensflare.prototype.isLensflare = true; //\n\nvar LensflareElement = function LensflareElement(texture, size, distance, color) {\n  this.texture = texture;\n  this.size = size || 1;\n  this.distance = distance || 0;\n  this.color = color || new Color(0xffffff);\n};\n\nLensflareElement.Shader = {\n  uniforms: {\n    map: {\n      value: null\n    },\n    occlusionMap: {\n      value: null\n    },\n    color: {\n      value: null\n    },\n    scale: {\n      value: null\n    },\n    screenPosition: {\n      value: null\n    }\n  },\n  vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'uniform sampler2D occlusionMap;', 'attribute vec3 position;', 'attribute vec2 uv;', 'varying vec2 vUV;', 'varying float vVisibility;', 'void main() {', '\tvUV = uv;', '\tvec2 pos = position.xy;', '\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );', '\tvVisibility =        visibility.r / 9.0;', '\tvVisibility *= 1.0 - visibility.g / 9.0;', '\tvVisibility *=       visibility.b / 9.0;', '\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['precision highp float;', 'uniform sampler2D map;', 'uniform vec3 color;', 'varying vec2 vUV;', 'varying float vVisibility;', 'void main() {', '\tvec4 texture = texture2D( map, vUV );', '\ttexture.a *= vVisibility;', '\tgl_FragColor = texture;', '\tgl_FragColor.rgb *= color;', '}'].join('\\n')\n};\n\nLensflare.Geometry = function () {\n  var geometry = new BufferGeometry();\n  var float32Array = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);\n  var interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n  geometry.setIndex([0, 1, 2, 0, 2, 3]);\n  geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n  geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n  return geometry;\n}();\n\nexport { Lensflare, LensflareElement };","map":{"version":3,"names":["Mesh","MeshBasicMaterial","Vector3","DataTexture","RGBFormat","NearestFilter","ClampToEdgeWrapping","RawShaderMaterial","Color","Vector2","AdditiveBlending","Box2","Vector4","BufferGeometry","InterleavedBuffer","InterleavedBufferAttribute","Lensflare","call","Geometry","opacity","transparent","type","frustumCulled","renderOrder","Infinity","positionScreen","positionView","tempMap","Uint8Array","minFilter","magFilter","wrapS","wrapT","occlusionMap","geometry","material1a","uniforms","scale","value","screenPosition","vertexShader","join","fragmentShader","depthTest","depthWrite","material1b","map","mesh1","elements","shader","LensflareElement","Shader","material2","color","blending","mesh2","addElement","element","push","screenPositionPixels","validArea","viewport","onBeforeRender","renderer","scene","camera","getCurrentViewport","invAspect","w","z","halfViewportWidth","halfViewportHeight","size","set","min","x","y","max","setFromMatrixPosition","matrixWorld","applyMatrix4","matrixWorldInverse","copy","projectionMatrix","containsPoint","copyFramebufferToTexture","renderBufferDirect","vecX","vecY","i","l","length","texture","distance","uniformsNeedUpdate","dispose","prototype","Object","create","constructor","isLensflare","float32Array","Float32Array","interleavedBuffer","setIndex","setAttribute"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/objects/Lensflare.js"],"sourcesContent":["import { Mesh, MeshBasicMaterial, Vector3, DataTexture, RGBFormat, NearestFilter, ClampToEdgeWrapping, RawShaderMaterial, Color, Vector2, AdditiveBlending, Box2, Vector4, BufferGeometry, InterleavedBuffer, InterleavedBufferAttribute } from 'three';\n\nvar Lensflare = function () {\n  Mesh.call(this, Lensflare.Geometry, new MeshBasicMaterial({\n    opacity: 0,\n    transparent: true\n  }));\n  this.type = 'Lensflare';\n  this.frustumCulled = false;\n  this.renderOrder = Infinity; //\n\n  var positionScreen = new Vector3();\n  var positionView = new Vector3(); // textures\n\n  var tempMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBFormat);\n  tempMap.minFilter = NearestFilter;\n  tempMap.magFilter = NearestFilter;\n  tempMap.wrapS = ClampToEdgeWrapping;\n  tempMap.wrapT = ClampToEdgeWrapping;\n  var occlusionMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBFormat);\n  occlusionMap.minFilter = NearestFilter;\n  occlusionMap.magFilter = NearestFilter;\n  occlusionMap.wrapS = ClampToEdgeWrapping;\n  occlusionMap.wrapT = ClampToEdgeWrapping; // material\n\n  var geometry = Lensflare.Geometry;\n  var material1a = new RawShaderMaterial({\n    uniforms: {\n      scale: {\n        value: null\n      },\n      screenPosition: {\n        value: null\n      }\n    },\n    vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'attribute vec3 position;', 'void main() {', '\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n    fragmentShader: ['precision highp float;', 'void main() {', '\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );', '}'].join('\\n'),\n    depthTest: true,\n    depthWrite: false,\n    transparent: false\n  });\n  var material1b = new RawShaderMaterial({\n    uniforms: {\n      map: {\n        value: tempMap\n      },\n      scale: {\n        value: null\n      },\n      screenPosition: {\n        value: null\n      }\n    },\n    vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'attribute vec3 position;', 'attribute vec2 uv;', 'varying vec2 vUV;', 'void main() {', '\tvUV = uv;', '\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n    fragmentShader: ['precision highp float;', 'uniform sampler2D map;', 'varying vec2 vUV;', 'void main() {', '\tgl_FragColor = texture2D( map, vUV );', '}'].join('\\n'),\n    depthTest: false,\n    depthWrite: false,\n    transparent: false\n  }); // the following object is used for occlusionMap generation\n\n  var mesh1 = new Mesh(geometry, material1a); //\n\n  var elements = [];\n  var shader = LensflareElement.Shader;\n  var material2 = new RawShaderMaterial({\n    uniforms: {\n      map: {\n        value: null\n      },\n      occlusionMap: {\n        value: occlusionMap\n      },\n      color: {\n        value: new Color(0xffffff)\n      },\n      scale: {\n        value: new Vector2()\n      },\n      screenPosition: {\n        value: new Vector3()\n      }\n    },\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader,\n    blending: AdditiveBlending,\n    transparent: true,\n    depthWrite: false\n  });\n  var mesh2 = new Mesh(geometry, material2);\n\n  this.addElement = function (element) {\n    elements.push(element);\n  }; //\n\n\n  var scale = new Vector2();\n  var screenPositionPixels = new Vector2();\n  var validArea = new Box2();\n  var viewport = new Vector4();\n\n  this.onBeforeRender = function (renderer, scene, camera) {\n    renderer.getCurrentViewport(viewport);\n    var invAspect = viewport.w / viewport.z;\n    var halfViewportWidth = viewport.z / 2.0;\n    var halfViewportHeight = viewport.w / 2.0;\n    var size = 16 / viewport.w;\n    scale.set(size * invAspect, size);\n    validArea.min.set(viewport.x, viewport.y);\n    validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16)); // calculate position in screen space\n\n    positionView.setFromMatrixPosition(this.matrixWorld);\n    positionView.applyMatrix4(camera.matrixWorldInverse);\n    if (positionView.z > 0) return; // lensflare is behind the camera\n\n    positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix); // horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n    screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n    screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8; // screen cull\n\n    if (validArea.containsPoint(screenPositionPixels)) {\n      // save current RGB to temp texture\n      renderer.copyFramebufferToTexture(screenPositionPixels, tempMap); // render pink quad\n\n      var uniforms = material1a.uniforms;\n      uniforms['scale'].value = scale;\n      uniforms['screenPosition'].value = positionScreen;\n      renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null); // copy result to occlusionMap\n\n      renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap); // restore graphics\n\n      var uniforms = material1b.uniforms;\n      uniforms['scale'].value = scale;\n      uniforms['screenPosition'].value = positionScreen;\n      renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null); // render elements\n\n      var vecX = -positionScreen.x * 2;\n      var vecY = -positionScreen.y * 2;\n\n      for (let i = 0, l = elements.length; i < l; i++) {\n        var element = elements[i];\n        var uniforms = material2.uniforms;\n        uniforms['color'].value.copy(element.color);\n        uniforms['map'].value = element.texture;\n        uniforms['screenPosition'].value.x = positionScreen.x + vecX * element.distance;\n        uniforms['screenPosition'].value.y = positionScreen.y + vecY * element.distance;\n        var size = element.size / viewport.w;\n        var invAspect = viewport.w / viewport.z;\n        uniforms['scale'].value.set(size * invAspect, size);\n        material2.uniformsNeedUpdate = true;\n        renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null);\n      }\n    }\n  };\n\n  this.dispose = function () {\n    material1a.dispose();\n    material1b.dispose();\n    material2.dispose();\n    tempMap.dispose();\n    occlusionMap.dispose();\n\n    for (let i = 0, l = elements.length; i < l; i++) {\n      elements[i].texture.dispose();\n    }\n  };\n};\n\nLensflare.prototype = Object.create(Mesh.prototype);\nLensflare.prototype.constructor = Lensflare;\nLensflare.prototype.isLensflare = true; //\n\nvar LensflareElement = function (texture, size, distance, color) {\n  this.texture = texture;\n  this.size = size || 1;\n  this.distance = distance || 0;\n  this.color = color || new Color(0xffffff);\n};\n\nLensflareElement.Shader = {\n  uniforms: {\n    map: {\n      value: null\n    },\n    occlusionMap: {\n      value: null\n    },\n    color: {\n      value: null\n    },\n    scale: {\n      value: null\n    },\n    screenPosition: {\n      value: null\n    }\n  },\n  vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'uniform sampler2D occlusionMap;', 'attribute vec3 position;', 'attribute vec2 uv;', 'varying vec2 vUV;', 'varying float vVisibility;', 'void main() {', '\tvUV = uv;', '\tvec2 pos = position.xy;', '\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );', '\tvVisibility =        visibility.r / 9.0;', '\tvVisibility *= 1.0 - visibility.g / 9.0;', '\tvVisibility *=       visibility.b / 9.0;', '\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['precision highp float;', 'uniform sampler2D map;', 'uniform vec3 color;', 'varying vec2 vUV;', 'varying float vVisibility;', 'void main() {', '\tvec4 texture = texture2D( map, vUV );', '\ttexture.a *= vVisibility;', '\tgl_FragColor = texture;', '\tgl_FragColor.rgb *= color;', '}'].join('\\n')\n};\n\nLensflare.Geometry = function () {\n  var geometry = new BufferGeometry();\n  var float32Array = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);\n  var interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n  geometry.setIndex([0, 1, 2, 0, 2, 3]);\n  geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n  geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n  return geometry;\n}();\n\nexport { Lensflare, LensflareElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}