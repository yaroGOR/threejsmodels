{"ast":null,"code":"import { PropertyBinding, InterpolateLinear, Vector3, RGBAFormat, RGBFormat, DoubleSide, BufferAttribute, MathUtils, InterpolateDiscrete, Matrix4, Scene, NearestFilter, NearestMipmapNearestFilter, NearestMipmapLinearFilter, LinearFilter, LinearMipmapNearestFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping, RepeatWrapping, MirroredRepeatWrapping } from 'three';\n\nvar GLTFExporter = function () {\n  function GLTFExporter() {\n    this.pluginCallbacks = [];\n    this.register(function (writer) {\n      return new GLTFLightExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsUnlitExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsPBRSpecularGlossiness(writer);\n    });\n  }\n\n  GLTFExporter.prototype = {\n    constructor: GLTFExporter,\n    register: function register(callback) {\n      if (this.pluginCallbacks.indexOf(callback) === -1) {\n        this.pluginCallbacks.push(callback);\n      }\n\n      return this;\n    },\n    unregister: function unregister(callback) {\n      if (this.pluginCallbacks.indexOf(callback) !== -1) {\n        this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(callback), 1);\n      }\n\n      return this;\n    },\n\n    /**\n     * Parse scenes and generate GLTF output\n     * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n     * @param  {Function} onDone  Callback on completed\n     * @param  {Object} options options\n     */\n    parse: function parse(input, onDone, options) {\n      var writer = new GLTFWriter();\n      var plugins = [];\n\n      for (var i = 0, il = this.pluginCallbacks.length; i < il; i++) {\n        plugins.push(this.pluginCallbacks[i](writer));\n      }\n\n      writer.setPlugins(plugins);\n      writer.write(input, onDone, options);\n    }\n  }; //------------------------------------------------------------------------------\n  // Constants\n  //------------------------------------------------------------------------------\n\n  var WEBGL_CONSTANTS = {\n    POINTS: 0x0000,\n    LINES: 0x0001,\n    LINE_LOOP: 0x0002,\n    LINE_STRIP: 0x0003,\n    TRIANGLES: 0x0004,\n    TRIANGLE_STRIP: 0x0005,\n    TRIANGLE_FAN: 0x0006,\n    UNSIGNED_BYTE: 0x1401,\n    UNSIGNED_SHORT: 0x1403,\n    FLOAT: 0x1406,\n    UNSIGNED_INT: 0x1405,\n    ARRAY_BUFFER: 0x8892,\n    ELEMENT_ARRAY_BUFFER: 0x8893,\n    NEAREST: 0x2600,\n    LINEAR: 0x2601,\n    NEAREST_MIPMAP_NEAREST: 0x2700,\n    LINEAR_MIPMAP_NEAREST: 0x2701,\n    NEAREST_MIPMAP_LINEAR: 0x2702,\n    LINEAR_MIPMAP_LINEAR: 0x2703,\n    CLAMP_TO_EDGE: 33071,\n    MIRRORED_REPEAT: 33648,\n    REPEAT: 10497\n  };\n  var THREE_TO_WEBGL = {};\n  THREE_TO_WEBGL[NearestFilter] = WEBGL_CONSTANTS.NEAREST;\n  THREE_TO_WEBGL[NearestMipmapNearestFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\n  THREE_TO_WEBGL[NearestMipmapLinearFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\n  THREE_TO_WEBGL[LinearFilter] = WEBGL_CONSTANTS.LINEAR;\n  THREE_TO_WEBGL[LinearMipmapNearestFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\n  THREE_TO_WEBGL[LinearMipmapLinearFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\n  THREE_TO_WEBGL[ClampToEdgeWrapping] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\n  THREE_TO_WEBGL[RepeatWrapping] = WEBGL_CONSTANTS.REPEAT;\n  THREE_TO_WEBGL[MirroredRepeatWrapping] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\n  var PATH_PROPERTIES = {\n    scale: 'scale',\n    position: 'translation',\n    quaternion: 'rotation',\n    morphTargetInfluences: 'weights'\n  }; // GLB constants\n  // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n\n  var GLB_HEADER_BYTES = 12;\n  var GLB_HEADER_MAGIC = 0x46546c67;\n  var GLB_VERSION = 2;\n  var GLB_CHUNK_PREFIX_BYTES = 8;\n  var GLB_CHUNK_TYPE_JSON = 0x4e4f534a;\n  var GLB_CHUNK_TYPE_BIN = 0x004e4942; //------------------------------------------------------------------------------\n  // Utility functions\n  //------------------------------------------------------------------------------\n\n  /**\n   * Compare two arrays\n   * @param  {Array} array1 Array 1 to compare\n   * @param  {Array} array2 Array 2 to compare\n   * @return {Boolean}        Returns true if both arrays are equal\n   */\n\n  function equalArray(array1, array2) {\n    return array1.length === array2.length && array1.every(function (element, index) {\n      return element === array2[index];\n    });\n  }\n  /**\n   * Converts a string to an ArrayBuffer.\n   * @param  {string} text\n   * @return {ArrayBuffer}\n   */\n\n\n  function stringToArrayBuffer(text) {\n    if (window.TextEncoder !== undefined) {\n      return new TextEncoder().encode(text).buffer;\n    }\n\n    var array = new Uint8Array(new ArrayBuffer(text.length));\n\n    for (var i = 0, il = text.length; i < il; i++) {\n      var value = text.charCodeAt(i); // Replacing multi-byte character with space(0x20).\n\n      array[i] = value > 0xff ? 0x20 : value;\n    }\n\n    return array.buffer;\n  }\n  /**\n   * Is identity matrix\n   *\n   * @param {Matrix4} matrix\n   * @returns {Boolean} Returns true, if parameter is identity matrix\n   */\n\n\n  function isIdentityMatrix(matrix) {\n    return equalArray(matrix.elements, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n  }\n  /**\n   * Get the min and max vectors from the given attribute\n   * @param  {BufferAttribute} attribute Attribute to find the min/max in range from start to start + count\n   * @param  {Integer} start\n   * @param  {Integer} count\n   * @return {Object} Object containing the `min` and `max` values (As an array of attribute.itemSize components)\n   */\n\n\n  function getMinMax(attribute, start, count) {\n    var output = {\n      min: new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),\n      max: new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)\n    };\n\n    for (var i = start; i < start + count; i++) {\n      for (var a = 0; a < attribute.itemSize; a++) {\n        var value = void 0;\n\n        if (attribute.itemSize > 4) {\n          // no support for interleaved data for itemSize > 4\n          value = attribute.array[i * attribute.itemSize + a];\n        } else {\n          if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n        }\n\n        output.min[a] = Math.min(output.min[a], value);\n        output.max[a] = Math.max(output.max[a], value);\n      }\n    }\n\n    return output;\n  }\n  /**\n   * Get the required size + padding for a buffer, rounded to the next 4-byte boundary.\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#data-alignment\n   *\n   * @param {Integer} bufferSize The size the original buffer.\n   * @returns {Integer} new buffer size with required padding.\n   *\n   */\n\n\n  function getPaddedBufferSize(bufferSize) {\n    return Math.ceil(bufferSize / 4) * 4;\n  }\n  /**\n   * Returns a buffer aligned to 4-byte boundary.\n   *\n   * @param {ArrayBuffer} arrayBuffer Buffer to pad\n   * @param {Integer} paddingByte (Optional)\n   * @returns {ArrayBuffer} The same buffer if it's already aligned to 4-byte boundary or a new buffer\n   */\n\n\n  function getPaddedArrayBuffer(arrayBuffer, paddingByte) {\n    paddingByte = paddingByte || 0;\n    var paddedLength = getPaddedBufferSize(arrayBuffer.byteLength);\n\n    if (paddedLength !== arrayBuffer.byteLength) {\n      var array = new Uint8Array(paddedLength);\n      array.set(new Uint8Array(arrayBuffer));\n\n      if (paddingByte !== 0) {\n        for (var i = arrayBuffer.byteLength; i < paddedLength; i++) {\n          array[i] = paddingByte;\n        }\n      }\n\n      return array.buffer;\n    }\n\n    return arrayBuffer;\n  }\n\n  var cachedCanvas = null;\n  /**\n   * Writer\n   */\n\n  function GLTFWriter() {\n    this.plugins = [];\n    this.options = {};\n    this.pending = [];\n    this.buffers = [];\n    this.byteOffset = 0;\n    this.buffers = [];\n    this.nodeMap = new Map();\n    this.skins = [];\n    this.extensionsUsed = {};\n    this.uids = new Map();\n    this.uid = 0;\n    this.json = {\n      asset: {\n        version: '2.0',\n        generator: 'THREE.GLTFExporter'\n      }\n    };\n    this.cache = {\n      meshes: new Map(),\n      attributes: new Map(),\n      attributesNormalized: new Map(),\n      materials: new Map(),\n      textures: new Map(),\n      images: new Map()\n    };\n  }\n\n  GLTFWriter.prototype = {\n    constructor: GLTFWriter,\n    setPlugins: function setPlugins(plugins) {\n      this.plugins = plugins;\n    },\n\n    /**\n     * Parse scenes and generate GLTF output\n     * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n     * @param  {Function} onDone  Callback on completed\n     * @param  {Object} options options\n     */\n    write: function write(input, onDone, options) {\n      this.options = Object.assign({}, {\n        // default options\n        binary: false,\n        trs: false,\n        onlyVisible: true,\n        truncateDrawRange: true,\n        embedImages: true,\n        maxTextureSize: Infinity,\n        animations: [],\n        includeCustomExtensions: false\n      }, options);\n\n      if (this.options.animations.length > 0) {\n        // Only TRS properties, and not matrices, may be targeted by animation.\n        this.options.trs = true;\n      }\n\n      this.processInput(input);\n      var writer = this;\n      Promise.all(this.pending).then(function () {\n        var buffers = writer.buffers;\n        var json = writer.json;\n        var options = writer.options;\n        var extensionsUsed = writer.extensionsUsed; // Merge buffers.\n\n        var blob = new Blob(buffers, {\n          type: 'application/octet-stream'\n        }); // Declare extensions.\n\n        var extensionsUsedList = Object.keys(extensionsUsed);\n        if (extensionsUsedList.length > 0) json.extensionsUsed = extensionsUsedList; // Update bytelength of the single buffer.\n\n        if (json.buffers && json.buffers.length > 0) json.buffers[0].byteLength = blob.size;\n\n        if (options.binary === true) {\n          // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n          var reader = new window.FileReader();\n          reader.readAsArrayBuffer(blob);\n\n          reader.onloadend = function () {\n            // Binary chunk.\n            var binaryChunk = getPaddedArrayBuffer(reader.result);\n            var binaryChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n            binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);\n            binaryChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_BIN, true); // JSON chunk.\n\n            var jsonChunk = getPaddedArrayBuffer(stringToArrayBuffer(JSON.stringify(json)), 0x20);\n            var jsonChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n            jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);\n            jsonChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_JSON, true); // GLB header.\n\n            var header = new ArrayBuffer(GLB_HEADER_BYTES);\n            var headerView = new DataView(header);\n            headerView.setUint32(0, GLB_HEADER_MAGIC, true);\n            headerView.setUint32(4, GLB_VERSION, true);\n            var totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n            headerView.setUint32(8, totalByteLength, true);\n            var glbBlob = new Blob([header, jsonChunkPrefix, jsonChunk, binaryChunkPrefix, binaryChunk], {\n              type: 'application/octet-stream'\n            });\n            var glbReader = new window.FileReader();\n            glbReader.readAsArrayBuffer(glbBlob);\n\n            glbReader.onloadend = function () {\n              onDone(glbReader.result);\n            };\n          };\n        } else {\n          if (json.buffers && json.buffers.length > 0) {\n            var reader = new window.FileReader();\n            reader.readAsDataURL(blob);\n\n            reader.onloadend = function () {\n              var base64data = reader.result;\n              json.buffers[0].uri = base64data;\n              onDone(json);\n            };\n          } else {\n            onDone(json);\n          }\n        }\n      });\n    },\n\n    /**\n     * Serializes a userData.\n     *\n     * @param {THREE.Object3D|THREE.Material} object\n     * @param {Object} objectDef\n     */\n    serializeUserData: function serializeUserData(object, objectDef) {\n      if (Object.keys(object.userData).length === 0) return;\n      var options = this.options;\n      var extensionsUsed = this.extensionsUsed;\n\n      try {\n        var json = JSON.parse(JSON.stringify(object.userData));\n\n        if (options.includeCustomExtensions && json.gltfExtensions) {\n          if (objectDef.extensions === undefined) objectDef.extensions = {};\n\n          for (var extensionName in json.gltfExtensions) {\n            objectDef.extensions[extensionName] = json.gltfExtensions[extensionName];\n            extensionsUsed[extensionName] = true;\n          }\n\n          delete json.gltfExtensions;\n        }\n\n        if (Object.keys(json).length > 0) objectDef.extras = json;\n      } catch (error) {\n        console.warn(\"THREE.GLTFExporter: userData of '\".concat(object.name, \"' won't be serialized because of JSON.stringify error - \").concat(error.message));\n      }\n    },\n\n    /**\n     * Assign and return a temporal unique id for an object\n     * especially which doesn't have .uuid\n     * @param  {Object} object\n     * @return {Integer}\n     */\n    getUID: function getUID(object) {\n      if (!this.uids.has(object)) this.uids.set(object, this.uid++);\n      return this.uids.get(object);\n    },\n\n    /**\n     * Checks if normal attribute values are normalized.\n     *\n     * @param {BufferAttribute} normal\n     * @returns {Boolean}\n     */\n    isNormalizedNormalAttribute: function isNormalizedNormalAttribute(normal) {\n      var cache = this.cache;\n      if (cache.attributesNormalized.has(normal)) return false;\n      var v = new Vector3();\n\n      for (var i = 0, il = normal.count; i < il; i++) {\n        // 0.0005 is from glTF-validator\n        if (Math.abs(v.fromBufferAttribute(normal, i).length() - 1.0) > 0.0005) return false;\n      }\n\n      return true;\n    },\n\n    /**\n     * Creates normalized normal buffer attribute.\n     *\n     * @param {BufferAttribute} normal\n     * @returns {BufferAttribute}\n     *\n     */\n    createNormalizedNormalAttribute: function createNormalizedNormalAttribute(normal) {\n      var cache = this.cache;\n      if (cache.attributesNormalized.has(normal)) return cache.attributesNormalized.get(normal);\n      var attribute = normal.clone();\n      var v = new Vector3();\n\n      for (var i = 0, il = attribute.count; i < il; i++) {\n        v.fromBufferAttribute(attribute, i);\n\n        if (v.x === 0 && v.y === 0 && v.z === 0) {\n          // if values can't be normalized set (1, 0, 0)\n          v.setX(1.0);\n        } else {\n          v.normalize();\n        }\n\n        attribute.setXYZ(i, v.x, v.y, v.z);\n      }\n\n      cache.attributesNormalized.set(normal, attribute);\n      return attribute;\n    },\n\n    /**\n     * Applies a texture transform, if present, to the map definition. Requires\n     * the KHR_texture_transform extension.\n     *\n     * @param {Object} mapDef\n     * @param {THREE.Texture} texture\n     */\n    applyTextureTransform: function applyTextureTransform(mapDef, texture) {\n      var didTransform = false;\n      var transformDef = {};\n\n      if (texture.offset.x !== 0 || texture.offset.y !== 0) {\n        transformDef.offset = texture.offset.toArray();\n        didTransform = true;\n      }\n\n      if (texture.rotation !== 0) {\n        transformDef.rotation = texture.rotation;\n        didTransform = true;\n      }\n\n      if (texture.repeat.x !== 1 || texture.repeat.y !== 1) {\n        transformDef.scale = texture.repeat.toArray();\n        didTransform = true;\n      }\n\n      if (didTransform) {\n        mapDef.extensions = mapDef.extensions || {};\n        mapDef.extensions['KHR_texture_transform'] = transformDef;\n        this.extensionsUsed['KHR_texture_transform'] = true;\n      }\n    },\n\n    /**\n     * Process a buffer to append to the default one.\n     * @param  {ArrayBuffer} buffer\n     * @return {Integer}\n     */\n    processBuffer: function processBuffer(buffer) {\n      var json = this.json;\n      var buffers = this.buffers;\n      if (!json.buffers) json.buffers = [{\n        byteLength: 0\n      }]; // All buffers are merged before export.\n\n      buffers.push(buffer);\n      return 0;\n    },\n\n    /**\n     * Process and generate a BufferView\n     * @param  {BufferAttribute} attribute\n     * @param  {number} componentType\n     * @param  {number} start\n     * @param  {number} count\n     * @param  {number} target (Optional) Target usage of the BufferView\n     * @return {Object}\n     */\n    processBufferView: function processBufferView(attribute, componentType, start, count, target) {\n      var json = this.json;\n      if (!json.bufferViews) json.bufferViews = []; // Create a new dataview and dump the attribute's array into it\n\n      var componentSize;\n\n      if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n        componentSize = 1;\n      } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n        componentSize = 2;\n      } else {\n        componentSize = 4;\n      }\n\n      var byteLength = getPaddedBufferSize(count * attribute.itemSize * componentSize);\n      var dataView = new DataView(new ArrayBuffer(byteLength));\n      var offset = 0;\n\n      for (var i = start; i < start + count; i++) {\n        for (var a = 0; a < attribute.itemSize; a++) {\n          var value = void 0;\n\n          if (attribute.itemSize > 4) {\n            // no support for interleaved data for itemSize > 4\n            value = attribute.array[i * attribute.itemSize + a];\n          } else {\n            if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n          }\n\n          if (componentType === WEBGL_CONSTANTS.FLOAT) {\n            dataView.setFloat32(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_INT) {\n            dataView.setUint32(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n            dataView.setUint16(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n            dataView.setUint8(offset, value);\n          }\n\n          offset += componentSize;\n        }\n      }\n\n      var bufferViewDef = {\n        buffer: this.processBuffer(dataView.buffer),\n        byteOffset: this.byteOffset,\n        byteLength: byteLength\n      };\n      if (target !== undefined) bufferViewDef.target = target;\n\n      if (target === WEBGL_CONSTANTS.ARRAY_BUFFER) {\n        // Only define byteStride for vertex attributes.\n        bufferViewDef.byteStride = attribute.itemSize * componentSize;\n      }\n\n      this.byteOffset += byteLength;\n      json.bufferViews.push(bufferViewDef); // @TODO Merge bufferViews where possible.\n\n      var output = {\n        id: json.bufferViews.length - 1,\n        byteLength: 0\n      };\n      return output;\n    },\n\n    /**\n     * Process and generate a BufferView from an image Blob.\n     * @param {Blob} blob\n     * @return {Promise<Integer>}\n     */\n    processBufferViewImage: function processBufferViewImage(blob) {\n      var writer = this;\n      var json = writer.json;\n      if (!json.bufferViews) json.bufferViews = [];\n      return new Promise(function (resolve) {\n        var reader = new window.FileReader();\n        reader.readAsArrayBuffer(blob);\n\n        reader.onloadend = function () {\n          var buffer = getPaddedArrayBuffer(reader.result);\n          var bufferViewDef = {\n            buffer: writer.processBuffer(buffer),\n            byteOffset: writer.byteOffset,\n            byteLength: buffer.byteLength\n          };\n          writer.byteOffset += buffer.byteLength;\n          resolve(json.bufferViews.push(bufferViewDef) - 1);\n        };\n      });\n    },\n\n    /**\n     * Process attribute to generate an accessor\n     * @param  {BufferAttribute} attribute Attribute to process\n     * @param  {THREE.BufferGeometry} geometry (Optional) Geometry used for truncated draw range\n     * @param  {Integer} start (Optional)\n     * @param  {Integer} count (Optional)\n     * @return {Integer|null} Index of the processed accessor on the \"accessors\" array\n     */\n    processAccessor: function processAccessor(attribute, geometry, start, count) {\n      var options = this.options;\n      var json = this.json;\n      var types = {\n        1: 'SCALAR',\n        2: 'VEC2',\n        3: 'VEC3',\n        4: 'VEC4',\n        16: 'MAT4'\n      };\n      var componentType; // Detect the component type of the attribute array (float, uint or ushort)\n\n      if (attribute.array.constructor === Float32Array) {\n        componentType = WEBGL_CONSTANTS.FLOAT;\n      } else if (attribute.array.constructor === Uint32Array) {\n        componentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n      } else if (attribute.array.constructor === Uint16Array) {\n        componentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n      } else if (attribute.array.constructor === Uint8Array) {\n        componentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n      } else {\n        throw new Error('THREE.GLTFExporter: Unsupported bufferAttribute component type.');\n      }\n\n      if (start === undefined) start = 0;\n      if (count === undefined) count = attribute.count; // @TODO Indexed buffer geometry with drawRange not supported yet\n\n      if (options.truncateDrawRange && geometry !== undefined && geometry.index === null) {\n        var end = start + count;\n        var end2 = geometry.drawRange.count === Infinity ? attribute.count : geometry.drawRange.start + geometry.drawRange.count;\n        start = Math.max(start, geometry.drawRange.start);\n        count = Math.min(end, end2) - start;\n        if (count < 0) count = 0;\n      } // Skip creating an accessor if the attribute doesn't have data to export\n\n\n      if (count === 0) return null;\n      var minMax = getMinMax(attribute, start, count);\n      var bufferViewTarget; // If geometry isn't provided, don't infer the target usage of the bufferView. For\n      // animation samplers, target must not be set.\n\n      if (geometry !== undefined) {\n        bufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n      }\n\n      var bufferView = this.processBufferView(attribute, componentType, start, count, bufferViewTarget);\n      var accessorDef = {\n        bufferView: bufferView.id,\n        byteOffset: bufferView.byteOffset,\n        componentType: componentType,\n        count: count,\n        max: minMax.max,\n        min: minMax.min,\n        type: types[attribute.itemSize]\n      };\n      if (attribute.normalized === true) accessorDef.normalized = true;\n      if (!json.accessors) json.accessors = [];\n      return json.accessors.push(accessorDef) - 1;\n    },\n\n    /**\n     * Process image\n     * @param  {Image} image to process\n     * @param  {Integer} format of the image (e.g. RGBFormat, RGBAFormat etc)\n     * @param  {Boolean} flipY before writing out the image\n     * @return {Integer}     Index of the processed texture in the \"images\" array\n     */\n    processImage: function processImage(image, format, flipY) {\n      var writer = this;\n      var cache = writer.cache;\n      var json = writer.json;\n      var options = writer.options;\n      var pending = writer.pending;\n      if (!cache.images.has(image)) cache.images.set(image, {});\n      var cachedImages = cache.images.get(image);\n      var mimeType = format === RGBAFormat ? 'image/png' : 'image/jpeg';\n      var key = \"\".concat(mimeType, \":flipY/\").concat(flipY.toString());\n      if (cachedImages[key] !== undefined) return cachedImages[key];\n      if (!json.images) json.images = [];\n      var imageDef = {\n        mimeType: mimeType\n      };\n\n      if (options.embedImages) {\n        var canvas = cachedCanvas = cachedCanvas || document.createElement('canvas');\n        canvas.width = Math.min(image.width, options.maxTextureSize);\n        canvas.height = Math.min(image.height, options.maxTextureSize);\n        var ctx = canvas.getContext('2d');\n\n        if (flipY === true) {\n          ctx.translate(0, canvas.height);\n          ctx.scale(1, -1);\n        }\n\n        if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n          ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        } else {\n          if (format !== RGBAFormat && format !== RGBFormat) {\n            console.error('GLTFExporter: Only RGB and RGBA formats are supported.');\n          }\n\n          if (image.width > options.maxTextureSize || image.height > options.maxTextureSize) {\n            console.warn('GLTFExporter: Image size is bigger than maxTextureSize', image);\n          }\n\n          var data = image.data;\n\n          if (format === RGBFormat) {\n            data = new Uint8ClampedArray(image.height * image.width * 4);\n\n            for (var i = 0, j = 0; i < data.length; i += 4, j += 3) {\n              data[i + 0] = image.data[j + 0];\n              data[i + 1] = image.data[j + 1];\n              data[i + 2] = image.data[j + 2];\n              data[i + 3] = 255;\n            }\n          }\n\n          ctx.putImageData(new ImageData(data, image.width, image.height), 0, 0);\n        }\n\n        if (options.binary === true) {\n          pending.push(new Promise(function (resolve) {\n            canvas.toBlob(function (blob) {\n              writer.processBufferViewImage(blob).then(function (bufferViewIndex) {\n                imageDef.bufferView = bufferViewIndex;\n                resolve();\n              });\n            }, mimeType);\n          }));\n        } else {\n          imageDef.uri = canvas.toDataURL(mimeType);\n        }\n      } else {\n        imageDef.uri = image.src;\n      }\n\n      var index = json.images.push(imageDef) - 1;\n      cachedImages[key] = index;\n      return index;\n    },\n\n    /**\n     * Process sampler\n     * @param  {Texture} map Texture to process\n     * @return {Integer}     Index of the processed texture in the \"samplers\" array\n     */\n    processSampler: function processSampler(map) {\n      var json = this.json;\n      if (!json.samplers) json.samplers = [];\n      var samplerDef = {\n        magFilter: THREE_TO_WEBGL[map.magFilter],\n        minFilter: THREE_TO_WEBGL[map.minFilter],\n        wrapS: THREE_TO_WEBGL[map.wrapS],\n        wrapT: THREE_TO_WEBGL[map.wrapT]\n      };\n      return json.samplers.push(samplerDef) - 1;\n    },\n\n    /**\n     * Process texture\n     * @param  {Texture} map Map to process\n     * @return {Integer} Index of the processed texture in the \"textures\" array\n     */\n    processTexture: function processTexture(map) {\n      var cache = this.cache;\n      var json = this.json;\n      if (cache.textures.has(map)) return cache.textures.get(map);\n      if (!json.textures) json.textures = [];\n      var textureDef = {\n        sampler: this.processSampler(map),\n        source: this.processImage(map.image, map.format, map.flipY)\n      };\n      if (map.name) textureDef.name = map.name;\n\n      this._invokeAll(function (ext) {\n        ext.writeTexture && ext.writeTexture(map, textureDef);\n      });\n\n      var index = json.textures.push(textureDef) - 1;\n      cache.textures.set(map, index);\n      return index;\n    },\n\n    /**\n     * Process material\n     * @param  {THREE.Material} material Material to process\n     * @return {Integer|null} Index of the processed material in the \"materials\" array\n     */\n    processMaterial: function processMaterial(material) {\n      var cache = this.cache;\n      var json = this.json;\n      if (cache.materials.has(material)) return cache.materials.get(material);\n\n      if (material.isShaderMaterial) {\n        console.warn('GLTFExporter: THREE.ShaderMaterial not supported.');\n        return null;\n      }\n\n      if (!json.materials) json.materials = []; // @QUESTION Should we avoid including any attribute that has the default value?\n\n      var materialDef = {\n        pbrMetallicRoughness: {}\n      };\n\n      if (material.isMeshStandardMaterial !== true && material.isMeshBasicMaterial !== true) {\n        console.warn('GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.');\n      } // pbrMetallicRoughness.baseColorFactor\n\n\n      var color = material.color.toArray().concat([material.opacity]);\n\n      if (!equalArray(color, [1, 1, 1, 1])) {\n        materialDef.pbrMetallicRoughness.baseColorFactor = color;\n      }\n\n      if (material.isMeshStandardMaterial) {\n        materialDef.pbrMetallicRoughness.metallicFactor = material.metalness;\n        materialDef.pbrMetallicRoughness.roughnessFactor = material.roughness;\n      } else {\n        materialDef.pbrMetallicRoughness.metallicFactor = 0.5;\n        materialDef.pbrMetallicRoughness.roughnessFactor = 0.5;\n      } // pbrMetallicRoughness.metallicRoughnessTexture\n\n\n      if (material.metalnessMap || material.roughnessMap) {\n        if (material.metalnessMap === material.roughnessMap) {\n          var metalRoughMapDef = {\n            index: this.processTexture(material.metalnessMap)\n          };\n          this.applyTextureTransform(metalRoughMapDef, material.metalnessMap);\n          materialDef.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n        } else {\n          console.warn('THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.');\n        }\n      } // pbrMetallicRoughness.baseColorTexture or pbrSpecularGlossiness diffuseTexture\n\n\n      if (material.map) {\n        var baseColorMapDef = {\n          index: this.processTexture(material.map)\n        };\n        this.applyTextureTransform(baseColorMapDef, material.map);\n        materialDef.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n      }\n\n      if (material.emissive) {\n        // emissiveFactor\n        var emissive = material.emissive.clone().multiplyScalar(material.emissiveIntensity).toArray();\n\n        if (!equalArray(emissive, [0, 0, 0])) {\n          materialDef.emissiveFactor = emissive;\n        } // emissiveTexture\n\n\n        if (material.emissiveMap) {\n          var emissiveMapDef = {\n            index: this.processTexture(material.emissiveMap)\n          };\n          this.applyTextureTransform(emissiveMapDef, material.emissiveMap);\n          materialDef.emissiveTexture = emissiveMapDef;\n        }\n      } // normalTexture\n\n\n      if (material.normalMap) {\n        var normalMapDef = {\n          index: this.processTexture(material.normalMap)\n        };\n\n        if (material.normalScale && material.normalScale.x !== -1) {\n          if (material.normalScale.x !== material.normalScale.y) {\n            console.warn('THREE.GLTFExporter: Normal scale components are different, ignoring Y and exporting X.');\n          }\n\n          normalMapDef.scale = material.normalScale.x;\n        }\n\n        this.applyTextureTransform(normalMapDef, material.normalMap);\n        materialDef.normalTexture = normalMapDef;\n      } // occlusionTexture\n\n\n      if (material.aoMap) {\n        var occlusionMapDef = {\n          index: this.processTexture(material.aoMap),\n          texCoord: 1\n        };\n\n        if (material.aoMapIntensity !== 1.0) {\n          occlusionMapDef.strength = material.aoMapIntensity;\n        }\n\n        this.applyTextureTransform(occlusionMapDef, material.aoMap);\n        materialDef.occlusionTexture = occlusionMapDef;\n      } // alphaMode\n\n\n      if (material.transparent) {\n        materialDef.alphaMode = 'BLEND';\n      } else {\n        if (material.alphaTest > 0.0) {\n          materialDef.alphaMode = 'MASK';\n          materialDef.alphaCutoff = material.alphaTest;\n        }\n      } // doubleSided\n\n\n      if (material.side === DoubleSide) materialDef.doubleSided = true;\n      if (material.name !== '') materialDef.name = material.name;\n      this.serializeUserData(material, materialDef);\n\n      this._invokeAll(function (ext) {\n        ext.writeMaterial && ext.writeMaterial(material, materialDef);\n      });\n\n      var index = json.materials.push(materialDef) - 1;\n      cache.materials.set(material, index);\n      return index;\n    },\n\n    /**\n     * Process mesh\n     * @param  {THREE.Mesh} mesh Mesh to process\n     * @return {Integer|null} Index of the processed mesh in the \"meshes\" array\n     */\n    processMesh: function processMesh(mesh) {\n      var cache = this.cache;\n      var json = this.json;\n      var meshCacheKeyParts = [mesh.geometry.uuid];\n\n      if (Array.isArray(mesh.material)) {\n        for (var i = 0, l = mesh.material.length; i < l; i++) {\n          meshCacheKeyParts.push(mesh.material[i].uuid);\n        }\n      } else {\n        meshCacheKeyParts.push(mesh.material.uuid);\n      }\n\n      var meshCacheKey = meshCacheKeyParts.join(':');\n      if (cache.meshes.has(meshCacheKey)) return cache.meshes.get(meshCacheKey);\n      var geometry = mesh.geometry;\n      var mode; // Use the correct mode\n\n      if (mesh.isLineSegments) {\n        mode = WEBGL_CONSTANTS.LINES;\n      } else if (mesh.isLineLoop) {\n        mode = WEBGL_CONSTANTS.LINE_LOOP;\n      } else if (mesh.isLine) {\n        mode = WEBGL_CONSTANTS.LINE_STRIP;\n      } else if (mesh.isPoints) {\n        mode = WEBGL_CONSTANTS.POINTS;\n      } else {\n        mode = mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n      }\n\n      if (geometry.isBufferGeometry !== true) {\n        throw new Error('THREE.GLTFExporter: Geometry is not of type THREE.BufferGeometry.');\n      }\n\n      var meshDef = {};\n      var attributes = {};\n      var primitives = [];\n      var targets = []; // Conversion between attributes names in threejs and gltf spec\n\n      var nameConversion = {\n        uv: 'TEXCOORD_0',\n        uv2: 'TEXCOORD_1',\n        color: 'COLOR_0',\n        skinWeight: 'WEIGHTS_0',\n        skinIndex: 'JOINTS_0'\n      };\n      var originalNormal = geometry.getAttribute('normal');\n\n      if (originalNormal !== undefined && !this.isNormalizedNormalAttribute(originalNormal)) {\n        console.warn('THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.');\n        geometry.setAttribute('normal', this.createNormalizedNormalAttribute(originalNormal));\n      } // @QUESTION Detect if .vertexColors = true?\n      // For every attribute create an accessor\n\n\n      var modifiedAttribute = null;\n\n      for (var attributeName in geometry.attributes) {\n        // Ignore morph target attributes, which are exported later.\n        if (attributeName.substr(0, 5) === 'morph') continue;\n        var attribute = geometry.attributes[attributeName];\n        attributeName = nameConversion[attributeName] || attributeName.toUpperCase(); // Prefix all geometry attributes except the ones specifically\n        // listed in the spec; non-spec attributes are considered custom.\n\n        var validVertexAttributes = /^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n        if (!validVertexAttributes.test(attributeName)) attributeName = \"_\".concat(attributeName);\n\n        if (cache.attributes.has(this.getUID(attribute))) {\n          attributes[attributeName] = cache.attributes.get(this.getUID(attribute));\n          continue;\n        } // JOINTS_0 must be UNSIGNED_BYTE or UNSIGNED_SHORT.\n\n\n        modifiedAttribute = null;\n        var array = attribute.array;\n\n        if (attributeName === 'JOINTS_0' && !(array instanceof Uint16Array) && !(array instanceof Uint8Array)) {\n          console.warn('GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.');\n          modifiedAttribute = new BufferAttribute(new Uint16Array(array), attribute.itemSize, attribute.normalized);\n        }\n\n        var accessor = this.processAccessor(modifiedAttribute || attribute, geometry);\n\n        if (accessor !== null) {\n          attributes[attributeName] = accessor;\n          cache.attributes.set(this.getUID(attribute), accessor);\n        }\n      }\n\n      if (originalNormal !== undefined) geometry.setAttribute('normal', originalNormal); // Skip if no exportable attributes found\n\n      if (Object.keys(attributes).length === 0) return null; // Morph targets\n\n      if (mesh.morphTargetInfluences !== undefined && mesh.morphTargetInfluences.length > 0) {\n        var weights = [];\n        var targetNames = [];\n        var reverseDictionary = {};\n\n        if (mesh.morphTargetDictionary !== undefined) {\n          for (var key in mesh.morphTargetDictionary) {\n            reverseDictionary[mesh.morphTargetDictionary[key]] = key;\n          }\n        }\n\n        for (var _i = 0; _i < mesh.morphTargetInfluences.length; ++_i) {\n          var target = {};\n          var warned = false;\n\n          for (var _attributeName in geometry.morphAttributes) {\n            // glTF 2.0 morph supports only POSITION/NORMAL/TANGENT.\n            // Three.js doesn't support TANGENT yet.\n            if (_attributeName !== 'position' && _attributeName !== 'normal') {\n              if (!warned) {\n                console.warn('GLTFExporter: Only POSITION and NORMAL morph are supported.');\n                warned = true;\n              }\n\n              continue;\n            }\n\n            var attribute = geometry.morphAttributes[_attributeName][_i];\n\n            var gltfAttributeName = _attributeName.toUpperCase(); // Three.js morph attribute has absolute values while the one of glTF has relative values.\n            //\n            // glTF 2.0 Specification:\n            // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#morph-targets\n\n\n            var baseAttribute = geometry.attributes[_attributeName];\n\n            if (cache.attributes.has(this.getUID(attribute))) {\n              target[gltfAttributeName] = cache.attributes.get(this.getUID(attribute));\n              continue;\n            } // Clones attribute not to override\n\n\n            var relativeAttribute = attribute.clone();\n\n            if (!geometry.morphTargetsRelative) {\n              for (var j = 0, jl = attribute.count; j < jl; j++) {\n                relativeAttribute.setXYZ(j, attribute.getX(j) - baseAttribute.getX(j), attribute.getY(j) - baseAttribute.getY(j), attribute.getZ(j) - baseAttribute.getZ(j));\n              }\n            }\n\n            target[gltfAttributeName] = this.processAccessor(relativeAttribute, geometry);\n            cache.attributes.set(this.getUID(baseAttribute), target[gltfAttributeName]);\n          }\n\n          targets.push(target);\n          weights.push(mesh.morphTargetInfluences[_i]);\n          if (mesh.morphTargetDictionary !== undefined) targetNames.push(reverseDictionary[_i]);\n        }\n\n        meshDef.weights = weights;\n\n        if (targetNames.length > 0) {\n          meshDef.extras = {};\n          meshDef.extras.targetNames = targetNames;\n        }\n      }\n\n      var isMultiMaterial = Array.isArray(mesh.material);\n      if (isMultiMaterial && geometry.groups.length === 0) return null;\n      var materials = isMultiMaterial ? mesh.material : [mesh.material];\n      var groups = isMultiMaterial ? geometry.groups : [{\n        materialIndex: 0,\n        start: undefined,\n        count: undefined\n      }];\n\n      for (var _i2 = 0, il = groups.length; _i2 < il; _i2++) {\n        var primitive = {\n          mode: mode,\n          attributes: attributes\n        };\n        this.serializeUserData(geometry, primitive);\n        if (targets.length > 0) primitive.targets = targets;\n\n        if (geometry.index !== null) {\n          var cacheKey = this.getUID(geometry.index);\n\n          if (groups[_i2].start !== undefined || groups[_i2].count !== undefined) {\n            cacheKey += \":\".concat(groups[_i2].start, \":\").concat(groups[_i2].count);\n          }\n\n          if (cache.attributes.has(cacheKey)) {\n            primitive.indices = cache.attributes.get(cacheKey);\n          } else {\n            primitive.indices = this.processAccessor(geometry.index, geometry, groups[_i2].start, groups[_i2].count);\n            cache.attributes.set(cacheKey, primitive.indices);\n          }\n\n          if (primitive.indices === null) delete primitive.indices;\n        }\n\n        var material = this.processMaterial(materials[groups[_i2].materialIndex]);\n        if (material !== null) primitive.material = material;\n        primitives.push(primitive);\n      }\n\n      meshDef.primitives = primitives;\n      if (!json.meshes) json.meshes = [];\n\n      this._invokeAll(function (ext) {\n        ext.writeMesh && ext.writeMesh(mesh, meshDef);\n      });\n\n      var index = json.meshes.push(meshDef) - 1;\n      cache.meshes.set(meshCacheKey, index);\n      return index;\n    },\n\n    /**\n     * Process camera\n     * @param  {THREE.Camera} camera Camera to process\n     * @return {Integer}      Index of the processed mesh in the \"camera\" array\n     */\n    processCamera: function processCamera(camera) {\n      var json = this.json;\n      if (!json.cameras) json.cameras = [];\n      var isOrtho = camera.isOrthographicCamera;\n      var cameraDef = {\n        type: isOrtho ? 'orthographic' : 'perspective'\n      };\n\n      if (isOrtho) {\n        cameraDef.orthographic = {\n          xmag: camera.right * 2,\n          ymag: camera.top * 2,\n          zfar: camera.far <= 0 ? 0.001 : camera.far,\n          znear: camera.near < 0 ? 0 : camera.near\n        };\n      } else {\n        cameraDef.perspective = {\n          aspectRatio: camera.aspect,\n          yfov: MathUtils.degToRad(camera.fov),\n          zfar: camera.far <= 0 ? 0.001 : camera.far,\n          znear: camera.near < 0 ? 0 : camera.near\n        };\n      } // Question: Is saving \"type\" as name intentional?\n\n\n      if (camera.name !== '') cameraDef.name = camera.type;\n      return json.cameras.push(cameraDef) - 1;\n    },\n\n    /**\n     * Creates glTF animation entry from AnimationClip object.\n     *\n     * Status:\n     * - Only properties listed in PATH_PROPERTIES may be animated.\n     *\n     * @param {THREE.AnimationClip} clip\n     * @param {THREE.Object3D} root\n     * @return {number|null}\n     */\n    processAnimation: function processAnimation(clip, root) {\n      var json = this.json;\n      var nodeMap = this.nodeMap;\n      if (!json.animations) json.animations = [];\n      clip = GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(), root);\n      var tracks = clip.tracks;\n      var channels = [];\n      var samplers = [];\n\n      for (var i = 0; i < tracks.length; ++i) {\n        var track = tracks[i];\n        var trackBinding = PropertyBinding.parseTrackName(track.name);\n        var trackNode = PropertyBinding.findNode(root, trackBinding.nodeName);\n        var trackProperty = PATH_PROPERTIES[trackBinding.propertyName];\n\n        if (trackBinding.objectName === 'bones') {\n          if (trackNode.isSkinnedMesh === true) {\n            trackNode = trackNode.skeleton.getBoneByName(trackBinding.objectIndex);\n          } else {\n            trackNode = undefined;\n          }\n        }\n\n        if (!trackNode || !trackProperty) {\n          console.warn('THREE.GLTFExporter: Could not export animation track \"%s\".', track.name);\n          return null;\n        }\n\n        var inputItemSize = 1;\n        var outputItemSize = track.values.length / track.times.length;\n\n        if (trackProperty === PATH_PROPERTIES.morphTargetInfluences) {\n          outputItemSize /= trackNode.morphTargetInfluences.length;\n        }\n\n        var interpolation = void 0; // @TODO export CubicInterpolant(InterpolateSmooth) as CUBICSPLINE\n        // Detecting glTF cubic spline interpolant by checking factory method's special property\n        // GLTFCubicSplineInterpolant is a custom interpolant and track doesn't return\n        // valid value from .getInterpolation().\n\n        if (track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline === true) {\n          interpolation = 'CUBICSPLINE'; // itemSize of CUBICSPLINE keyframe is 9\n          // (VEC3 * 3: inTangent, splineVertex, and outTangent)\n          // but needs to be stored as VEC3 so dividing by 3 here.\n\n          outputItemSize /= 3;\n        } else if (track.getInterpolation() === InterpolateDiscrete) {\n          interpolation = 'STEP';\n        } else {\n          interpolation = 'LINEAR';\n        }\n\n        samplers.push({\n          input: this.processAccessor(new BufferAttribute(track.times, inputItemSize)),\n          output: this.processAccessor(new BufferAttribute(track.values, outputItemSize)),\n          interpolation: interpolation\n        });\n        channels.push({\n          sampler: samplers.length - 1,\n          target: {\n            node: nodeMap.get(trackNode),\n            path: trackProperty\n          }\n        });\n      }\n\n      json.animations.push({\n        name: clip.name || \"clip_\".concat(json.animations.length),\n        samplers: samplers,\n        channels: channels\n      });\n      return json.animations.length - 1;\n    },\n\n    /**\n     * @param {THREE.Object3D} object\n     * @return {number|null}\n     */\n    processSkin: function processSkin(object) {\n      var json = this.json;\n      var nodeMap = this.nodeMap;\n      var node = json.nodes[nodeMap.get(object)];\n      var skeleton = object.skeleton;\n      if (skeleton === undefined) return null;\n      var rootJoint = object.skeleton.bones[0];\n      if (rootJoint === undefined) return null;\n      var joints = [];\n      var inverseBindMatrices = new Float32Array(skeleton.bones.length * 16);\n      var temporaryBoneInverse = new Matrix4();\n\n      for (var i = 0; i < skeleton.bones.length; ++i) {\n        joints.push(nodeMap.get(skeleton.bones[i]));\n        temporaryBoneInverse.copy(skeleton.boneInverses[i]);\n        temporaryBoneInverse.multiply(object.bindMatrix).toArray(inverseBindMatrices, i * 16);\n      }\n\n      if (json.skins === undefined) json.skins = [];\n      json.skins.push({\n        inverseBindMatrices: this.processAccessor(new BufferAttribute(inverseBindMatrices, 16)),\n        joints: joints,\n        skeleton: nodeMap.get(rootJoint)\n      });\n      var skinIndex = node.skin = json.skins.length - 1;\n      return skinIndex;\n    },\n\n    /**\n     * Process Object3D node\n     * @param  {THREE.Object3D} node Object3D to processNode\n     * @return {Integer} Index of the node in the nodes list\n     */\n    processNode: function processNode(object) {\n      var json = this.json;\n      var options = this.options;\n      var nodeMap = this.nodeMap;\n      if (!json.nodes) json.nodes = [];\n      var nodeDef = {};\n\n      if (options.trs) {\n        var rotation = object.quaternion.toArray();\n        var position = object.position.toArray();\n        var scale = object.scale.toArray();\n\n        if (!equalArray(rotation, [0, 0, 0, 1])) {\n          nodeDef.rotation = rotation;\n        }\n\n        if (!equalArray(position, [0, 0, 0])) {\n          nodeDef.translation = position;\n        }\n\n        if (!equalArray(scale, [1, 1, 1])) {\n          nodeDef.scale = scale;\n        }\n      } else {\n        if (object.matrixAutoUpdate) {\n          object.updateMatrix();\n        }\n\n        if (isIdentityMatrix(object.matrix) === false) {\n          nodeDef.matrix = object.matrix.elements;\n        }\n      } // We don't export empty strings name because it represents no-name in Three.js.\n\n\n      if (object.name !== '') nodeDef.name = String(object.name);\n      this.serializeUserData(object, nodeDef);\n\n      if (object.isMesh || object.isLine || object.isPoints) {\n        var meshIndex = this.processMesh(object);\n        if (meshIndex !== null) nodeDef.mesh = meshIndex;\n      } else if (object.isCamera) {\n        nodeDef.camera = this.processCamera(object);\n      }\n\n      if (object.isSkinnedMesh) this.skins.push(object);\n\n      if (object.children.length > 0) {\n        var children = [];\n\n        for (var i = 0, l = object.children.length; i < l; i++) {\n          var child = object.children[i];\n\n          if (child.visible || options.onlyVisible === false) {\n            var nodeIndex = this.processNode(child);\n            if (nodeIndex !== null) children.push(nodeIndex);\n          }\n        }\n\n        if (children.length > 0) nodeDef.children = children;\n      }\n\n      this._invokeAll(function (ext) {\n        ext.writeNode && ext.writeNode(object, nodeDef);\n      });\n\n      var nodeIndex = json.nodes.push(nodeDef) - 1;\n      nodeMap.set(object, nodeIndex);\n      return nodeIndex;\n    },\n\n    /**\n     * Process Scene\n     * @param  {Scene} node Scene to process\n     */\n    processScene: function processScene(scene) {\n      var json = this.json;\n      var options = this.options;\n\n      if (!json.scenes) {\n        json.scenes = [];\n        json.scene = 0;\n      }\n\n      var sceneDef = {};\n      if (scene.name !== '') sceneDef.name = scene.name;\n      json.scenes.push(sceneDef);\n      var nodes = [];\n\n      for (var i = 0, l = scene.children.length; i < l; i++) {\n        var child = scene.children[i];\n\n        if (child.visible || options.onlyVisible === false) {\n          var nodeIndex = this.processNode(child);\n          if (nodeIndex !== null) nodes.push(nodeIndex);\n        }\n      }\n\n      if (nodes.length > 0) sceneDef.nodes = nodes;\n      this.serializeUserData(scene, sceneDef);\n    },\n\n    /**\n     * Creates a Scene to hold a list of objects and parse it\n     * @param  {Array} objects List of objects to process\n     */\n    processObjects: function processObjects(objects) {\n      var scene = new Scene();\n      scene.name = 'AuxScene';\n\n      for (var i = 0; i < objects.length; i++) {\n        // We push directly to children instead of calling `add` to prevent\n        // modify the .parent and break its original scene and hierarchy\n        scene.children.push(objects[i]);\n      }\n\n      this.processScene(scene);\n    },\n\n    /**\n     * @param {THREE.Object3D|Array<THREE.Object3D>} input\n     */\n    processInput: function processInput(input) {\n      var options = this.options;\n      input = input instanceof Array ? input : [input];\n\n      this._invokeAll(function (ext) {\n        ext.beforeParse && ext.beforeParse(input);\n      });\n\n      var objectsWithoutScene = [];\n\n      for (var i = 0; i < input.length; i++) {\n        if (input[i] instanceof Scene) {\n          this.processScene(input[i]);\n        } else {\n          objectsWithoutScene.push(input[i]);\n        }\n      }\n\n      if (objectsWithoutScene.length > 0) this.processObjects(objectsWithoutScene);\n\n      for (var _i3 = 0; _i3 < this.skins.length; ++_i3) {\n        this.processSkin(this.skins[_i3]);\n      }\n\n      for (var _i4 = 0; _i4 < options.animations.length; ++_i4) {\n        this.processAnimation(options.animations[_i4], input[0]);\n      }\n\n      this._invokeAll(function (ext) {\n        ext.afterParse && ext.afterParse(input);\n      });\n    },\n    _invokeAll: function _invokeAll(func) {\n      for (var i = 0, il = this.plugins.length; i < il; i++) {\n        func(this.plugins[i]);\n      }\n    }\n  };\n  /**\n   * Punctual Lights Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n   */\n\n  function GLTFLightExtension(writer) {\n    this.writer = writer;\n    this.name = 'KHR_lights_punctual';\n  }\n\n  GLTFLightExtension.prototype = {\n    constructor: GLTFLightExtension,\n    writeNode: function writeNode(light, nodeDef) {\n      if (!light.isLight) return;\n\n      if (!light.isDirectionalLight && !light.isPointLight && !light.isSpotLight) {\n        console.warn('THREE.GLTFExporter: Only directional, point, and spot lights are supported.', light);\n        return;\n      }\n\n      var writer = this.writer;\n      var json = writer.json;\n      var extensionsUsed = writer.extensionsUsed;\n      var lightDef = {};\n      if (light.name) lightDef.name = light.name;\n      lightDef.color = light.color.toArray();\n      lightDef.intensity = light.intensity;\n\n      if (light.isDirectionalLight) {\n        lightDef.type = 'directional';\n      } else if (light.isPointLight) {\n        lightDef.type = 'point';\n        if (light.distance > 0) lightDef.range = light.distance;\n      } else if (light.isSpotLight) {\n        lightDef.type = 'spot';\n        if (light.distance > 0) lightDef.range = light.distance;\n        lightDef.spot = {};\n        lightDef.spot.innerConeAngle = (light.penumbra - 1.0) * light.angle * -1.0;\n        lightDef.spot.outerConeAngle = light.angle;\n      }\n\n      if (light.decay !== undefined && light.decay !== 2) {\n        console.warn('THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, ' + 'and expects light.decay=2.');\n      }\n\n      if (light.target && (light.target.parent !== light || light.target.position.x !== 0 || light.target.position.y !== 0 || light.target.position.z !== -1)) {\n        console.warn('THREE.GLTFExporter: Light direction may be lost. For best results, ' + 'make light.target a child of the light with position 0,0,-1.');\n      }\n\n      if (!extensionsUsed[this.name]) {\n        json.extensions = json.extensions || {};\n        json.extensions[this.name] = {\n          lights: []\n        };\n        extensionsUsed[this.name] = true;\n      }\n\n      var lights = json.extensions[this.name].lights;\n      lights.push(lightDef);\n      nodeDef.extensions = nodeDef.extensions || {};\n      nodeDef.extensions[this.name] = {\n        light: lights.length - 1\n      };\n    }\n  };\n  /**\n   * Unlit Materials Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n   */\n\n  function GLTFMaterialsUnlitExtension(writer) {\n    this.writer = writer;\n    this.name = 'KHR_materials_unlit';\n  }\n\n  GLTFMaterialsUnlitExtension.prototype = {\n    constructor: GLTFMaterialsUnlitExtension,\n    writeMaterial: function writeMaterial(material, materialDef) {\n      if (!material.isMeshBasicMaterial) return;\n      var writer = this.writer;\n      var extensionsUsed = writer.extensionsUsed;\n      materialDef.extensions = materialDef.extensions || {};\n      materialDef.extensions[this.name] = {};\n      extensionsUsed[this.name] = true;\n      materialDef.pbrMetallicRoughness.metallicFactor = 0.0;\n      materialDef.pbrMetallicRoughness.roughnessFactor = 0.9;\n    }\n  };\n  /**\n   * Specular-Glossiness Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness\n   */\n\n  function GLTFMaterialsPBRSpecularGlossiness(writer) {\n    this.writer = writer;\n    this.name = 'KHR_materials_pbrSpecularGlossiness';\n  }\n\n  GLTFMaterialsPBRSpecularGlossiness.prototype = {\n    constructor: GLTFMaterialsPBRSpecularGlossiness,\n    writeMaterial: function writeMaterial(material, materialDef) {\n      if (!material.isGLTFSpecularGlossinessMaterial) return;\n      var writer = this.writer;\n      var extensionsUsed = writer.extensionsUsed;\n      var extensionDef = {};\n\n      if (materialDef.pbrMetallicRoughness.baseColorFactor) {\n        extensionDef.diffuseFactor = materialDef.pbrMetallicRoughness.baseColorFactor;\n      }\n\n      var specularFactor = [1, 1, 1];\n      material.specular.toArray(specularFactor, 0);\n      extensionDef.specularFactor = specularFactor;\n      extensionDef.glossinessFactor = material.glossiness;\n\n      if (materialDef.pbrMetallicRoughness.baseColorTexture) {\n        extensionDef.diffuseTexture = materialDef.pbrMetallicRoughness.baseColorTexture;\n      }\n\n      if (material.specularMap) {\n        var specularMapDef = {\n          index: writer.processTexture(material.specularMap)\n        };\n        writer.applyTextureTransform(specularMapDef, material.specularMap);\n        extensionDef.specularGlossinessTexture = specularMapDef;\n      }\n\n      materialDef.extensions = materialDef.extensions || {};\n      materialDef.extensions[this.name] = extensionDef;\n      extensionsUsed[this.name] = true;\n    }\n  };\n  /**\n   * Static utility functions\n   */\n\n  GLTFExporter.Utils = {\n    insertKeyframe: function insertKeyframe(track, time) {\n      var tolerance = 0.001; // 1ms\n\n      var valueSize = track.getValueSize();\n      var times = new track.TimeBufferType(track.times.length + 1);\n      var values = new track.ValueBufferType(track.values.length + valueSize);\n      var interpolant = track.createInterpolant(new track.ValueBufferType(valueSize));\n      var index;\n\n      if (track.times.length === 0) {\n        times[0] = time;\n\n        for (var i = 0; i < valueSize; i++) {\n          values[i] = 0;\n        }\n\n        index = 0;\n      } else if (time < track.times[0]) {\n        if (Math.abs(track.times[0] - time) < tolerance) return 0;\n        times[0] = time;\n        times.set(track.times, 1);\n        values.set(interpolant.evaluate(time), 0);\n        values.set(track.values, valueSize);\n        index = 0;\n      } else if (time > track.times[track.times.length - 1]) {\n        if (Math.abs(track.times[track.times.length - 1] - time) < tolerance) {\n          return track.times.length - 1;\n        }\n\n        times[times.length - 1] = time;\n        times.set(track.times, 0);\n        values.set(track.values, 0);\n        values.set(interpolant.evaluate(time), track.values.length);\n        index = times.length - 1;\n      } else {\n        for (var _i5 = 0; _i5 < track.times.length; _i5++) {\n          if (Math.abs(track.times[_i5] - time) < tolerance) return _i5;\n\n          if (track.times[_i5] < time && track.times[_i5 + 1] > time) {\n            times.set(track.times.slice(0, _i5 + 1), 0);\n            times[_i5 + 1] = time;\n            times.set(track.times.slice(_i5 + 1), _i5 + 2);\n            values.set(track.values.slice(0, (_i5 + 1) * valueSize), 0);\n            values.set(interpolant.evaluate(time), (_i5 + 1) * valueSize);\n            values.set(track.values.slice((_i5 + 1) * valueSize), (_i5 + 2) * valueSize);\n            index = _i5 + 1;\n            break;\n          }\n        }\n      }\n\n      track.times = times;\n      track.values = values;\n      return index;\n    },\n    mergeMorphTargetTracks: function mergeMorphTargetTracks(clip, root) {\n      var tracks = [];\n      var mergedTracks = {};\n      var sourceTracks = clip.tracks;\n\n      for (var i = 0; i < sourceTracks.length; ++i) {\n        var sourceTrack = sourceTracks[i];\n        var sourceTrackBinding = PropertyBinding.parseTrackName(sourceTrack.name);\n        var sourceTrackNode = PropertyBinding.findNode(root, sourceTrackBinding.nodeName);\n\n        if (sourceTrackBinding.propertyName !== 'morphTargetInfluences' || sourceTrackBinding.propertyIndex === undefined) {\n          // Tracks that don't affect morph targets, or that affect all morph targets together, can be left as-is.\n          tracks.push(sourceTrack);\n          continue;\n        }\n\n        if (sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete && sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear) {\n          if (sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n            // This should never happen, because glTF morph target animations\n            // affect all targets already.\n            throw new Error('THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.');\n          }\n\n          console.warn('THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.');\n          sourceTrack = sourceTrack.clone();\n          sourceTrack.setInterpolation(InterpolateLinear);\n        }\n\n        var targetCount = sourceTrackNode.morphTargetInfluences.length;\n        var targetIndex = sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];\n\n        if (targetIndex === undefined) {\n          throw new Error(\"THREE.GLTFExporter: Morph target name not found: \".concat(sourceTrackBinding.propertyIndex));\n        }\n\n        var mergedTrack = void 0; // If this is the first time we've seen this object, create a new\n        // track to store merged keyframe data for each morph target.\n\n        if (mergedTracks[sourceTrackNode.uuid] === undefined) {\n          mergedTrack = sourceTrack.clone();\n          var values = new mergedTrack.ValueBufferType(targetCount * mergedTrack.times.length);\n\n          for (var j = 0; j < mergedTrack.times.length; j++) {\n            values[j * targetCount + targetIndex] = mergedTrack.values[j];\n          } // We need to take into consideration the intended target node\n          // of our original un-merged morphTarget animation.\n\n\n          mergedTrack.name = \"\".concat(sourceTrackBinding.nodeName || '', \".morphTargetInfluences\");\n          mergedTrack.values = values;\n          mergedTracks[sourceTrackNode.uuid] = mergedTrack;\n          tracks.push(mergedTrack);\n          continue;\n        }\n\n        var sourceInterpolant = sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));\n        mergedTrack = mergedTracks[sourceTrackNode.uuid]; // For every existing keyframe of the merged track, write a (possibly\n        // interpolated) value from the source track.\n\n        for (var _j = 0; _j < mergedTrack.times.length; _j++) {\n          mergedTrack.values[_j * targetCount + targetIndex] = sourceInterpolant.evaluate(mergedTrack.times[_j]);\n        } // For every existing keyframe of the source track, write a (possibly\n        // new) keyframe to the merged track. Values from the previous loop may\n        // be written again, but keyframes are de-duplicated.\n\n\n        for (var _j2 = 0; _j2 < sourceTrack.times.length; _j2++) {\n          var keyframeIndex = this.insertKeyframe(mergedTrack, sourceTrack.times[_j2]);\n          mergedTrack.values[keyframeIndex * targetCount + targetIndex] = sourceTrack.values[_j2];\n        }\n      }\n\n      clip.tracks = tracks;\n      return clip;\n    }\n  };\n  return GLTFExporter;\n}();\n\nexport { GLTFExporter };","map":{"version":3,"names":["PropertyBinding","InterpolateLinear","Vector3","RGBAFormat","RGBFormat","DoubleSide","BufferAttribute","MathUtils","InterpolateDiscrete","Matrix4","Scene","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","GLTFExporter","pluginCallbacks","register","writer","GLTFLightExtension","GLTFMaterialsUnlitExtension","GLTFMaterialsPBRSpecularGlossiness","prototype","constructor","callback","indexOf","push","unregister","splice","parse","input","onDone","options","GLTFWriter","plugins","i","il","length","setPlugins","write","WEBGL_CONSTANTS","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","UNSIGNED_BYTE","UNSIGNED_SHORT","FLOAT","UNSIGNED_INT","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","NEAREST","LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","CLAMP_TO_EDGE","MIRRORED_REPEAT","REPEAT","THREE_TO_WEBGL","PATH_PROPERTIES","scale","position","quaternion","morphTargetInfluences","GLB_HEADER_BYTES","GLB_HEADER_MAGIC","GLB_VERSION","GLB_CHUNK_PREFIX_BYTES","GLB_CHUNK_TYPE_JSON","GLB_CHUNK_TYPE_BIN","equalArray","array1","array2","every","element","index","stringToArrayBuffer","text","window","TextEncoder","undefined","encode","buffer","array","Uint8Array","ArrayBuffer","value","charCodeAt","isIdentityMatrix","matrix","elements","getMinMax","attribute","start","count","output","min","Array","itemSize","fill","Number","POSITIVE_INFINITY","max","NEGATIVE_INFINITY","a","getX","getY","getZ","getW","Math","getPaddedBufferSize","bufferSize","ceil","getPaddedArrayBuffer","arrayBuffer","paddingByte","paddedLength","byteLength","set","cachedCanvas","pending","buffers","byteOffset","nodeMap","Map","skins","extensionsUsed","uids","uid","json","asset","version","generator","cache","meshes","attributes","attributesNormalized","materials","textures","images","Object","assign","binary","trs","onlyVisible","truncateDrawRange","embedImages","maxTextureSize","Infinity","animations","includeCustomExtensions","processInput","Promise","all","then","blob","Blob","type","extensionsUsedList","keys","size","reader","FileReader","readAsArrayBuffer","onloadend","binaryChunk","result","binaryChunkPrefix","DataView","setUint32","jsonChunk","JSON","stringify","jsonChunkPrefix","header","headerView","totalByteLength","glbBlob","glbReader","readAsDataURL","base64data","uri","serializeUserData","object","objectDef","userData","gltfExtensions","extensions","extensionName","extras","error","console","warn","name","message","getUID","has","get","isNormalizedNormalAttribute","normal","v","abs","fromBufferAttribute","createNormalizedNormalAttribute","clone","x","y","z","setX","normalize","setXYZ","applyTextureTransform","mapDef","texture","didTransform","transformDef","offset","toArray","rotation","repeat","processBuffer","processBufferView","componentType","target","bufferViews","componentSize","dataView","setFloat32","setUint16","setUint8","bufferViewDef","byteStride","id","processBufferViewImage","resolve","processAccessor","geometry","types","Float32Array","Uint32Array","Uint16Array","Error","end","end2","drawRange","minMax","bufferViewTarget","bufferView","accessorDef","normalized","accessors","processImage","image","format","flipY","cachedImages","mimeType","key","toString","imageDef","canvas","document","createElement","width","height","ctx","getContext","translate","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","drawImage","data","Uint8ClampedArray","j","putImageData","ImageData","toBlob","bufferViewIndex","toDataURL","src","processSampler","map","samplers","samplerDef","magFilter","minFilter","wrapS","wrapT","processTexture","textureDef","sampler","source","_invokeAll","ext","writeTexture","processMaterial","material","isShaderMaterial","materialDef","pbrMetallicRoughness","isMeshStandardMaterial","isMeshBasicMaterial","color","concat","opacity","baseColorFactor","metallicFactor","metalness","roughnessFactor","roughness","metalnessMap","roughnessMap","metalRoughMapDef","metallicRoughnessTexture","baseColorMapDef","baseColorTexture","emissive","multiplyScalar","emissiveIntensity","emissiveFactor","emissiveMap","emissiveMapDef","emissiveTexture","normalMap","normalMapDef","normalScale","normalTexture","aoMap","occlusionMapDef","texCoord","aoMapIntensity","strength","occlusionTexture","transparent","alphaMode","alphaTest","alphaCutoff","side","doubleSided","writeMaterial","processMesh","mesh","meshCacheKeyParts","uuid","isArray","l","meshCacheKey","join","mode","isLineSegments","isLineLoop","isLine","isPoints","wireframe","isBufferGeometry","meshDef","primitives","targets","nameConversion","uv","uv2","skinWeight","skinIndex","originalNormal","getAttribute","setAttribute","modifiedAttribute","attributeName","substr","toUpperCase","validVertexAttributes","test","accessor","weights","targetNames","reverseDictionary","morphTargetDictionary","warned","morphAttributes","gltfAttributeName","baseAttribute","relativeAttribute","morphTargetsRelative","jl","isMultiMaterial","groups","materialIndex","primitive","cacheKey","indices","writeMesh","processCamera","camera","cameras","isOrtho","isOrthographicCamera","cameraDef","orthographic","xmag","right","ymag","top","zfar","far","znear","near","perspective","aspectRatio","aspect","yfov","degToRad","fov","processAnimation","clip","root","Utils","mergeMorphTargetTracks","tracks","channels","track","trackBinding","parseTrackName","trackNode","findNode","nodeName","trackProperty","propertyName","objectName","isSkinnedMesh","skeleton","getBoneByName","objectIndex","inputItemSize","outputItemSize","values","times","interpolation","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","getInterpolation","node","path","processSkin","nodes","rootJoint","bones","joints","inverseBindMatrices","temporaryBoneInverse","copy","boneInverses","multiply","bindMatrix","skin","processNode","nodeDef","translation","matrixAutoUpdate","updateMatrix","String","isMesh","meshIndex","isCamera","children","child","visible","nodeIndex","writeNode","processScene","scene","scenes","sceneDef","processObjects","objects","beforeParse","objectsWithoutScene","afterParse","func","light","isLight","isDirectionalLight","isPointLight","isSpotLight","lightDef","intensity","distance","range","spot","innerConeAngle","penumbra","angle","outerConeAngle","decay","parent","lights","isGLTFSpecularGlossinessMaterial","extensionDef","diffuseFactor","specularFactor","specular","glossinessFactor","glossiness","diffuseTexture","specularMap","specularMapDef","specularGlossinessTexture","insertKeyframe","time","tolerance","valueSize","getValueSize","TimeBufferType","ValueBufferType","interpolant","evaluate","slice","mergedTracks","sourceTracks","sourceTrack","sourceTrackBinding","sourceTrackNode","propertyIndex","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","setInterpolation","targetCount","targetIndex","mergedTrack","sourceInterpolant","keyframeIndex"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/exporters/GLTFExporter.js"],"sourcesContent":["import { PropertyBinding, InterpolateLinear, Vector3, RGBAFormat, RGBFormat, DoubleSide, BufferAttribute, MathUtils, InterpolateDiscrete, Matrix4, Scene, NearestFilter, NearestMipmapNearestFilter, NearestMipmapLinearFilter, LinearFilter, LinearMipmapNearestFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping, RepeatWrapping, MirroredRepeatWrapping } from 'three';\n\nconst GLTFExporter = (() => {\n  function GLTFExporter() {\n    this.pluginCallbacks = [];\n    this.register(writer => new GLTFLightExtension(writer));\n    this.register(writer => new GLTFMaterialsUnlitExtension(writer));\n    this.register(writer => new GLTFMaterialsPBRSpecularGlossiness(writer));\n  }\n\n  GLTFExporter.prototype = {\n    constructor: GLTFExporter,\n    register: function (callback) {\n      if (this.pluginCallbacks.indexOf(callback) === -1) {\n        this.pluginCallbacks.push(callback);\n      }\n\n      return this;\n    },\n    unregister: function (callback) {\n      if (this.pluginCallbacks.indexOf(callback) !== -1) {\n        this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(callback), 1);\n      }\n\n      return this;\n    },\n\n    /**\n     * Parse scenes and generate GLTF output\n     * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n     * @param  {Function} onDone  Callback on completed\n     * @param  {Object} options options\n     */\n    parse: function (input, onDone, options) {\n      const writer = new GLTFWriter();\n      const plugins = [];\n\n      for (let i = 0, il = this.pluginCallbacks.length; i < il; i++) {\n        plugins.push(this.pluginCallbacks[i](writer));\n      }\n\n      writer.setPlugins(plugins);\n      writer.write(input, onDone, options);\n    }\n  }; //------------------------------------------------------------------------------\n  // Constants\n  //------------------------------------------------------------------------------\n\n  const WEBGL_CONSTANTS = {\n    POINTS: 0x0000,\n    LINES: 0x0001,\n    LINE_LOOP: 0x0002,\n    LINE_STRIP: 0x0003,\n    TRIANGLES: 0x0004,\n    TRIANGLE_STRIP: 0x0005,\n    TRIANGLE_FAN: 0x0006,\n    UNSIGNED_BYTE: 0x1401,\n    UNSIGNED_SHORT: 0x1403,\n    FLOAT: 0x1406,\n    UNSIGNED_INT: 0x1405,\n    ARRAY_BUFFER: 0x8892,\n    ELEMENT_ARRAY_BUFFER: 0x8893,\n    NEAREST: 0x2600,\n    LINEAR: 0x2601,\n    NEAREST_MIPMAP_NEAREST: 0x2700,\n    LINEAR_MIPMAP_NEAREST: 0x2701,\n    NEAREST_MIPMAP_LINEAR: 0x2702,\n    LINEAR_MIPMAP_LINEAR: 0x2703,\n    CLAMP_TO_EDGE: 33071,\n    MIRRORED_REPEAT: 33648,\n    REPEAT: 10497\n  };\n  const THREE_TO_WEBGL = {};\n  THREE_TO_WEBGL[NearestFilter] = WEBGL_CONSTANTS.NEAREST;\n  THREE_TO_WEBGL[NearestMipmapNearestFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\n  THREE_TO_WEBGL[NearestMipmapLinearFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\n  THREE_TO_WEBGL[LinearFilter] = WEBGL_CONSTANTS.LINEAR;\n  THREE_TO_WEBGL[LinearMipmapNearestFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\n  THREE_TO_WEBGL[LinearMipmapLinearFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\n  THREE_TO_WEBGL[ClampToEdgeWrapping] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\n  THREE_TO_WEBGL[RepeatWrapping] = WEBGL_CONSTANTS.REPEAT;\n  THREE_TO_WEBGL[MirroredRepeatWrapping] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\n  const PATH_PROPERTIES = {\n    scale: 'scale',\n    position: 'translation',\n    quaternion: 'rotation',\n    morphTargetInfluences: 'weights'\n  }; // GLB constants\n  // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n\n  const GLB_HEADER_BYTES = 12;\n  const GLB_HEADER_MAGIC = 0x46546c67;\n  const GLB_VERSION = 2;\n  const GLB_CHUNK_PREFIX_BYTES = 8;\n  const GLB_CHUNK_TYPE_JSON = 0x4e4f534a;\n  const GLB_CHUNK_TYPE_BIN = 0x004e4942; //------------------------------------------------------------------------------\n  // Utility functions\n  //------------------------------------------------------------------------------\n\n  /**\n   * Compare two arrays\n   * @param  {Array} array1 Array 1 to compare\n   * @param  {Array} array2 Array 2 to compare\n   * @return {Boolean}        Returns true if both arrays are equal\n   */\n\n  function equalArray(array1, array2) {\n    return array1.length === array2.length && array1.every((element, index) => element === array2[index]);\n  }\n  /**\n   * Converts a string to an ArrayBuffer.\n   * @param  {string} text\n   * @return {ArrayBuffer}\n   */\n\n\n  function stringToArrayBuffer(text) {\n    if (window.TextEncoder !== undefined) {\n      return new TextEncoder().encode(text).buffer;\n    }\n\n    const array = new Uint8Array(new ArrayBuffer(text.length));\n\n    for (let i = 0, il = text.length; i < il; i++) {\n      const value = text.charCodeAt(i); // Replacing multi-byte character with space(0x20).\n\n      array[i] = value > 0xff ? 0x20 : value;\n    }\n\n    return array.buffer;\n  }\n  /**\n   * Is identity matrix\n   *\n   * @param {Matrix4} matrix\n   * @returns {Boolean} Returns true, if parameter is identity matrix\n   */\n\n\n  function isIdentityMatrix(matrix) {\n    return equalArray(matrix.elements, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n  }\n  /**\n   * Get the min and max vectors from the given attribute\n   * @param  {BufferAttribute} attribute Attribute to find the min/max in range from start to start + count\n   * @param  {Integer} start\n   * @param  {Integer} count\n   * @return {Object} Object containing the `min` and `max` values (As an array of attribute.itemSize components)\n   */\n\n\n  function getMinMax(attribute, start, count) {\n    const output = {\n      min: new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),\n      max: new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)\n    };\n\n    for (let i = start; i < start + count; i++) {\n      for (let a = 0; a < attribute.itemSize; a++) {\n        let value;\n\n        if (attribute.itemSize > 4) {\n          // no support for interleaved data for itemSize > 4\n          value = attribute.array[i * attribute.itemSize + a];\n        } else {\n          if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n        }\n\n        output.min[a] = Math.min(output.min[a], value);\n        output.max[a] = Math.max(output.max[a], value);\n      }\n    }\n\n    return output;\n  }\n  /**\n   * Get the required size + padding for a buffer, rounded to the next 4-byte boundary.\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#data-alignment\n   *\n   * @param {Integer} bufferSize The size the original buffer.\n   * @returns {Integer} new buffer size with required padding.\n   *\n   */\n\n\n  function getPaddedBufferSize(bufferSize) {\n    return Math.ceil(bufferSize / 4) * 4;\n  }\n  /**\n   * Returns a buffer aligned to 4-byte boundary.\n   *\n   * @param {ArrayBuffer} arrayBuffer Buffer to pad\n   * @param {Integer} paddingByte (Optional)\n   * @returns {ArrayBuffer} The same buffer if it's already aligned to 4-byte boundary or a new buffer\n   */\n\n\n  function getPaddedArrayBuffer(arrayBuffer, paddingByte) {\n    paddingByte = paddingByte || 0;\n    const paddedLength = getPaddedBufferSize(arrayBuffer.byteLength);\n\n    if (paddedLength !== arrayBuffer.byteLength) {\n      const array = new Uint8Array(paddedLength);\n      array.set(new Uint8Array(arrayBuffer));\n\n      if (paddingByte !== 0) {\n        for (let i = arrayBuffer.byteLength; i < paddedLength; i++) {\n          array[i] = paddingByte;\n        }\n      }\n\n      return array.buffer;\n    }\n\n    return arrayBuffer;\n  }\n\n  let cachedCanvas = null;\n  /**\n   * Writer\n   */\n\n  function GLTFWriter() {\n    this.plugins = [];\n    this.options = {};\n    this.pending = [];\n    this.buffers = [];\n    this.byteOffset = 0;\n    this.buffers = [];\n    this.nodeMap = new Map();\n    this.skins = [];\n    this.extensionsUsed = {};\n    this.uids = new Map();\n    this.uid = 0;\n    this.json = {\n      asset: {\n        version: '2.0',\n        generator: 'THREE.GLTFExporter'\n      }\n    };\n    this.cache = {\n      meshes: new Map(),\n      attributes: new Map(),\n      attributesNormalized: new Map(),\n      materials: new Map(),\n      textures: new Map(),\n      images: new Map()\n    };\n  }\n\n  GLTFWriter.prototype = {\n    constructor: GLTFWriter,\n    setPlugins: function (plugins) {\n      this.plugins = plugins;\n    },\n\n    /**\n     * Parse scenes and generate GLTF output\n     * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n     * @param  {Function} onDone  Callback on completed\n     * @param  {Object} options options\n     */\n    write: function (input, onDone, options) {\n      this.options = Object.assign({}, {\n        // default options\n        binary: false,\n        trs: false,\n        onlyVisible: true,\n        truncateDrawRange: true,\n        embedImages: true,\n        maxTextureSize: Infinity,\n        animations: [],\n        includeCustomExtensions: false\n      }, options);\n\n      if (this.options.animations.length > 0) {\n        // Only TRS properties, and not matrices, may be targeted by animation.\n        this.options.trs = true;\n      }\n\n      this.processInput(input);\n      const writer = this;\n      Promise.all(this.pending).then(() => {\n        const buffers = writer.buffers;\n        const json = writer.json;\n        const options = writer.options;\n        const extensionsUsed = writer.extensionsUsed; // Merge buffers.\n\n        const blob = new Blob(buffers, {\n          type: 'application/octet-stream'\n        }); // Declare extensions.\n\n        const extensionsUsedList = Object.keys(extensionsUsed);\n        if (extensionsUsedList.length > 0) json.extensionsUsed = extensionsUsedList; // Update bytelength of the single buffer.\n\n        if (json.buffers && json.buffers.length > 0) json.buffers[0].byteLength = blob.size;\n\n        if (options.binary === true) {\n          // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n          var reader = new window.FileReader();\n          reader.readAsArrayBuffer(blob);\n\n          reader.onloadend = () => {\n            // Binary chunk.\n            const binaryChunk = getPaddedArrayBuffer(reader.result);\n            const binaryChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n            binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);\n            binaryChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_BIN, true); // JSON chunk.\n\n            const jsonChunk = getPaddedArrayBuffer(stringToArrayBuffer(JSON.stringify(json)), 0x20);\n            const jsonChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n            jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);\n            jsonChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_JSON, true); // GLB header.\n\n            const header = new ArrayBuffer(GLB_HEADER_BYTES);\n            const headerView = new DataView(header);\n            headerView.setUint32(0, GLB_HEADER_MAGIC, true);\n            headerView.setUint32(4, GLB_VERSION, true);\n            const totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n            headerView.setUint32(8, totalByteLength, true);\n            const glbBlob = new Blob([header, jsonChunkPrefix, jsonChunk, binaryChunkPrefix, binaryChunk], {\n              type: 'application/octet-stream'\n            });\n            const glbReader = new window.FileReader();\n            glbReader.readAsArrayBuffer(glbBlob);\n\n            glbReader.onloadend = () => {\n              onDone(glbReader.result);\n            };\n          };\n        } else {\n          if (json.buffers && json.buffers.length > 0) {\n            var reader = new window.FileReader();\n            reader.readAsDataURL(blob);\n\n            reader.onloadend = () => {\n              const base64data = reader.result;\n              json.buffers[0].uri = base64data;\n              onDone(json);\n            };\n          } else {\n            onDone(json);\n          }\n        }\n      });\n    },\n\n    /**\n     * Serializes a userData.\n     *\n     * @param {THREE.Object3D|THREE.Material} object\n     * @param {Object} objectDef\n     */\n    serializeUserData: function (object, objectDef) {\n      if (Object.keys(object.userData).length === 0) return;\n      const options = this.options;\n      const extensionsUsed = this.extensionsUsed;\n\n      try {\n        const json = JSON.parse(JSON.stringify(object.userData));\n\n        if (options.includeCustomExtensions && json.gltfExtensions) {\n          if (objectDef.extensions === undefined) objectDef.extensions = {};\n\n          for (let extensionName in json.gltfExtensions) {\n            objectDef.extensions[extensionName] = json.gltfExtensions[extensionName];\n            extensionsUsed[extensionName] = true;\n          }\n\n          delete json.gltfExtensions;\n        }\n\n        if (Object.keys(json).length > 0) objectDef.extras = json;\n      } catch (error) {\n        console.warn(`THREE.GLTFExporter: userData of '${object.name}' won't be serialized because of JSON.stringify error - ${error.message}`);\n      }\n    },\n\n    /**\n     * Assign and return a temporal unique id for an object\n     * especially which doesn't have .uuid\n     * @param  {Object} object\n     * @return {Integer}\n     */\n    getUID: function (object) {\n      if (!this.uids.has(object)) this.uids.set(object, this.uid++);\n      return this.uids.get(object);\n    },\n\n    /**\n     * Checks if normal attribute values are normalized.\n     *\n     * @param {BufferAttribute} normal\n     * @returns {Boolean}\n     */\n    isNormalizedNormalAttribute: function (normal) {\n      const cache = this.cache;\n      if (cache.attributesNormalized.has(normal)) return false;\n      const v = new Vector3();\n\n      for (let i = 0, il = normal.count; i < il; i++) {\n        // 0.0005 is from glTF-validator\n        if (Math.abs(v.fromBufferAttribute(normal, i).length() - 1.0) > 0.0005) return false;\n      }\n\n      return true;\n    },\n\n    /**\n     * Creates normalized normal buffer attribute.\n     *\n     * @param {BufferAttribute} normal\n     * @returns {BufferAttribute}\n     *\n     */\n    createNormalizedNormalAttribute: function (normal) {\n      const cache = this.cache;\n      if (cache.attributesNormalized.has(normal)) return cache.attributesNormalized.get(normal);\n      const attribute = normal.clone();\n      const v = new Vector3();\n\n      for (let i = 0, il = attribute.count; i < il; i++) {\n        v.fromBufferAttribute(attribute, i);\n\n        if (v.x === 0 && v.y === 0 && v.z === 0) {\n          // if values can't be normalized set (1, 0, 0)\n          v.setX(1.0);\n        } else {\n          v.normalize();\n        }\n\n        attribute.setXYZ(i, v.x, v.y, v.z);\n      }\n\n      cache.attributesNormalized.set(normal, attribute);\n      return attribute;\n    },\n\n    /**\n     * Applies a texture transform, if present, to the map definition. Requires\n     * the KHR_texture_transform extension.\n     *\n     * @param {Object} mapDef\n     * @param {THREE.Texture} texture\n     */\n    applyTextureTransform: function (mapDef, texture) {\n      let didTransform = false;\n      const transformDef = {};\n\n      if (texture.offset.x !== 0 || texture.offset.y !== 0) {\n        transformDef.offset = texture.offset.toArray();\n        didTransform = true;\n      }\n\n      if (texture.rotation !== 0) {\n        transformDef.rotation = texture.rotation;\n        didTransform = true;\n      }\n\n      if (texture.repeat.x !== 1 || texture.repeat.y !== 1) {\n        transformDef.scale = texture.repeat.toArray();\n        didTransform = true;\n      }\n\n      if (didTransform) {\n        mapDef.extensions = mapDef.extensions || {};\n        mapDef.extensions['KHR_texture_transform'] = transformDef;\n        this.extensionsUsed['KHR_texture_transform'] = true;\n      }\n    },\n\n    /**\n     * Process a buffer to append to the default one.\n     * @param  {ArrayBuffer} buffer\n     * @return {Integer}\n     */\n    processBuffer: function (buffer) {\n      const json = this.json;\n      const buffers = this.buffers;\n      if (!json.buffers) json.buffers = [{\n        byteLength: 0\n      }]; // All buffers are merged before export.\n\n      buffers.push(buffer);\n      return 0;\n    },\n\n    /**\n     * Process and generate a BufferView\n     * @param  {BufferAttribute} attribute\n     * @param  {number} componentType\n     * @param  {number} start\n     * @param  {number} count\n     * @param  {number} target (Optional) Target usage of the BufferView\n     * @return {Object}\n     */\n    processBufferView: function (attribute, componentType, start, count, target) {\n      const json = this.json;\n      if (!json.bufferViews) json.bufferViews = []; // Create a new dataview and dump the attribute's array into it\n\n      let componentSize;\n\n      if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n        componentSize = 1;\n      } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n        componentSize = 2;\n      } else {\n        componentSize = 4;\n      }\n\n      const byteLength = getPaddedBufferSize(count * attribute.itemSize * componentSize);\n      const dataView = new DataView(new ArrayBuffer(byteLength));\n      let offset = 0;\n\n      for (let i = start; i < start + count; i++) {\n        for (let a = 0; a < attribute.itemSize; a++) {\n          let value;\n\n          if (attribute.itemSize > 4) {\n            // no support for interleaved data for itemSize > 4\n            value = attribute.array[i * attribute.itemSize + a];\n          } else {\n            if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n          }\n\n          if (componentType === WEBGL_CONSTANTS.FLOAT) {\n            dataView.setFloat32(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_INT) {\n            dataView.setUint32(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n            dataView.setUint16(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n            dataView.setUint8(offset, value);\n          }\n\n          offset += componentSize;\n        }\n      }\n\n      const bufferViewDef = {\n        buffer: this.processBuffer(dataView.buffer),\n        byteOffset: this.byteOffset,\n        byteLength\n      };\n      if (target !== undefined) bufferViewDef.target = target;\n\n      if (target === WEBGL_CONSTANTS.ARRAY_BUFFER) {\n        // Only define byteStride for vertex attributes.\n        bufferViewDef.byteStride = attribute.itemSize * componentSize;\n      }\n\n      this.byteOffset += byteLength;\n      json.bufferViews.push(bufferViewDef); // @TODO Merge bufferViews where possible.\n\n      const output = {\n        id: json.bufferViews.length - 1,\n        byteLength: 0\n      };\n      return output;\n    },\n\n    /**\n     * Process and generate a BufferView from an image Blob.\n     * @param {Blob} blob\n     * @return {Promise<Integer>}\n     */\n    processBufferViewImage: function (blob) {\n      const writer = this;\n      const json = writer.json;\n      if (!json.bufferViews) json.bufferViews = [];\n      return new Promise(resolve => {\n        const reader = new window.FileReader();\n        reader.readAsArrayBuffer(blob);\n\n        reader.onloadend = () => {\n          const buffer = getPaddedArrayBuffer(reader.result);\n          const bufferViewDef = {\n            buffer: writer.processBuffer(buffer),\n            byteOffset: writer.byteOffset,\n            byteLength: buffer.byteLength\n          };\n          writer.byteOffset += buffer.byteLength;\n          resolve(json.bufferViews.push(bufferViewDef) - 1);\n        };\n      });\n    },\n\n    /**\n     * Process attribute to generate an accessor\n     * @param  {BufferAttribute} attribute Attribute to process\n     * @param  {THREE.BufferGeometry} geometry (Optional) Geometry used for truncated draw range\n     * @param  {Integer} start (Optional)\n     * @param  {Integer} count (Optional)\n     * @return {Integer|null} Index of the processed accessor on the \"accessors\" array\n     */\n    processAccessor: function (attribute, geometry, start, count) {\n      const options = this.options;\n      const json = this.json;\n      const types = {\n        1: 'SCALAR',\n        2: 'VEC2',\n        3: 'VEC3',\n        4: 'VEC4',\n        16: 'MAT4'\n      };\n      let componentType; // Detect the component type of the attribute array (float, uint or ushort)\n\n      if (attribute.array.constructor === Float32Array) {\n        componentType = WEBGL_CONSTANTS.FLOAT;\n      } else if (attribute.array.constructor === Uint32Array) {\n        componentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n      } else if (attribute.array.constructor === Uint16Array) {\n        componentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n      } else if (attribute.array.constructor === Uint8Array) {\n        componentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n      } else {\n        throw new Error('THREE.GLTFExporter: Unsupported bufferAttribute component type.');\n      }\n\n      if (start === undefined) start = 0;\n      if (count === undefined) count = attribute.count; // @TODO Indexed buffer geometry with drawRange not supported yet\n\n      if (options.truncateDrawRange && geometry !== undefined && geometry.index === null) {\n        const end = start + count;\n        const end2 = geometry.drawRange.count === Infinity ? attribute.count : geometry.drawRange.start + geometry.drawRange.count;\n        start = Math.max(start, geometry.drawRange.start);\n        count = Math.min(end, end2) - start;\n        if (count < 0) count = 0;\n      } // Skip creating an accessor if the attribute doesn't have data to export\n\n\n      if (count === 0) return null;\n      const minMax = getMinMax(attribute, start, count);\n      let bufferViewTarget; // If geometry isn't provided, don't infer the target usage of the bufferView. For\n      // animation samplers, target must not be set.\n\n      if (geometry !== undefined) {\n        bufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n      }\n\n      const bufferView = this.processBufferView(attribute, componentType, start, count, bufferViewTarget);\n      const accessorDef = {\n        bufferView: bufferView.id,\n        byteOffset: bufferView.byteOffset,\n        componentType,\n        count,\n        max: minMax.max,\n        min: minMax.min,\n        type: types[attribute.itemSize]\n      };\n      if (attribute.normalized === true) accessorDef.normalized = true;\n      if (!json.accessors) json.accessors = [];\n      return json.accessors.push(accessorDef) - 1;\n    },\n\n    /**\n     * Process image\n     * @param  {Image} image to process\n     * @param  {Integer} format of the image (e.g. RGBFormat, RGBAFormat etc)\n     * @param  {Boolean} flipY before writing out the image\n     * @return {Integer}     Index of the processed texture in the \"images\" array\n     */\n    processImage: function (image, format, flipY) {\n      const writer = this;\n      const cache = writer.cache;\n      const json = writer.json;\n      const options = writer.options;\n      const pending = writer.pending;\n      if (!cache.images.has(image)) cache.images.set(image, {});\n      const cachedImages = cache.images.get(image);\n      const mimeType = format === RGBAFormat ? 'image/png' : 'image/jpeg';\n      const key = `${mimeType}:flipY/${flipY.toString()}`;\n      if (cachedImages[key] !== undefined) return cachedImages[key];\n      if (!json.images) json.images = [];\n      const imageDef = {\n        mimeType\n      };\n\n      if (options.embedImages) {\n        const canvas = cachedCanvas = cachedCanvas || document.createElement('canvas');\n        canvas.width = Math.min(image.width, options.maxTextureSize);\n        canvas.height = Math.min(image.height, options.maxTextureSize);\n        const ctx = canvas.getContext('2d');\n\n        if (flipY === true) {\n          ctx.translate(0, canvas.height);\n          ctx.scale(1, -1);\n        }\n\n        if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n          ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        } else {\n          if (format !== RGBAFormat && format !== RGBFormat) {\n            console.error('GLTFExporter: Only RGB and RGBA formats are supported.');\n          }\n\n          if (image.width > options.maxTextureSize || image.height > options.maxTextureSize) {\n            console.warn('GLTFExporter: Image size is bigger than maxTextureSize', image);\n          }\n\n          let data = image.data;\n\n          if (format === RGBFormat) {\n            data = new Uint8ClampedArray(image.height * image.width * 4);\n\n            for (let i = 0, j = 0; i < data.length; i += 4, j += 3) {\n              data[i + 0] = image.data[j + 0];\n              data[i + 1] = image.data[j + 1];\n              data[i + 2] = image.data[j + 2];\n              data[i + 3] = 255;\n            }\n          }\n\n          ctx.putImageData(new ImageData(data, image.width, image.height), 0, 0);\n        }\n\n        if (options.binary === true) {\n          pending.push(new Promise(resolve => {\n            canvas.toBlob(blob => {\n              writer.processBufferViewImage(blob).then(bufferViewIndex => {\n                imageDef.bufferView = bufferViewIndex;\n                resolve();\n              });\n            }, mimeType);\n          }));\n        } else {\n          imageDef.uri = canvas.toDataURL(mimeType);\n        }\n      } else {\n        imageDef.uri = image.src;\n      }\n\n      const index = json.images.push(imageDef) - 1;\n      cachedImages[key] = index;\n      return index;\n    },\n\n    /**\n     * Process sampler\n     * @param  {Texture} map Texture to process\n     * @return {Integer}     Index of the processed texture in the \"samplers\" array\n     */\n    processSampler: function (map) {\n      const json = this.json;\n      if (!json.samplers) json.samplers = [];\n      const samplerDef = {\n        magFilter: THREE_TO_WEBGL[map.magFilter],\n        minFilter: THREE_TO_WEBGL[map.minFilter],\n        wrapS: THREE_TO_WEBGL[map.wrapS],\n        wrapT: THREE_TO_WEBGL[map.wrapT]\n      };\n      return json.samplers.push(samplerDef) - 1;\n    },\n\n    /**\n     * Process texture\n     * @param  {Texture} map Map to process\n     * @return {Integer} Index of the processed texture in the \"textures\" array\n     */\n    processTexture: function (map) {\n      const cache = this.cache;\n      const json = this.json;\n      if (cache.textures.has(map)) return cache.textures.get(map);\n      if (!json.textures) json.textures = [];\n      const textureDef = {\n        sampler: this.processSampler(map),\n        source: this.processImage(map.image, map.format, map.flipY)\n      };\n      if (map.name) textureDef.name = map.name;\n\n      this._invokeAll(ext => {\n        ext.writeTexture && ext.writeTexture(map, textureDef);\n      });\n\n      const index = json.textures.push(textureDef) - 1;\n      cache.textures.set(map, index);\n      return index;\n    },\n\n    /**\n     * Process material\n     * @param  {THREE.Material} material Material to process\n     * @return {Integer|null} Index of the processed material in the \"materials\" array\n     */\n    processMaterial: function (material) {\n      const cache = this.cache;\n      const json = this.json;\n      if (cache.materials.has(material)) return cache.materials.get(material);\n\n      if (material.isShaderMaterial) {\n        console.warn('GLTFExporter: THREE.ShaderMaterial not supported.');\n        return null;\n      }\n\n      if (!json.materials) json.materials = []; // @QUESTION Should we avoid including any attribute that has the default value?\n\n      const materialDef = {\n        pbrMetallicRoughness: {}\n      };\n\n      if (material.isMeshStandardMaterial !== true && material.isMeshBasicMaterial !== true) {\n        console.warn('GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.');\n      } // pbrMetallicRoughness.baseColorFactor\n\n\n      const color = material.color.toArray().concat([material.opacity]);\n\n      if (!equalArray(color, [1, 1, 1, 1])) {\n        materialDef.pbrMetallicRoughness.baseColorFactor = color;\n      }\n\n      if (material.isMeshStandardMaterial) {\n        materialDef.pbrMetallicRoughness.metallicFactor = material.metalness;\n        materialDef.pbrMetallicRoughness.roughnessFactor = material.roughness;\n      } else {\n        materialDef.pbrMetallicRoughness.metallicFactor = 0.5;\n        materialDef.pbrMetallicRoughness.roughnessFactor = 0.5;\n      } // pbrMetallicRoughness.metallicRoughnessTexture\n\n\n      if (material.metalnessMap || material.roughnessMap) {\n        if (material.metalnessMap === material.roughnessMap) {\n          const metalRoughMapDef = {\n            index: this.processTexture(material.metalnessMap)\n          };\n          this.applyTextureTransform(metalRoughMapDef, material.metalnessMap);\n          materialDef.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n        } else {\n          console.warn('THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.');\n        }\n      } // pbrMetallicRoughness.baseColorTexture or pbrSpecularGlossiness diffuseTexture\n\n\n      if (material.map) {\n        const baseColorMapDef = {\n          index: this.processTexture(material.map)\n        };\n        this.applyTextureTransform(baseColorMapDef, material.map);\n        materialDef.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n      }\n\n      if (material.emissive) {\n        // emissiveFactor\n        const emissive = material.emissive.clone().multiplyScalar(material.emissiveIntensity).toArray();\n\n        if (!equalArray(emissive, [0, 0, 0])) {\n          materialDef.emissiveFactor = emissive;\n        } // emissiveTexture\n\n\n        if (material.emissiveMap) {\n          const emissiveMapDef = {\n            index: this.processTexture(material.emissiveMap)\n          };\n          this.applyTextureTransform(emissiveMapDef, material.emissiveMap);\n          materialDef.emissiveTexture = emissiveMapDef;\n        }\n      } // normalTexture\n\n\n      if (material.normalMap) {\n        const normalMapDef = {\n          index: this.processTexture(material.normalMap)\n        };\n\n        if (material.normalScale && material.normalScale.x !== -1) {\n          if (material.normalScale.x !== material.normalScale.y) {\n            console.warn('THREE.GLTFExporter: Normal scale components are different, ignoring Y and exporting X.');\n          }\n\n          normalMapDef.scale = material.normalScale.x;\n        }\n\n        this.applyTextureTransform(normalMapDef, material.normalMap);\n        materialDef.normalTexture = normalMapDef;\n      } // occlusionTexture\n\n\n      if (material.aoMap) {\n        const occlusionMapDef = {\n          index: this.processTexture(material.aoMap),\n          texCoord: 1\n        };\n\n        if (material.aoMapIntensity !== 1.0) {\n          occlusionMapDef.strength = material.aoMapIntensity;\n        }\n\n        this.applyTextureTransform(occlusionMapDef, material.aoMap);\n        materialDef.occlusionTexture = occlusionMapDef;\n      } // alphaMode\n\n\n      if (material.transparent) {\n        materialDef.alphaMode = 'BLEND';\n      } else {\n        if (material.alphaTest > 0.0) {\n          materialDef.alphaMode = 'MASK';\n          materialDef.alphaCutoff = material.alphaTest;\n        }\n      } // doubleSided\n\n\n      if (material.side === DoubleSide) materialDef.doubleSided = true;\n      if (material.name !== '') materialDef.name = material.name;\n      this.serializeUserData(material, materialDef);\n\n      this._invokeAll(ext => {\n        ext.writeMaterial && ext.writeMaterial(material, materialDef);\n      });\n\n      const index = json.materials.push(materialDef) - 1;\n      cache.materials.set(material, index);\n      return index;\n    },\n\n    /**\n     * Process mesh\n     * @param  {THREE.Mesh} mesh Mesh to process\n     * @return {Integer|null} Index of the processed mesh in the \"meshes\" array\n     */\n    processMesh: function (mesh) {\n      const cache = this.cache;\n      const json = this.json;\n      const meshCacheKeyParts = [mesh.geometry.uuid];\n\n      if (Array.isArray(mesh.material)) {\n        for (let i = 0, l = mesh.material.length; i < l; i++) {\n          meshCacheKeyParts.push(mesh.material[i].uuid);\n        }\n      } else {\n        meshCacheKeyParts.push(mesh.material.uuid);\n      }\n\n      const meshCacheKey = meshCacheKeyParts.join(':');\n      if (cache.meshes.has(meshCacheKey)) return cache.meshes.get(meshCacheKey);\n      const geometry = mesh.geometry;\n      let mode; // Use the correct mode\n\n      if (mesh.isLineSegments) {\n        mode = WEBGL_CONSTANTS.LINES;\n      } else if (mesh.isLineLoop) {\n        mode = WEBGL_CONSTANTS.LINE_LOOP;\n      } else if (mesh.isLine) {\n        mode = WEBGL_CONSTANTS.LINE_STRIP;\n      } else if (mesh.isPoints) {\n        mode = WEBGL_CONSTANTS.POINTS;\n      } else {\n        mode = mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n      }\n\n      if (geometry.isBufferGeometry !== true) {\n        throw new Error('THREE.GLTFExporter: Geometry is not of type THREE.BufferGeometry.');\n      }\n\n      const meshDef = {};\n      const attributes = {};\n      const primitives = [];\n      const targets = []; // Conversion between attributes names in threejs and gltf spec\n\n      const nameConversion = {\n        uv: 'TEXCOORD_0',\n        uv2: 'TEXCOORD_1',\n        color: 'COLOR_0',\n        skinWeight: 'WEIGHTS_0',\n        skinIndex: 'JOINTS_0'\n      };\n      const originalNormal = geometry.getAttribute('normal');\n\n      if (originalNormal !== undefined && !this.isNormalizedNormalAttribute(originalNormal)) {\n        console.warn('THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.');\n        geometry.setAttribute('normal', this.createNormalizedNormalAttribute(originalNormal));\n      } // @QUESTION Detect if .vertexColors = true?\n      // For every attribute create an accessor\n\n\n      let modifiedAttribute = null;\n\n      for (let attributeName in geometry.attributes) {\n        // Ignore morph target attributes, which are exported later.\n        if (attributeName.substr(0, 5) === 'morph') continue;\n        var attribute = geometry.attributes[attributeName];\n        attributeName = nameConversion[attributeName] || attributeName.toUpperCase(); // Prefix all geometry attributes except the ones specifically\n        // listed in the spec; non-spec attributes are considered custom.\n\n        const validVertexAttributes = /^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n        if (!validVertexAttributes.test(attributeName)) attributeName = `_${attributeName}`;\n\n        if (cache.attributes.has(this.getUID(attribute))) {\n          attributes[attributeName] = cache.attributes.get(this.getUID(attribute));\n          continue;\n        } // JOINTS_0 must be UNSIGNED_BYTE or UNSIGNED_SHORT.\n\n\n        modifiedAttribute = null;\n        const array = attribute.array;\n\n        if (attributeName === 'JOINTS_0' && !(array instanceof Uint16Array) && !(array instanceof Uint8Array)) {\n          console.warn('GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.');\n          modifiedAttribute = new BufferAttribute(new Uint16Array(array), attribute.itemSize, attribute.normalized);\n        }\n\n        const accessor = this.processAccessor(modifiedAttribute || attribute, geometry);\n\n        if (accessor !== null) {\n          attributes[attributeName] = accessor;\n          cache.attributes.set(this.getUID(attribute), accessor);\n        }\n      }\n\n      if (originalNormal !== undefined) geometry.setAttribute('normal', originalNormal); // Skip if no exportable attributes found\n\n      if (Object.keys(attributes).length === 0) return null; // Morph targets\n\n      if (mesh.morphTargetInfluences !== undefined && mesh.morphTargetInfluences.length > 0) {\n        const weights = [];\n        const targetNames = [];\n        const reverseDictionary = {};\n\n        if (mesh.morphTargetDictionary !== undefined) {\n          for (let key in mesh.morphTargetDictionary) {\n            reverseDictionary[mesh.morphTargetDictionary[key]] = key;\n          }\n        }\n\n        for (let i = 0; i < mesh.morphTargetInfluences.length; ++i) {\n          const target = {};\n          let warned = false;\n\n          for (let attributeName in geometry.morphAttributes) {\n            // glTF 2.0 morph supports only POSITION/NORMAL/TANGENT.\n            // Three.js doesn't support TANGENT yet.\n            if (attributeName !== 'position' && attributeName !== 'normal') {\n              if (!warned) {\n                console.warn('GLTFExporter: Only POSITION and NORMAL morph are supported.');\n                warned = true;\n              }\n\n              continue;\n            }\n\n            var attribute = geometry.morphAttributes[attributeName][i];\n            const gltfAttributeName = attributeName.toUpperCase(); // Three.js morph attribute has absolute values while the one of glTF has relative values.\n            //\n            // glTF 2.0 Specification:\n            // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#morph-targets\n\n            const baseAttribute = geometry.attributes[attributeName];\n\n            if (cache.attributes.has(this.getUID(attribute))) {\n              target[gltfAttributeName] = cache.attributes.get(this.getUID(attribute));\n              continue;\n            } // Clones attribute not to override\n\n\n            const relativeAttribute = attribute.clone();\n\n            if (!geometry.morphTargetsRelative) {\n              for (let j = 0, jl = attribute.count; j < jl; j++) {\n                relativeAttribute.setXYZ(j, attribute.getX(j) - baseAttribute.getX(j), attribute.getY(j) - baseAttribute.getY(j), attribute.getZ(j) - baseAttribute.getZ(j));\n              }\n            }\n\n            target[gltfAttributeName] = this.processAccessor(relativeAttribute, geometry);\n            cache.attributes.set(this.getUID(baseAttribute), target[gltfAttributeName]);\n          }\n\n          targets.push(target);\n          weights.push(mesh.morphTargetInfluences[i]);\n          if (mesh.morphTargetDictionary !== undefined) targetNames.push(reverseDictionary[i]);\n        }\n\n        meshDef.weights = weights;\n\n        if (targetNames.length > 0) {\n          meshDef.extras = {};\n          meshDef.extras.targetNames = targetNames;\n        }\n      }\n\n      const isMultiMaterial = Array.isArray(mesh.material);\n      if (isMultiMaterial && geometry.groups.length === 0) return null;\n      const materials = isMultiMaterial ? mesh.material : [mesh.material];\n      const groups = isMultiMaterial ? geometry.groups : [{\n        materialIndex: 0,\n        start: undefined,\n        count: undefined\n      }];\n\n      for (let i = 0, il = groups.length; i < il; i++) {\n        const primitive = {\n          mode,\n          attributes\n        };\n        this.serializeUserData(geometry, primitive);\n        if (targets.length > 0) primitive.targets = targets;\n\n        if (geometry.index !== null) {\n          let cacheKey = this.getUID(geometry.index);\n\n          if (groups[i].start !== undefined || groups[i].count !== undefined) {\n            cacheKey += `:${groups[i].start}:${groups[i].count}`;\n          }\n\n          if (cache.attributes.has(cacheKey)) {\n            primitive.indices = cache.attributes.get(cacheKey);\n          } else {\n            primitive.indices = this.processAccessor(geometry.index, geometry, groups[i].start, groups[i].count);\n            cache.attributes.set(cacheKey, primitive.indices);\n          }\n\n          if (primitive.indices === null) delete primitive.indices;\n        }\n\n        const material = this.processMaterial(materials[groups[i].materialIndex]);\n        if (material !== null) primitive.material = material;\n        primitives.push(primitive);\n      }\n\n      meshDef.primitives = primitives;\n      if (!json.meshes) json.meshes = [];\n\n      this._invokeAll(ext => {\n        ext.writeMesh && ext.writeMesh(mesh, meshDef);\n      });\n\n      const index = json.meshes.push(meshDef) - 1;\n      cache.meshes.set(meshCacheKey, index);\n      return index;\n    },\n\n    /**\n     * Process camera\n     * @param  {THREE.Camera} camera Camera to process\n     * @return {Integer}      Index of the processed mesh in the \"camera\" array\n     */\n    processCamera: function (camera) {\n      const json = this.json;\n      if (!json.cameras) json.cameras = [];\n      const isOrtho = camera.isOrthographicCamera;\n      const cameraDef = {\n        type: isOrtho ? 'orthographic' : 'perspective'\n      };\n\n      if (isOrtho) {\n        cameraDef.orthographic = {\n          xmag: camera.right * 2,\n          ymag: camera.top * 2,\n          zfar: camera.far <= 0 ? 0.001 : camera.far,\n          znear: camera.near < 0 ? 0 : camera.near\n        };\n      } else {\n        cameraDef.perspective = {\n          aspectRatio: camera.aspect,\n          yfov: MathUtils.degToRad(camera.fov),\n          zfar: camera.far <= 0 ? 0.001 : camera.far,\n          znear: camera.near < 0 ? 0 : camera.near\n        };\n      } // Question: Is saving \"type\" as name intentional?\n\n\n      if (camera.name !== '') cameraDef.name = camera.type;\n      return json.cameras.push(cameraDef) - 1;\n    },\n\n    /**\n     * Creates glTF animation entry from AnimationClip object.\n     *\n     * Status:\n     * - Only properties listed in PATH_PROPERTIES may be animated.\n     *\n     * @param {THREE.AnimationClip} clip\n     * @param {THREE.Object3D} root\n     * @return {number|null}\n     */\n    processAnimation: function (clip, root) {\n      const json = this.json;\n      const nodeMap = this.nodeMap;\n      if (!json.animations) json.animations = [];\n      clip = GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(), root);\n      const tracks = clip.tracks;\n      const channels = [];\n      const samplers = [];\n\n      for (let i = 0; i < tracks.length; ++i) {\n        const track = tracks[i];\n        const trackBinding = PropertyBinding.parseTrackName(track.name);\n        let trackNode = PropertyBinding.findNode(root, trackBinding.nodeName);\n        const trackProperty = PATH_PROPERTIES[trackBinding.propertyName];\n\n        if (trackBinding.objectName === 'bones') {\n          if (trackNode.isSkinnedMesh === true) {\n            trackNode = trackNode.skeleton.getBoneByName(trackBinding.objectIndex);\n          } else {\n            trackNode = undefined;\n          }\n        }\n\n        if (!trackNode || !trackProperty) {\n          console.warn('THREE.GLTFExporter: Could not export animation track \"%s\".', track.name);\n          return null;\n        }\n\n        const inputItemSize = 1;\n        let outputItemSize = track.values.length / track.times.length;\n\n        if (trackProperty === PATH_PROPERTIES.morphTargetInfluences) {\n          outputItemSize /= trackNode.morphTargetInfluences.length;\n        }\n\n        let interpolation; // @TODO export CubicInterpolant(InterpolateSmooth) as CUBICSPLINE\n        // Detecting glTF cubic spline interpolant by checking factory method's special property\n        // GLTFCubicSplineInterpolant is a custom interpolant and track doesn't return\n        // valid value from .getInterpolation().\n\n        if (track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline === true) {\n          interpolation = 'CUBICSPLINE'; // itemSize of CUBICSPLINE keyframe is 9\n          // (VEC3 * 3: inTangent, splineVertex, and outTangent)\n          // but needs to be stored as VEC3 so dividing by 3 here.\n\n          outputItemSize /= 3;\n        } else if (track.getInterpolation() === InterpolateDiscrete) {\n          interpolation = 'STEP';\n        } else {\n          interpolation = 'LINEAR';\n        }\n\n        samplers.push({\n          input: this.processAccessor(new BufferAttribute(track.times, inputItemSize)),\n          output: this.processAccessor(new BufferAttribute(track.values, outputItemSize)),\n          interpolation\n        });\n        channels.push({\n          sampler: samplers.length - 1,\n          target: {\n            node: nodeMap.get(trackNode),\n            path: trackProperty\n          }\n        });\n      }\n\n      json.animations.push({\n        name: clip.name || `clip_${json.animations.length}`,\n        samplers,\n        channels\n      });\n      return json.animations.length - 1;\n    },\n\n    /**\n     * @param {THREE.Object3D} object\n     * @return {number|null}\n     */\n    processSkin: function (object) {\n      const json = this.json;\n      const nodeMap = this.nodeMap;\n      const node = json.nodes[nodeMap.get(object)];\n      const skeleton = object.skeleton;\n      if (skeleton === undefined) return null;\n      const rootJoint = object.skeleton.bones[0];\n      if (rootJoint === undefined) return null;\n      const joints = [];\n      const inverseBindMatrices = new Float32Array(skeleton.bones.length * 16);\n      const temporaryBoneInverse = new Matrix4();\n\n      for (let i = 0; i < skeleton.bones.length; ++i) {\n        joints.push(nodeMap.get(skeleton.bones[i]));\n        temporaryBoneInverse.copy(skeleton.boneInverses[i]);\n        temporaryBoneInverse.multiply(object.bindMatrix).toArray(inverseBindMatrices, i * 16);\n      }\n\n      if (json.skins === undefined) json.skins = [];\n      json.skins.push({\n        inverseBindMatrices: this.processAccessor(new BufferAttribute(inverseBindMatrices, 16)),\n        joints,\n        skeleton: nodeMap.get(rootJoint)\n      });\n      const skinIndex = node.skin = json.skins.length - 1;\n      return skinIndex;\n    },\n\n    /**\n     * Process Object3D node\n     * @param  {THREE.Object3D} node Object3D to processNode\n     * @return {Integer} Index of the node in the nodes list\n     */\n    processNode: function (object) {\n      const json = this.json;\n      const options = this.options;\n      const nodeMap = this.nodeMap;\n      if (!json.nodes) json.nodes = [];\n      const nodeDef = {};\n\n      if (options.trs) {\n        const rotation = object.quaternion.toArray();\n        const position = object.position.toArray();\n        const scale = object.scale.toArray();\n\n        if (!equalArray(rotation, [0, 0, 0, 1])) {\n          nodeDef.rotation = rotation;\n        }\n\n        if (!equalArray(position, [0, 0, 0])) {\n          nodeDef.translation = position;\n        }\n\n        if (!equalArray(scale, [1, 1, 1])) {\n          nodeDef.scale = scale;\n        }\n      } else {\n        if (object.matrixAutoUpdate) {\n          object.updateMatrix();\n        }\n\n        if (isIdentityMatrix(object.matrix) === false) {\n          nodeDef.matrix = object.matrix.elements;\n        }\n      } // We don't export empty strings name because it represents no-name in Three.js.\n\n\n      if (object.name !== '') nodeDef.name = String(object.name);\n      this.serializeUserData(object, nodeDef);\n\n      if (object.isMesh || object.isLine || object.isPoints) {\n        const meshIndex = this.processMesh(object);\n        if (meshIndex !== null) nodeDef.mesh = meshIndex;\n      } else if (object.isCamera) {\n        nodeDef.camera = this.processCamera(object);\n      }\n\n      if (object.isSkinnedMesh) this.skins.push(object);\n\n      if (object.children.length > 0) {\n        const children = [];\n\n        for (let i = 0, l = object.children.length; i < l; i++) {\n          const child = object.children[i];\n\n          if (child.visible || options.onlyVisible === false) {\n            var nodeIndex = this.processNode(child);\n            if (nodeIndex !== null) children.push(nodeIndex);\n          }\n        }\n\n        if (children.length > 0) nodeDef.children = children;\n      }\n\n      this._invokeAll(ext => {\n        ext.writeNode && ext.writeNode(object, nodeDef);\n      });\n\n      var nodeIndex = json.nodes.push(nodeDef) - 1;\n      nodeMap.set(object, nodeIndex);\n      return nodeIndex;\n    },\n\n    /**\n     * Process Scene\n     * @param  {Scene} node Scene to process\n     */\n    processScene: function (scene) {\n      const json = this.json;\n      const options = this.options;\n\n      if (!json.scenes) {\n        json.scenes = [];\n        json.scene = 0;\n      }\n\n      const sceneDef = {};\n      if (scene.name !== '') sceneDef.name = scene.name;\n      json.scenes.push(sceneDef);\n      const nodes = [];\n\n      for (let i = 0, l = scene.children.length; i < l; i++) {\n        const child = scene.children[i];\n\n        if (child.visible || options.onlyVisible === false) {\n          const nodeIndex = this.processNode(child);\n          if (nodeIndex !== null) nodes.push(nodeIndex);\n        }\n      }\n\n      if (nodes.length > 0) sceneDef.nodes = nodes;\n      this.serializeUserData(scene, sceneDef);\n    },\n\n    /**\n     * Creates a Scene to hold a list of objects and parse it\n     * @param  {Array} objects List of objects to process\n     */\n    processObjects: function (objects) {\n      const scene = new Scene();\n      scene.name = 'AuxScene';\n\n      for (let i = 0; i < objects.length; i++) {\n        // We push directly to children instead of calling `add` to prevent\n        // modify the .parent and break its original scene and hierarchy\n        scene.children.push(objects[i]);\n      }\n\n      this.processScene(scene);\n    },\n\n    /**\n     * @param {THREE.Object3D|Array<THREE.Object3D>} input\n     */\n    processInput: function (input) {\n      const options = this.options;\n      input = input instanceof Array ? input : [input];\n\n      this._invokeAll(ext => {\n        ext.beforeParse && ext.beforeParse(input);\n      });\n\n      const objectsWithoutScene = [];\n\n      for (let i = 0; i < input.length; i++) {\n        if (input[i] instanceof Scene) {\n          this.processScene(input[i]);\n        } else {\n          objectsWithoutScene.push(input[i]);\n        }\n      }\n\n      if (objectsWithoutScene.length > 0) this.processObjects(objectsWithoutScene);\n\n      for (let i = 0; i < this.skins.length; ++i) {\n        this.processSkin(this.skins[i]);\n      }\n\n      for (let i = 0; i < options.animations.length; ++i) {\n        this.processAnimation(options.animations[i], input[0]);\n      }\n\n      this._invokeAll(ext => {\n        ext.afterParse && ext.afterParse(input);\n      });\n    },\n    _invokeAll: function (func) {\n      for (let i = 0, il = this.plugins.length; i < il; i++) {\n        func(this.plugins[i]);\n      }\n    }\n  };\n  /**\n   * Punctual Lights Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n   */\n\n  function GLTFLightExtension(writer) {\n    this.writer = writer;\n    this.name = 'KHR_lights_punctual';\n  }\n\n  GLTFLightExtension.prototype = {\n    constructor: GLTFLightExtension,\n    writeNode: function (light, nodeDef) {\n      if (!light.isLight) return;\n\n      if (!light.isDirectionalLight && !light.isPointLight && !light.isSpotLight) {\n        console.warn('THREE.GLTFExporter: Only directional, point, and spot lights are supported.', light);\n        return;\n      }\n\n      const writer = this.writer;\n      const json = writer.json;\n      const extensionsUsed = writer.extensionsUsed;\n      const lightDef = {};\n      if (light.name) lightDef.name = light.name;\n      lightDef.color = light.color.toArray();\n      lightDef.intensity = light.intensity;\n\n      if (light.isDirectionalLight) {\n        lightDef.type = 'directional';\n      } else if (light.isPointLight) {\n        lightDef.type = 'point';\n        if (light.distance > 0) lightDef.range = light.distance;\n      } else if (light.isSpotLight) {\n        lightDef.type = 'spot';\n        if (light.distance > 0) lightDef.range = light.distance;\n        lightDef.spot = {};\n        lightDef.spot.innerConeAngle = (light.penumbra - 1.0) * light.angle * -1.0;\n        lightDef.spot.outerConeAngle = light.angle;\n      }\n\n      if (light.decay !== undefined && light.decay !== 2) {\n        console.warn('THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, ' + 'and expects light.decay=2.');\n      }\n\n      if (light.target && (light.target.parent !== light || light.target.position.x !== 0 || light.target.position.y !== 0 || light.target.position.z !== -1)) {\n        console.warn('THREE.GLTFExporter: Light direction may be lost. For best results, ' + 'make light.target a child of the light with position 0,0,-1.');\n      }\n\n      if (!extensionsUsed[this.name]) {\n        json.extensions = json.extensions || {};\n        json.extensions[this.name] = {\n          lights: []\n        };\n        extensionsUsed[this.name] = true;\n      }\n\n      const lights = json.extensions[this.name].lights;\n      lights.push(lightDef);\n      nodeDef.extensions = nodeDef.extensions || {};\n      nodeDef.extensions[this.name] = {\n        light: lights.length - 1\n      };\n    }\n  };\n  /**\n   * Unlit Materials Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n   */\n\n  function GLTFMaterialsUnlitExtension(writer) {\n    this.writer = writer;\n    this.name = 'KHR_materials_unlit';\n  }\n\n  GLTFMaterialsUnlitExtension.prototype = {\n    constructor: GLTFMaterialsUnlitExtension,\n    writeMaterial: function (material, materialDef) {\n      if (!material.isMeshBasicMaterial) return;\n      const writer = this.writer;\n      const extensionsUsed = writer.extensionsUsed;\n      materialDef.extensions = materialDef.extensions || {};\n      materialDef.extensions[this.name] = {};\n      extensionsUsed[this.name] = true;\n      materialDef.pbrMetallicRoughness.metallicFactor = 0.0;\n      materialDef.pbrMetallicRoughness.roughnessFactor = 0.9;\n    }\n  };\n  /**\n   * Specular-Glossiness Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness\n   */\n\n  function GLTFMaterialsPBRSpecularGlossiness(writer) {\n    this.writer = writer;\n    this.name = 'KHR_materials_pbrSpecularGlossiness';\n  }\n\n  GLTFMaterialsPBRSpecularGlossiness.prototype = {\n    constructor: GLTFMaterialsPBRSpecularGlossiness,\n    writeMaterial: function (material, materialDef) {\n      if (!material.isGLTFSpecularGlossinessMaterial) return;\n      const writer = this.writer;\n      const extensionsUsed = writer.extensionsUsed;\n      const extensionDef = {};\n\n      if (materialDef.pbrMetallicRoughness.baseColorFactor) {\n        extensionDef.diffuseFactor = materialDef.pbrMetallicRoughness.baseColorFactor;\n      }\n\n      const specularFactor = [1, 1, 1];\n      material.specular.toArray(specularFactor, 0);\n      extensionDef.specularFactor = specularFactor;\n      extensionDef.glossinessFactor = material.glossiness;\n\n      if (materialDef.pbrMetallicRoughness.baseColorTexture) {\n        extensionDef.diffuseTexture = materialDef.pbrMetallicRoughness.baseColorTexture;\n      }\n\n      if (material.specularMap) {\n        const specularMapDef = {\n          index: writer.processTexture(material.specularMap)\n        };\n        writer.applyTextureTransform(specularMapDef, material.specularMap);\n        extensionDef.specularGlossinessTexture = specularMapDef;\n      }\n\n      materialDef.extensions = materialDef.extensions || {};\n      materialDef.extensions[this.name] = extensionDef;\n      extensionsUsed[this.name] = true;\n    }\n  };\n  /**\n   * Static utility functions\n   */\n\n  GLTFExporter.Utils = {\n    insertKeyframe: function (track, time) {\n      const tolerance = 0.001; // 1ms\n\n      const valueSize = track.getValueSize();\n      const times = new track.TimeBufferType(track.times.length + 1);\n      const values = new track.ValueBufferType(track.values.length + valueSize);\n      const interpolant = track.createInterpolant(new track.ValueBufferType(valueSize));\n      let index;\n\n      if (track.times.length === 0) {\n        times[0] = time;\n\n        for (let i = 0; i < valueSize; i++) {\n          values[i] = 0;\n        }\n\n        index = 0;\n      } else if (time < track.times[0]) {\n        if (Math.abs(track.times[0] - time) < tolerance) return 0;\n        times[0] = time;\n        times.set(track.times, 1);\n        values.set(interpolant.evaluate(time), 0);\n        values.set(track.values, valueSize);\n        index = 0;\n      } else if (time > track.times[track.times.length - 1]) {\n        if (Math.abs(track.times[track.times.length - 1] - time) < tolerance) {\n          return track.times.length - 1;\n        }\n\n        times[times.length - 1] = time;\n        times.set(track.times, 0);\n        values.set(track.values, 0);\n        values.set(interpolant.evaluate(time), track.values.length);\n        index = times.length - 1;\n      } else {\n        for (let i = 0; i < track.times.length; i++) {\n          if (Math.abs(track.times[i] - time) < tolerance) return i;\n\n          if (track.times[i] < time && track.times[i + 1] > time) {\n            times.set(track.times.slice(0, i + 1), 0);\n            times[i + 1] = time;\n            times.set(track.times.slice(i + 1), i + 2);\n            values.set(track.values.slice(0, (i + 1) * valueSize), 0);\n            values.set(interpolant.evaluate(time), (i + 1) * valueSize);\n            values.set(track.values.slice((i + 1) * valueSize), (i + 2) * valueSize);\n            index = i + 1;\n            break;\n          }\n        }\n      }\n\n      track.times = times;\n      track.values = values;\n      return index;\n    },\n    mergeMorphTargetTracks: function (clip, root) {\n      const tracks = [];\n      const mergedTracks = {};\n      const sourceTracks = clip.tracks;\n\n      for (let i = 0; i < sourceTracks.length; ++i) {\n        let sourceTrack = sourceTracks[i];\n        const sourceTrackBinding = PropertyBinding.parseTrackName(sourceTrack.name);\n        const sourceTrackNode = PropertyBinding.findNode(root, sourceTrackBinding.nodeName);\n\n        if (sourceTrackBinding.propertyName !== 'morphTargetInfluences' || sourceTrackBinding.propertyIndex === undefined) {\n          // Tracks that don't affect morph targets, or that affect all morph targets together, can be left as-is.\n          tracks.push(sourceTrack);\n          continue;\n        }\n\n        if (sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete && sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear) {\n          if (sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n            // This should never happen, because glTF morph target animations\n            // affect all targets already.\n            throw new Error('THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.');\n          }\n\n          console.warn('THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.');\n          sourceTrack = sourceTrack.clone();\n          sourceTrack.setInterpolation(InterpolateLinear);\n        }\n\n        const targetCount = sourceTrackNode.morphTargetInfluences.length;\n        const targetIndex = sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];\n\n        if (targetIndex === undefined) {\n          throw new Error(`THREE.GLTFExporter: Morph target name not found: ${sourceTrackBinding.propertyIndex}`);\n        }\n\n        let mergedTrack; // If this is the first time we've seen this object, create a new\n        // track to store merged keyframe data for each morph target.\n\n        if (mergedTracks[sourceTrackNode.uuid] === undefined) {\n          mergedTrack = sourceTrack.clone();\n          const values = new mergedTrack.ValueBufferType(targetCount * mergedTrack.times.length);\n\n          for (let j = 0; j < mergedTrack.times.length; j++) {\n            values[j * targetCount + targetIndex] = mergedTrack.values[j];\n          } // We need to take into consideration the intended target node\n          // of our original un-merged morphTarget animation.\n\n\n          mergedTrack.name = `${sourceTrackBinding.nodeName || ''}.morphTargetInfluences`;\n          mergedTrack.values = values;\n          mergedTracks[sourceTrackNode.uuid] = mergedTrack;\n          tracks.push(mergedTrack);\n          continue;\n        }\n\n        const sourceInterpolant = sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));\n        mergedTrack = mergedTracks[sourceTrackNode.uuid]; // For every existing keyframe of the merged track, write a (possibly\n        // interpolated) value from the source track.\n\n        for (let j = 0; j < mergedTrack.times.length; j++) {\n          mergedTrack.values[j * targetCount + targetIndex] = sourceInterpolant.evaluate(mergedTrack.times[j]);\n        } // For every existing keyframe of the source track, write a (possibly\n        // new) keyframe to the merged track. Values from the previous loop may\n        // be written again, but keyframes are de-duplicated.\n\n\n        for (let j = 0; j < sourceTrack.times.length; j++) {\n          const keyframeIndex = this.insertKeyframe(mergedTrack, sourceTrack.times[j]);\n          mergedTrack.values[keyframeIndex * targetCount + targetIndex] = sourceTrack.values[j];\n        }\n      }\n\n      clip.tracks = tracks;\n      return clip;\n    }\n  };\n  return GLTFExporter;\n})();\n\nexport { GLTFExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}