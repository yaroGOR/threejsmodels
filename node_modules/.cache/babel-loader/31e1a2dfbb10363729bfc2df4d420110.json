{"ast":null,"code":"import { CompressedTextureLoader, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_PVRTC_2BPPV1_Format } from 'three';\n/*\n *\t PVR v2 (legacy) parser\n *   TODO : Add Support for PVR v3 format\n *   TODO : implement loadMipmaps option\n */\n\nvar PVRLoader = function PVRLoader(manager) {\n  CompressedTextureLoader.call(this, manager);\n};\n\nPVRLoader.prototype = Object.assign(Object.create(CompressedTextureLoader.prototype), {\n  constructor: PVRLoader,\n  parse: function parse(buffer, loadMipmaps) {\n    var headerLengthInt = 13;\n    var header = new Uint32Array(buffer, 0, headerLengthInt);\n    var pvrDatas = {\n      buffer: buffer,\n      header: header,\n      loadMipmaps: loadMipmaps\n    };\n\n    if (header[0] === 0x03525650) {\n      // PVR v3\n      return PVRLoader._parseV3(pvrDatas);\n    } else if (header[11] === 0x21525650) {\n      // PVR v2\n      return PVRLoader._parseV2(pvrDatas);\n    } else {\n      console.error('THREE.PVRLoader: Unknown PVR format.');\n    }\n  }\n});\n\nPVRLoader._parseV3 = function (pvrDatas) {\n  var header = pvrDatas.header;\n  var bpp, format;\n  var metaLen = header[12],\n      pixelFormat = header[2],\n      height = header[6],\n      width = header[7],\n      // numSurfs = header[ 9 ],\n  numFaces = header[10],\n      numMipmaps = header[11];\n\n  switch (pixelFormat) {\n    case 0:\n      // PVRTC 2bpp RGB\n      bpp = 2;\n      format = RGB_PVRTC_2BPPV1_Format;\n      break;\n\n    case 1:\n      // PVRTC 2bpp RGBA\n      bpp = 2;\n      format = RGBA_PVRTC_2BPPV1_Format;\n      break;\n\n    case 2:\n      // PVRTC 4bpp RGB\n      bpp = 4;\n      format = RGB_PVRTC_4BPPV1_Format;\n      break;\n\n    case 3:\n      // PVRTC 4bpp RGBA\n      bpp = 4;\n      format = RGBA_PVRTC_4BPPV1_Format;\n      break;\n\n    default:\n      console.error('THREE.PVRLoader: Unsupported PVR format:', pixelFormat);\n  }\n\n  pvrDatas.dataPtr = 52 + metaLen;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numFaces;\n  pvrDatas.numMipmaps = numMipmaps;\n  pvrDatas.isCubemap = numFaces === 6;\n  return PVRLoader._extract(pvrDatas);\n};\n\nPVRLoader._parseV2 = function (pvrDatas) {\n  var header = pvrDatas.header;\n  var headerLength = header[0],\n      height = header[1],\n      width = header[2],\n      numMipmaps = header[3],\n      flags = header[4],\n      // dataLength = header[ 5 ],\n  // bpp =  header[ 6 ],\n  // bitmaskRed = header[ 7 ],\n  // bitmaskGreen = header[ 8 ],\n  // bitmaskBlue = header[ 9 ],\n  bitmaskAlpha = header[10],\n      // pvrTag = header[ 11 ],\n  numSurfs = header[12];\n  var TYPE_MASK = 0xff;\n  var PVRTC_2 = 24,\n      PVRTC_4 = 25;\n  var formatFlags = flags & TYPE_MASK;\n  var bpp, format;\n\n  var _hasAlpha = bitmaskAlpha > 0;\n\n  if (formatFlags === PVRTC_4) {\n    format = _hasAlpha ? RGBA_PVRTC_4BPPV1_Format : RGB_PVRTC_4BPPV1_Format;\n    bpp = 4;\n  } else if (formatFlags === PVRTC_2) {\n    format = _hasAlpha ? RGBA_PVRTC_2BPPV1_Format : RGB_PVRTC_2BPPV1_Format;\n    bpp = 2;\n  } else {\n    console.error('THREE.PVRLoader: Unknown PVR format:', formatFlags);\n  }\n\n  pvrDatas.dataPtr = headerLength;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numSurfs;\n  pvrDatas.numMipmaps = numMipmaps + 1; // guess cubemap type seems tricky in v2\n  // it juste a pvr containing 6 surface (no explicit cubemap type)\n\n  pvrDatas.isCubemap = numSurfs === 6;\n  return PVRLoader._extract(pvrDatas);\n};\n\nPVRLoader._extract = function (pvrDatas) {\n  var pvr = {\n    mipmaps: [],\n    width: pvrDatas.width,\n    height: pvrDatas.height,\n    format: pvrDatas.format,\n    mipmapCount: pvrDatas.numMipmaps,\n    isCubemap: pvrDatas.isCubemap\n  };\n  var buffer = pvrDatas.buffer;\n  var dataOffset = pvrDatas.dataPtr,\n      bpp = pvrDatas.bpp,\n      numSurfs = pvrDatas.numSurfaces,\n      dataSize = 0,\n      blockSize = 0,\n      blockWidth = 0,\n      blockHeight = 0,\n      widthBlocks = 0,\n      heightBlocks = 0;\n\n  if (bpp === 2) {\n    blockWidth = 8;\n    blockHeight = 4;\n  } else {\n    blockWidth = 4;\n    blockHeight = 4;\n  }\n\n  blockSize = blockWidth * blockHeight * bpp / 8;\n  pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n  var mipLevel = 0;\n\n  while (mipLevel < pvrDatas.numMipmaps) {\n    var sWidth = pvrDatas.width >> mipLevel,\n        sHeight = pvrDatas.height >> mipLevel;\n    widthBlocks = sWidth / blockWidth;\n    heightBlocks = sHeight / blockHeight; // Clamp to minimum number of blocks\n\n    if (widthBlocks < 2) widthBlocks = 2;\n    if (heightBlocks < 2) heightBlocks = 2;\n    dataSize = widthBlocks * heightBlocks * blockSize;\n\n    for (var surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n      var byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n      var mipmap = {\n        data: byteArray,\n        width: sWidth,\n        height: sHeight\n      };\n      pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n      dataOffset += dataSize;\n    }\n\n    mipLevel++;\n  }\n\n  return pvr;\n};\n\nexport { PVRLoader };","map":{"version":3,"names":["CompressedTextureLoader","RGBA_PVRTC_4BPPV1_Format","RGB_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_PVRTC_2BPPV1_Format","PVRLoader","manager","call","prototype","Object","assign","create","constructor","parse","buffer","loadMipmaps","headerLengthInt","header","Uint32Array","pvrDatas","_parseV3","_parseV2","console","error","bpp","format","metaLen","pixelFormat","height","width","numFaces","numMipmaps","dataPtr","numSurfaces","isCubemap","_extract","headerLength","flags","bitmaskAlpha","numSurfs","TYPE_MASK","PVRTC_2","PVRTC_4","formatFlags","_hasAlpha","pvr","mipmaps","mipmapCount","dataOffset","dataSize","blockSize","blockWidth","blockHeight","widthBlocks","heightBlocks","length","mipLevel","sWidth","sHeight","surfIndex","byteArray","Uint8Array","mipmap","data"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/loaders/PVRLoader.js"],"sourcesContent":["import { CompressedTextureLoader, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_PVRTC_2BPPV1_Format } from 'three';\n\n/*\n *\t PVR v2 (legacy) parser\n *   TODO : Add Support for PVR v3 format\n *   TODO : implement loadMipmaps option\n */\n\nvar PVRLoader = function (manager) {\n  CompressedTextureLoader.call(this, manager);\n};\n\nPVRLoader.prototype = Object.assign(Object.create(CompressedTextureLoader.prototype), {\n  constructor: PVRLoader,\n  parse: function (buffer, loadMipmaps) {\n    var headerLengthInt = 13;\n    var header = new Uint32Array(buffer, 0, headerLengthInt);\n    var pvrDatas = {\n      buffer: buffer,\n      header: header,\n      loadMipmaps: loadMipmaps\n    };\n\n    if (header[0] === 0x03525650) {\n      // PVR v3\n      return PVRLoader._parseV3(pvrDatas);\n    } else if (header[11] === 0x21525650) {\n      // PVR v2\n      return PVRLoader._parseV2(pvrDatas);\n    } else {\n      console.error('THREE.PVRLoader: Unknown PVR format.');\n    }\n  }\n});\n\nPVRLoader._parseV3 = function (pvrDatas) {\n  var header = pvrDatas.header;\n  var bpp, format;\n  var metaLen = header[12],\n      pixelFormat = header[2],\n      height = header[6],\n      width = header[7],\n      // numSurfs = header[ 9 ],\n  numFaces = header[10],\n      numMipmaps = header[11];\n\n  switch (pixelFormat) {\n    case 0:\n      // PVRTC 2bpp RGB\n      bpp = 2;\n      format = RGB_PVRTC_2BPPV1_Format;\n      break;\n\n    case 1:\n      // PVRTC 2bpp RGBA\n      bpp = 2;\n      format = RGBA_PVRTC_2BPPV1_Format;\n      break;\n\n    case 2:\n      // PVRTC 4bpp RGB\n      bpp = 4;\n      format = RGB_PVRTC_4BPPV1_Format;\n      break;\n\n    case 3:\n      // PVRTC 4bpp RGBA\n      bpp = 4;\n      format = RGBA_PVRTC_4BPPV1_Format;\n      break;\n\n    default:\n      console.error('THREE.PVRLoader: Unsupported PVR format:', pixelFormat);\n  }\n\n  pvrDatas.dataPtr = 52 + metaLen;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numFaces;\n  pvrDatas.numMipmaps = numMipmaps;\n  pvrDatas.isCubemap = numFaces === 6;\n  return PVRLoader._extract(pvrDatas);\n};\n\nPVRLoader._parseV2 = function (pvrDatas) {\n  var header = pvrDatas.header;\n  var headerLength = header[0],\n      height = header[1],\n      width = header[2],\n      numMipmaps = header[3],\n      flags = header[4],\n      // dataLength = header[ 5 ],\n  // bpp =  header[ 6 ],\n  // bitmaskRed = header[ 7 ],\n  // bitmaskGreen = header[ 8 ],\n  // bitmaskBlue = header[ 9 ],\n  bitmaskAlpha = header[10],\n      // pvrTag = header[ 11 ],\n  numSurfs = header[12];\n  var TYPE_MASK = 0xff;\n  var PVRTC_2 = 24,\n      PVRTC_4 = 25;\n  var formatFlags = flags & TYPE_MASK;\n  var bpp, format;\n\n  var _hasAlpha = bitmaskAlpha > 0;\n\n  if (formatFlags === PVRTC_4) {\n    format = _hasAlpha ? RGBA_PVRTC_4BPPV1_Format : RGB_PVRTC_4BPPV1_Format;\n    bpp = 4;\n  } else if (formatFlags === PVRTC_2) {\n    format = _hasAlpha ? RGBA_PVRTC_2BPPV1_Format : RGB_PVRTC_2BPPV1_Format;\n    bpp = 2;\n  } else {\n    console.error('THREE.PVRLoader: Unknown PVR format:', formatFlags);\n  }\n\n  pvrDatas.dataPtr = headerLength;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numSurfs;\n  pvrDatas.numMipmaps = numMipmaps + 1; // guess cubemap type seems tricky in v2\n  // it juste a pvr containing 6 surface (no explicit cubemap type)\n\n  pvrDatas.isCubemap = numSurfs === 6;\n  return PVRLoader._extract(pvrDatas);\n};\n\nPVRLoader._extract = function (pvrDatas) {\n  var pvr = {\n    mipmaps: [],\n    width: pvrDatas.width,\n    height: pvrDatas.height,\n    format: pvrDatas.format,\n    mipmapCount: pvrDatas.numMipmaps,\n    isCubemap: pvrDatas.isCubemap\n  };\n  var buffer = pvrDatas.buffer;\n  var dataOffset = pvrDatas.dataPtr,\n      bpp = pvrDatas.bpp,\n      numSurfs = pvrDatas.numSurfaces,\n      dataSize = 0,\n      blockSize = 0,\n      blockWidth = 0,\n      blockHeight = 0,\n      widthBlocks = 0,\n      heightBlocks = 0;\n\n  if (bpp === 2) {\n    blockWidth = 8;\n    blockHeight = 4;\n  } else {\n    blockWidth = 4;\n    blockHeight = 4;\n  }\n\n  blockSize = blockWidth * blockHeight * bpp / 8;\n  pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n  var mipLevel = 0;\n\n  while (mipLevel < pvrDatas.numMipmaps) {\n    var sWidth = pvrDatas.width >> mipLevel,\n        sHeight = pvrDatas.height >> mipLevel;\n    widthBlocks = sWidth / blockWidth;\n    heightBlocks = sHeight / blockHeight; // Clamp to minimum number of blocks\n\n    if (widthBlocks < 2) widthBlocks = 2;\n    if (heightBlocks < 2) heightBlocks = 2;\n    dataSize = widthBlocks * heightBlocks * blockSize;\n\n    for (let surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n      var byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n      var mipmap = {\n        data: byteArray,\n        width: sWidth,\n        height: sHeight\n      };\n      pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n      dataOffset += dataSize;\n    }\n\n    mipLevel++;\n  }\n\n  return pvr;\n};\n\nexport { PVRLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}