{"ast":null,"code":"import _regeneratorRuntime from \"/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { strToU8, zipSync } from 'fflate';\n\nvar USDZExporter = /*#__PURE__*/function () {\n  function USDZExporter() {\n    _classCallCheck(this, USDZExporter);\n  }\n\n  _createClass(USDZExporter, [{\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(scene) {\n        var output, materials, textures, files, uuid, texture, offset, filename, file, headerSize, offsetMod64, padLength, padding;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                output = buildHeader();\n                materials = {};\n                textures = {};\n                scene.traverse(function (object) {\n                  if (object.isMesh) {\n                    var geometry = object.geometry;\n                    var material = object.material;\n                    materials[material.uuid] = material;\n                    if (material.map !== null) textures[material.map.uuid] = material.map;\n                    if (material.normalMap !== null) textures[material.normalMap.uuid] = material.normalMap;\n                    if (material.aoMap !== null) textures[material.aoMap.uuid] = material.aoMap;\n                    if (material.roughnessMap !== null) textures[material.roughnessMap.uuid] = material.roughnessMap;\n                    if (material.metalnessMap !== null) textures[material.metalnessMap.uuid] = material.metalnessMap;\n                    if (material.emissiveMap !== null) textures[material.emissiveMap.uuid] = material.emissiveMap;\n                    output += buildXform(object, buildMesh(geometry, material));\n                  }\n                });\n                output += buildMaterials(materials);\n                output += buildTextures(textures);\n                files = {\n                  'model.usda': strToU8(output)\n                };\n                _context.t0 = _regeneratorRuntime().keys(textures);\n\n              case 8:\n                if ((_context.t1 = _context.t0()).done) {\n                  _context.next = 16;\n                  break;\n                }\n\n                uuid = _context.t1.value;\n                texture = textures[uuid];\n                _context.next = 13;\n                return imgToU8(texture.image);\n\n              case 13:\n                files[\"textures/Texture_\".concat(texture.id, \".jpg\")] = _context.sent;\n                _context.next = 8;\n                break;\n\n              case 16:\n                // 64 byte alignment\n                // https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n                offset = 0;\n\n                for (filename in files) {\n                  file = files[filename];\n                  headerSize = 34 + filename.length;\n                  offset += headerSize;\n                  offsetMod64 = offset & 63;\n\n                  if (offsetMod64 !== 4) {\n                    padLength = 64 - offsetMod64;\n                    padding = new Uint8Array(padLength);\n                    files[filename] = [file, {\n                      extra: {\n                        12345: padding\n                      }\n                    }];\n                  }\n\n                  offset = file.length;\n                }\n\n                return _context.abrupt(\"return\", zipSync(files, {\n                  level: 0\n                }));\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function parse(_x) {\n        return _parse.apply(this, arguments);\n      }\n\n      return parse;\n    }()\n  }]);\n\n  return USDZExporter;\n}();\n\nfunction imgToU8(_x2) {\n  return _imgToU.apply(this, arguments);\n} //\n\n\nfunction _imgToU() {\n  _imgToU = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(image) {\n    var scale, canvas, context, blob;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap)) {\n              _context2.next = 15;\n              break;\n            }\n\n            scale = 1024 / Math.max(image.width, image.height);\n            canvas = document.createElement('canvas');\n            canvas.width = image.width * Math.min(1, scale);\n            canvas.height = image.height * Math.min(1, scale);\n            context = canvas.getContext('2d');\n            context.drawImage(image, 0, 0, canvas.width, canvas.height);\n            _context2.next = 9;\n            return new Promise(function (resolve) {\n              return canvas.toBlob(resolve, 'image/jpeg', 1);\n            });\n\n          case 9:\n            blob = _context2.sent;\n            _context2.t0 = Uint8Array;\n            _context2.next = 13;\n            return blob.arrayBuffer();\n\n          case 13:\n            _context2.t1 = _context2.sent;\n            return _context2.abrupt(\"return\", new _context2.t0(_context2.t1));\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _imgToU.apply(this, arguments);\n}\n\nvar PRECISION = 7;\n\nfunction buildHeader() {\n  return \"#usda 1.0\\n(\\n    customLayerData = {\\n        string creator = \\\"Three.js USDZExporter\\\"\\n    }\\n    metersPerUnit = 1\\n    upAxis = \\\"Y\\\"\\n)\\n\\n\";\n} // Xform\n\n\nfunction buildXform(object, define) {\n  var name = \"Object_\".concat(object.id);\n  var transform = buildMatrix(object.matrixWorld);\n  return \"def Xform \\\"\".concat(name, \"\\\"\\n{\\n    matrix4d xformOp:transform = \").concat(transform, \"\\n    uniform token[] xformOpOrder = [\\\"xformOp:transform\\\"]\\n\\n    \").concat(define, \"\\n}\\n\\n\");\n}\n\nfunction buildMatrix(matrix) {\n  var array = matrix.elements;\n  return \"( \".concat(buildMatrixRow(array, 0), \", \").concat(buildMatrixRow(array, 4), \", \").concat(buildMatrixRow(array, 8), \", \").concat(buildMatrixRow(array, 12), \" )\");\n}\n\nfunction buildMatrixRow(array, offset) {\n  return \"(\".concat(array[offset + 0], \", \").concat(array[offset + 1], \", \").concat(array[offset + 2], \", \").concat(array[offset + 3], \")\");\n} // Mesh\n\n\nfunction buildMesh(geometry, material) {\n  var name = \"Geometry_\".concat(geometry.id);\n  var attributes = geometry.attributes;\n  var count = attributes.position.count;\n\n  if ('uv2' in attributes) {\n    console.warn('THREE.USDZExporter: uv2 not supported yet.');\n  }\n\n  return \"def Mesh \\\"\".concat(name, \"\\\"\\n    {\\n        int[] faceVertexCounts = [\").concat(buildMeshVertexCount(geometry), \"]\\n        int[] faceVertexIndices = [\").concat(buildMeshVertexIndices(geometry), \"]\\n        rel material:binding = </Materials/Material_\").concat(material.id, \">\\n        normal3f[] normals = [\").concat(buildVector3Array(attributes.normal, count), \"] (\\n            interpolation = \\\"vertex\\\"\\n        )\\n        point3f[] points = [\").concat(buildVector3Array(attributes.position, count), \"]\\n        float2[] primvars:st = [\").concat(buildVector2Array(attributes.uv, count), \"] (\\n            interpolation = \\\"vertex\\\"\\n        )\\n        uniform token subdivisionScheme = \\\"none\\\"\\n    }\\n\");\n}\n\nfunction buildMeshVertexCount(geometry) {\n  var count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n  return Array(count / 3).fill(3).join(', ');\n}\n\nfunction buildMeshVertexIndices(geometry) {\n  if (geometry.index !== null) {\n    return geometry.index.array.join(', ');\n  }\n\n  var array = [];\n  var length = geometry.attributes.position.count;\n\n  for (var i = 0; i < length; i++) {\n    array.push(i);\n  }\n\n  return array.join(', ');\n}\n\nfunction buildVector3Array(attribute, count) {\n  if (attribute === undefined) {\n    console.warn('USDZExporter: Normals missing.');\n    return Array(count).fill('(0, 0, 0)').join(', ');\n  }\n\n  var array = [];\n  var data = attribute.array;\n\n  for (var i = 0; i < data.length; i += 3) {\n    array.push(\"(\".concat(data[i + 0].toPrecision(PRECISION), \", \").concat(data[i + 1].toPrecision(PRECISION), \", \").concat(data[i + 2].toPrecision(PRECISION), \")\"));\n  }\n\n  return array.join(', ');\n}\n\nfunction buildVector2Array(attribute, count) {\n  if (attribute === undefined) {\n    console.warn('USDZExporter: UVs missing.');\n    return Array(count).fill('(0, 0)').join(', ');\n  }\n\n  var array = [];\n  var data = attribute.array;\n\n  for (var i = 0; i < data.length; i += 2) {\n    array.push(\"(\".concat(data[i + 0].toPrecision(PRECISION), \", \").concat(1 - data[i + 1].toPrecision(PRECISION), \")\"));\n  }\n\n  return array.join(', ');\n} // Materials\n\n\nfunction buildMaterials(materials) {\n  var array = [];\n\n  for (var uuid in materials) {\n    var material = materials[uuid];\n    array.push(buildMaterial(material));\n  }\n\n  return \"def \\\"Materials\\\"\\n{\\n\".concat(array.join(''), \"\\n}\\n\\n\");\n}\n\nfunction buildMaterial(material) {\n  // https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n  var pad = '            ';\n  var parameters = [];\n\n  if (material.map !== null) {\n    parameters.push(\"\".concat(pad, \"color3f inputs:diffuseColor.connect = </Textures/Texture_\").concat(material.map.id, \".outputs:rgb>\"));\n  } else {\n    parameters.push(\"\".concat(pad, \"color3f inputs:diffuseColor = \").concat(buildColor(material.color)));\n  }\n\n  if (material.emissiveMap !== null) {\n    parameters.push(\"\".concat(pad, \"color3f inputs:emissiveColor.connect = </Textures/Texture_\").concat(material.emissiveMap.id, \".outputs:rgb>\"));\n  } else if (material.emissive.getHex() > 0) {\n    parameters.push(\"\".concat(pad, \"color3f inputs:emissiveColor = \").concat(buildColor(material.emissive)));\n  }\n\n  if (material.normalMap !== null) {\n    parameters.push(\"\".concat(pad, \"normal3f inputs:normal.connect = </Textures/Texture_\").concat(material.normalMap.id, \".outputs:rgb>\"));\n  }\n\n  if (material.aoMap !== null) {\n    parameters.push(\"\".concat(pad, \"float inputs:occlusion.connect = </Textures/Texture_\").concat(material.aoMap.id, \".outputs:r>\"));\n  }\n\n  if (material.roughnessMap !== null) {\n    parameters.push(\"\".concat(pad, \"float inputs:roughness.connect = </Textures/Texture_\").concat(material.roughnessMap.id, \".outputs:g>\"));\n  } else {\n    parameters.push(\"\".concat(pad, \"float inputs:roughness = \").concat(material.roughness));\n  }\n\n  if (material.metalnessMap !== null) {\n    parameters.push(\"\".concat(pad, \"float inputs:metallic.connect = </Textures/Texture_\").concat(material.metalnessMap.id, \".outputs:b>\"));\n  } else {\n    parameters.push(\"\".concat(pad, \"float inputs:metallic = \").concat(material.metalness));\n  }\n\n  return \"\\n    def Material \\\"Material_\".concat(material.id, \"\\\"\\n    {\\n        token outputs:surface.connect = </Materials/Material_\").concat(material.id, \"/PreviewSurface.outputs:surface>\\n\\n        def Shader \\\"PreviewSurface\\\"\\n        {\\n            uniform token info:id = \\\"UsdPreviewSurface\\\"\\n\").concat(parameters.join('\\n'), \"\\n            int inputs:useSpecularWorkflow = 0\\n            token outputs:surface\\n        }\\n    }\\n\");\n}\n\nfunction buildTextures(textures) {\n  var array = [];\n\n  for (var uuid in textures) {\n    var texture = textures[uuid];\n    array.push(buildTexture(texture));\n  }\n\n  return \"def \\\"Textures\\\"\\n{\\n\".concat(array.join(''), \"\\n}\\n\\n\");\n}\n\nfunction buildTexture(texture) {\n  return \"\\n    def Shader \\\"Texture_\".concat(texture.id, \"\\\"\\n    {\\n        uniform token info:id = \\\"UsdUVTexture\\\"\\n        asset inputs:file = @textures/Texture_\").concat(texture.id, \".jpg@\\n        token inputs:wrapS = \\\"repeat\\\"\\n        token inputs:wrapT = \\\"repeat\\\"\\n        float outputs:r\\n        float outputs:g\\n        float outputs:b\\n        float3 outputs:rgb\\n    }\\n\");\n}\n\nfunction buildColor(color) {\n  return \"(\".concat(color.r, \", \").concat(color.g, \", \").concat(color.b, \")\");\n}\n\nexport { USDZExporter };","map":{"version":3,"names":["strToU8","zipSync","USDZExporter","scene","output","buildHeader","materials","textures","traverse","object","isMesh","geometry","material","uuid","map","normalMap","aoMap","roughnessMap","metalnessMap","emissiveMap","buildXform","buildMesh","buildMaterials","buildTextures","files","texture","imgToU8","image","id","offset","filename","file","headerSize","length","offsetMod64","padLength","padding","Uint8Array","extra","level","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","scale","Math","max","width","height","canvas","document","createElement","min","context","getContext","drawImage","Promise","resolve","toBlob","blob","arrayBuffer","PRECISION","define","name","transform","buildMatrix","matrixWorld","matrix","array","elements","buildMatrixRow","attributes","count","position","console","warn","buildMeshVertexCount","buildMeshVertexIndices","buildVector3Array","normal","buildVector2Array","uv","index","Array","fill","join","i","push","attribute","undefined","data","toPrecision","buildMaterial","pad","parameters","buildColor","color","emissive","getHex","roughness","metalness","buildTexture","r","g","b"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/exporters/USDZExporter.js"],"sourcesContent":["import { strToU8, zipSync } from 'fflate';\n\nclass USDZExporter {\n  async parse(scene) {\n    let output = buildHeader();\n    const materials = {};\n    const textures = {};\n    scene.traverse(object => {\n      if (object.isMesh) {\n        const geometry = object.geometry;\n        const material = object.material;\n        materials[material.uuid] = material;\n        if (material.map !== null) textures[material.map.uuid] = material.map;\n        if (material.normalMap !== null) textures[material.normalMap.uuid] = material.normalMap;\n        if (material.aoMap !== null) textures[material.aoMap.uuid] = material.aoMap;\n        if (material.roughnessMap !== null) textures[material.roughnessMap.uuid] = material.roughnessMap;\n        if (material.metalnessMap !== null) textures[material.metalnessMap.uuid] = material.metalnessMap;\n        if (material.emissiveMap !== null) textures[material.emissiveMap.uuid] = material.emissiveMap;\n        output += buildXform(object, buildMesh(geometry, material));\n      }\n    });\n    output += buildMaterials(materials);\n    output += buildTextures(textures);\n    const files = {\n      'model.usda': strToU8(output)\n    };\n\n    for (let uuid in textures) {\n      const texture = textures[uuid];\n      files[`textures/Texture_${texture.id}.jpg`] = await imgToU8(texture.image);\n    } // 64 byte alignment\n    // https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n\n\n    let offset = 0;\n\n    for (let filename in files) {\n      const file = files[filename];\n      const headerSize = 34 + filename.length;\n      offset += headerSize;\n      const offsetMod64 = offset & 63;\n\n      if (offsetMod64 !== 4) {\n        const padLength = 64 - offsetMod64;\n        const padding = new Uint8Array(padLength);\n        files[filename] = [file, {\n          extra: {\n            12345: padding\n          }\n        }];\n      }\n\n      offset = file.length;\n    }\n\n    return zipSync(files, {\n      level: 0\n    });\n  }\n\n}\n\nasync function imgToU8(image) {\n  if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    const scale = 1024 / Math.max(image.width, image.height);\n    const canvas = document.createElement('canvas');\n    canvas.width = image.width * Math.min(1, scale);\n    canvas.height = image.height * Math.min(1, scale);\n    const context = canvas.getContext('2d');\n    context.drawImage(image, 0, 0, canvas.width, canvas.height);\n    const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/jpeg', 1));\n    return new Uint8Array(await blob.arrayBuffer());\n  }\n} //\n\n\nconst PRECISION = 7;\n\nfunction buildHeader() {\n  return `#usda 1.0\n(\n    customLayerData = {\n        string creator = \"Three.js USDZExporter\"\n    }\n    metersPerUnit = 1\n    upAxis = \"Y\"\n)\n\n`;\n} // Xform\n\n\nfunction buildXform(object, define) {\n  const name = `Object_${object.id}`;\n  const transform = buildMatrix(object.matrixWorld);\n  return `def Xform \"${name}\"\n{\n    matrix4d xformOp:transform = ${transform}\n    uniform token[] xformOpOrder = [\"xformOp:transform\"]\n\n    ${define}\n}\n\n`;\n}\n\nfunction buildMatrix(matrix) {\n  const array = matrix.elements;\n  return `( ${buildMatrixRow(array, 0)}, ${buildMatrixRow(array, 4)}, ${buildMatrixRow(array, 8)}, ${buildMatrixRow(array, 12)} )`;\n}\n\nfunction buildMatrixRow(array, offset) {\n  return `(${array[offset + 0]}, ${array[offset + 1]}, ${array[offset + 2]}, ${array[offset + 3]})`;\n} // Mesh\n\n\nfunction buildMesh(geometry, material) {\n  const name = `Geometry_${geometry.id}`;\n  const attributes = geometry.attributes;\n  const count = attributes.position.count;\n\n  if ('uv2' in attributes) {\n    console.warn('THREE.USDZExporter: uv2 not supported yet.');\n  }\n\n  return `def Mesh \"${name}\"\n    {\n        int[] faceVertexCounts = [${buildMeshVertexCount(geometry)}]\n        int[] faceVertexIndices = [${buildMeshVertexIndices(geometry)}]\n        rel material:binding = </Materials/Material_${material.id}>\n        normal3f[] normals = [${buildVector3Array(attributes.normal, count)}] (\n            interpolation = \"vertex\"\n        )\n        point3f[] points = [${buildVector3Array(attributes.position, count)}]\n        float2[] primvars:st = [${buildVector2Array(attributes.uv, count)}] (\n            interpolation = \"vertex\"\n        )\n        uniform token subdivisionScheme = \"none\"\n    }\n`;\n}\n\nfunction buildMeshVertexCount(geometry) {\n  const count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n  return Array(count / 3).fill(3).join(', ');\n}\n\nfunction buildMeshVertexIndices(geometry) {\n  if (geometry.index !== null) {\n    return geometry.index.array.join(', ');\n  }\n\n  const array = [];\n  const length = geometry.attributes.position.count;\n\n  for (let i = 0; i < length; i++) {\n    array.push(i);\n  }\n\n  return array.join(', ');\n}\n\nfunction buildVector3Array(attribute, count) {\n  if (attribute === undefined) {\n    console.warn('USDZExporter: Normals missing.');\n    return Array(count).fill('(0, 0, 0)').join(', ');\n  }\n\n  const array = [];\n  const data = attribute.array;\n\n  for (let i = 0; i < data.length; i += 3) {\n    array.push(`(${data[i + 0].toPrecision(PRECISION)}, ${data[i + 1].toPrecision(PRECISION)}, ${data[i + 2].toPrecision(PRECISION)})`);\n  }\n\n  return array.join(', ');\n}\n\nfunction buildVector2Array(attribute, count) {\n  if (attribute === undefined) {\n    console.warn('USDZExporter: UVs missing.');\n    return Array(count).fill('(0, 0)').join(', ');\n  }\n\n  const array = [];\n  const data = attribute.array;\n\n  for (let i = 0; i < data.length; i += 2) {\n    array.push(`(${data[i + 0].toPrecision(PRECISION)}, ${1 - data[i + 1].toPrecision(PRECISION)})`);\n  }\n\n  return array.join(', ');\n} // Materials\n\n\nfunction buildMaterials(materials) {\n  const array = [];\n\n  for (let uuid in materials) {\n    const material = materials[uuid];\n    array.push(buildMaterial(material));\n  }\n\n  return `def \"Materials\"\n{\n${array.join('')}\n}\n\n`;\n}\n\nfunction buildMaterial(material) {\n  // https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n  const pad = '            ';\n  const parameters = [];\n\n  if (material.map !== null) {\n    parameters.push(`${pad}color3f inputs:diffuseColor.connect = </Textures/Texture_${material.map.id}.outputs:rgb>`);\n  } else {\n    parameters.push(`${pad}color3f inputs:diffuseColor = ${buildColor(material.color)}`);\n  }\n\n  if (material.emissiveMap !== null) {\n    parameters.push(`${pad}color3f inputs:emissiveColor.connect = </Textures/Texture_${material.emissiveMap.id}.outputs:rgb>`);\n  } else if (material.emissive.getHex() > 0) {\n    parameters.push(`${pad}color3f inputs:emissiveColor = ${buildColor(material.emissive)}`);\n  }\n\n  if (material.normalMap !== null) {\n    parameters.push(`${pad}normal3f inputs:normal.connect = </Textures/Texture_${material.normalMap.id}.outputs:rgb>`);\n  }\n\n  if (material.aoMap !== null) {\n    parameters.push(`${pad}float inputs:occlusion.connect = </Textures/Texture_${material.aoMap.id}.outputs:r>`);\n  }\n\n  if (material.roughnessMap !== null) {\n    parameters.push(`${pad}float inputs:roughness.connect = </Textures/Texture_${material.roughnessMap.id}.outputs:g>`);\n  } else {\n    parameters.push(`${pad}float inputs:roughness = ${material.roughness}`);\n  }\n\n  if (material.metalnessMap !== null) {\n    parameters.push(`${pad}float inputs:metallic.connect = </Textures/Texture_${material.metalnessMap.id}.outputs:b>`);\n  } else {\n    parameters.push(`${pad}float inputs:metallic = ${material.metalness}`);\n  }\n\n  return `\n    def Material \"Material_${material.id}\"\n    {\n        token outputs:surface.connect = </Materials/Material_${material.id}/PreviewSurface.outputs:surface>\n\n        def Shader \"PreviewSurface\"\n        {\n            uniform token info:id = \"UsdPreviewSurface\"\n${parameters.join('\\n')}\n            int inputs:useSpecularWorkflow = 0\n            token outputs:surface\n        }\n    }\n`;\n}\n\nfunction buildTextures(textures) {\n  const array = [];\n\n  for (let uuid in textures) {\n    const texture = textures[uuid];\n    array.push(buildTexture(texture));\n  }\n\n  return `def \"Textures\"\n{\n${array.join('')}\n}\n\n`;\n}\n\nfunction buildTexture(texture) {\n  return `\n    def Shader \"Texture_${texture.id}\"\n    {\n        uniform token info:id = \"UsdUVTexture\"\n        asset inputs:file = @textures/Texture_${texture.id}.jpg@\n        token inputs:wrapS = \"repeat\"\n        token inputs:wrapT = \"repeat\"\n        float outputs:r\n        float outputs:g\n        float outputs:b\n        float3 outputs:rgb\n    }\n`;\n}\n\nfunction buildColor(color) {\n  return `(${color.r}, ${color.g}, ${color.b})`;\n}\n\nexport { USDZExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}