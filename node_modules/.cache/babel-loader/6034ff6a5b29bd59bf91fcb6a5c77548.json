{"ast":null,"code":"import { Mesh, Color, PerspectiveCamera, Plane, Matrix4, WebGLRenderTarget, MathUtils, ShaderMaterial, UniformsUtils, Vector3, Quaternion, Vector4, LinearFilter, RGBFormat } from 'three';\n\nvar Refractor = function Refractor(geometry, options) {\n  Mesh.call(this, geometry);\n  this.type = 'Refractor';\n  var scope = this;\n  options = options || {};\n  var color = options.color !== undefined ? new Color(options.color) : new Color(0x7f7f7f);\n  var textureWidth = options.textureWidth || 512;\n  var textureHeight = options.textureHeight || 512;\n  var clipBias = options.clipBias || 0;\n  var shader = options.shader || Refractor.RefractorShader; //\n\n  var virtualCamera = new PerspectiveCamera();\n  virtualCamera.matrixAutoUpdate = false;\n  virtualCamera.userData.refractor = true; //\n\n  var refractorPlane = new Plane();\n  var textureMatrix = new Matrix4(); // render target\n\n  var parameters = {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBFormat\n  };\n  var renderTarget = new WebGLRenderTarget(textureWidth, textureHeight, parameters);\n\n  if (!MathUtils.isPowerOfTwo(textureWidth) || !MathUtils.isPowerOfTwo(textureHeight)) {\n    renderTarget.texture.generateMipmaps = false;\n  } // material\n\n\n  this.material = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(shader.uniforms),\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader,\n    transparent: true // ensures, refractors are drawn from farthest to closest\n\n  });\n  this.material.uniforms['color'].value = color;\n  this.material.uniforms['tDiffuse'].value = renderTarget.texture;\n  this.material.uniforms['textureMatrix'].value = textureMatrix; // functions\n\n  var visible = function () {\n    var refractorWorldPosition = new Vector3();\n    var cameraWorldPosition = new Vector3();\n    var rotationMatrix = new Matrix4();\n    var view = new Vector3();\n    var normal = new Vector3();\n    return function visible(camera) {\n      refractorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      view.subVectors(refractorWorldPosition, cameraWorldPosition);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      return view.dot(normal) < 0;\n    };\n  }();\n\n  var updateRefractorPlane = function () {\n    var normal = new Vector3();\n    var position = new Vector3();\n    var quaternion = new Quaternion();\n    var scale = new Vector3();\n    return function updateRefractorPlane() {\n      scope.matrixWorld.decompose(position, quaternion, scale);\n      normal.set(0, 0, 1).applyQuaternion(quaternion).normalize(); // flip the normal because we want to cull everything above the plane\n\n      normal.negate();\n      refractorPlane.setFromNormalAndCoplanarPoint(normal, position);\n    };\n  }();\n\n  var updateVirtualCamera = function () {\n    var clipPlane = new Plane();\n    var clipVector = new Vector4();\n    var q = new Vector4();\n    return function updateVirtualCamera(camera) {\n      virtualCamera.matrixWorld.copy(camera.matrixWorld);\n      virtualCamera.matrixWorldInverse.copy(virtualCamera.matrixWorld).invert();\n      virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n      virtualCamera.far = camera.far; // used in WebGLBackground\n      // The following code creates an oblique view frustum for clipping.\n      // see: Lengyel, Eric. “Oblique View Frustum Depth Projection and Clipping”.\n      // Journal of Game Development, Vol. 1, No. 2 (2005), Charles River Media, pp. 5–16\n\n      clipPlane.copy(refractorPlane);\n      clipPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n      clipVector.set(clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.constant); // calculate the clip-space corner point opposite the clipping plane and\n      // transform it into camera space by multiplying it by the inverse of the projection matrix\n\n      var projectionMatrix = virtualCamera.projectionMatrix;\n      q.x = (Math.sign(clipVector.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n      q.y = (Math.sign(clipVector.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n      q.z = -1.0;\n      q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // calculate the scaled plane vector\n\n      clipVector.multiplyScalar(2.0 / clipVector.dot(q)); // replacing the third row of the projection matrix\n\n      projectionMatrix.elements[2] = clipVector.x;\n      projectionMatrix.elements[6] = clipVector.y;\n      projectionMatrix.elements[10] = clipVector.z + 1.0 - clipBias;\n      projectionMatrix.elements[14] = clipVector.w;\n    };\n  }(); // This will update the texture matrix that is used for projective texture mapping in the shader.\n  // see: http://developer.download.nvidia.com/assets/gamedev/docs/projective_texture_mapping.pdf\n\n\n  function updateTextureMatrix(camera) {\n    // this matrix does range mapping to [ 0, 1 ]\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0); // we use \"Object Linear Texgen\", so we need to multiply the texture matrix T\n    // (matrix above) with the projection and view matrix of the virtual camera\n    // and the model matrix of the refractor\n\n    textureMatrix.multiply(camera.projectionMatrix);\n    textureMatrix.multiply(camera.matrixWorldInverse);\n    textureMatrix.multiply(scope.matrixWorld);\n  } //\n\n\n  function render(renderer, scene, camera) {\n    scope.visible = false;\n    var currentRenderTarget = renderer.getRenderTarget();\n    var currentXrEnabled = renderer.xr.enabled;\n    var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n    renderer.xr.enabled = false; // avoid camera modification\n\n    renderer.shadowMap.autoUpdate = false; // avoid re-computing shadows\n\n    renderer.setRenderTarget(renderTarget);\n    if (renderer.autoClear === false) renderer.clear();\n    renderer.render(scene, virtualCamera);\n    renderer.xr.enabled = currentXrEnabled;\n    renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    renderer.setRenderTarget(currentRenderTarget); // restore viewport\n\n    var viewport = camera.viewport;\n\n    if (viewport !== undefined) {\n      renderer.state.viewport(viewport);\n    }\n\n    scope.visible = true;\n  } //\n\n\n  this.onBeforeRender = function (renderer, scene, camera) {\n    // Render\n    renderTarget.texture.encoding = renderer.outputEncoding; // ensure refractors are rendered only once per frame\n\n    if (camera.userData.refractor === true) return; // avoid rendering when the refractor is viewed from behind\n\n    if (!visible(camera) === true) return; // update\n\n    updateRefractorPlane();\n    updateTextureMatrix(camera);\n    updateVirtualCamera(camera);\n    render(renderer, scene, camera);\n  };\n\n  this.getRenderTarget = function () {\n    return renderTarget;\n  };\n};\n\nRefractor.prototype = Object.create(Mesh.prototype);\nRefractor.prototype.constructor = Refractor;\nRefractor.RefractorShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader: ['uniform mat4 textureMatrix;', 'varying vec4 vUv;', 'void main() {', '\tvUv = textureMatrix * vec4( position, 1.0 );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 color;', 'uniform sampler2D tDiffuse;', 'varying vec4 vUv;', 'float blendOverlay( float base, float blend ) {', '\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );', '}', 'vec3 blendOverlay( vec3 base, vec3 blend ) {', '\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );', '}', 'void main() {', '\tvec4 base = texture2DProj( tDiffuse, vUv );', '\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );', '}'].join('\\n')\n};\nexport { Refractor };","map":{"version":3,"names":["Mesh","Color","PerspectiveCamera","Plane","Matrix4","WebGLRenderTarget","MathUtils","ShaderMaterial","UniformsUtils","Vector3","Quaternion","Vector4","LinearFilter","RGBFormat","Refractor","geometry","options","call","type","scope","color","undefined","textureWidth","textureHeight","clipBias","shader","RefractorShader","virtualCamera","matrixAutoUpdate","userData","refractor","refractorPlane","textureMatrix","parameters","minFilter","magFilter","format","renderTarget","isPowerOfTwo","texture","generateMipmaps","material","uniforms","clone","vertexShader","fragmentShader","transparent","value","visible","refractorWorldPosition","cameraWorldPosition","rotationMatrix","view","normal","camera","setFromMatrixPosition","matrixWorld","subVectors","extractRotation","set","applyMatrix4","dot","updateRefractorPlane","position","quaternion","scale","decompose","applyQuaternion","normalize","negate","setFromNormalAndCoplanarPoint","updateVirtualCamera","clipPlane","clipVector","q","copy","matrixWorldInverse","invert","projectionMatrix","far","x","y","z","constant","Math","sign","elements","w","multiplyScalar","updateTextureMatrix","multiply","render","renderer","scene","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","setRenderTarget","autoClear","clear","viewport","state","onBeforeRender","encoding","outputEncoding","prototype","Object","create","constructor","tDiffuse","join"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/objects/Refractor.js"],"sourcesContent":["import { Mesh, Color, PerspectiveCamera, Plane, Matrix4, WebGLRenderTarget, MathUtils, ShaderMaterial, UniformsUtils, Vector3, Quaternion, Vector4, LinearFilter, RGBFormat } from 'three';\n\nvar Refractor = function (geometry, options) {\n  Mesh.call(this, geometry);\n  this.type = 'Refractor';\n  var scope = this;\n  options = options || {};\n  var color = options.color !== undefined ? new Color(options.color) : new Color(0x7f7f7f);\n  var textureWidth = options.textureWidth || 512;\n  var textureHeight = options.textureHeight || 512;\n  var clipBias = options.clipBias || 0;\n  var shader = options.shader || Refractor.RefractorShader; //\n\n  var virtualCamera = new PerspectiveCamera();\n  virtualCamera.matrixAutoUpdate = false;\n  virtualCamera.userData.refractor = true; //\n\n  var refractorPlane = new Plane();\n  var textureMatrix = new Matrix4(); // render target\n\n  var parameters = {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBFormat\n  };\n  var renderTarget = new WebGLRenderTarget(textureWidth, textureHeight, parameters);\n\n  if (!MathUtils.isPowerOfTwo(textureWidth) || !MathUtils.isPowerOfTwo(textureHeight)) {\n    renderTarget.texture.generateMipmaps = false;\n  } // material\n\n\n  this.material = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(shader.uniforms),\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader,\n    transparent: true // ensures, refractors are drawn from farthest to closest\n\n  });\n  this.material.uniforms['color'].value = color;\n  this.material.uniforms['tDiffuse'].value = renderTarget.texture;\n  this.material.uniforms['textureMatrix'].value = textureMatrix; // functions\n\n  var visible = function () {\n    var refractorWorldPosition = new Vector3();\n    var cameraWorldPosition = new Vector3();\n    var rotationMatrix = new Matrix4();\n    var view = new Vector3();\n    var normal = new Vector3();\n    return function visible(camera) {\n      refractorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      view.subVectors(refractorWorldPosition, cameraWorldPosition);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      return view.dot(normal) < 0;\n    };\n  }();\n\n  var updateRefractorPlane = function () {\n    var normal = new Vector3();\n    var position = new Vector3();\n    var quaternion = new Quaternion();\n    var scale = new Vector3();\n    return function updateRefractorPlane() {\n      scope.matrixWorld.decompose(position, quaternion, scale);\n      normal.set(0, 0, 1).applyQuaternion(quaternion).normalize(); // flip the normal because we want to cull everything above the plane\n\n      normal.negate();\n      refractorPlane.setFromNormalAndCoplanarPoint(normal, position);\n    };\n  }();\n\n  var updateVirtualCamera = function () {\n    var clipPlane = new Plane();\n    var clipVector = new Vector4();\n    var q = new Vector4();\n    return function updateVirtualCamera(camera) {\n      virtualCamera.matrixWorld.copy(camera.matrixWorld);\n      virtualCamera.matrixWorldInverse.copy(virtualCamera.matrixWorld).invert();\n      virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n      virtualCamera.far = camera.far; // used in WebGLBackground\n      // The following code creates an oblique view frustum for clipping.\n      // see: Lengyel, Eric. “Oblique View Frustum Depth Projection and Clipping”.\n      // Journal of Game Development, Vol. 1, No. 2 (2005), Charles River Media, pp. 5–16\n\n      clipPlane.copy(refractorPlane);\n      clipPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n      clipVector.set(clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.constant); // calculate the clip-space corner point opposite the clipping plane and\n      // transform it into camera space by multiplying it by the inverse of the projection matrix\n\n      var projectionMatrix = virtualCamera.projectionMatrix;\n      q.x = (Math.sign(clipVector.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n      q.y = (Math.sign(clipVector.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n      q.z = -1.0;\n      q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // calculate the scaled plane vector\n\n      clipVector.multiplyScalar(2.0 / clipVector.dot(q)); // replacing the third row of the projection matrix\n\n      projectionMatrix.elements[2] = clipVector.x;\n      projectionMatrix.elements[6] = clipVector.y;\n      projectionMatrix.elements[10] = clipVector.z + 1.0 - clipBias;\n      projectionMatrix.elements[14] = clipVector.w;\n    };\n  }(); // This will update the texture matrix that is used for projective texture mapping in the shader.\n  // see: http://developer.download.nvidia.com/assets/gamedev/docs/projective_texture_mapping.pdf\n\n\n  function updateTextureMatrix(camera) {\n    // this matrix does range mapping to [ 0, 1 ]\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0); // we use \"Object Linear Texgen\", so we need to multiply the texture matrix T\n    // (matrix above) with the projection and view matrix of the virtual camera\n    // and the model matrix of the refractor\n\n    textureMatrix.multiply(camera.projectionMatrix);\n    textureMatrix.multiply(camera.matrixWorldInverse);\n    textureMatrix.multiply(scope.matrixWorld);\n  } //\n\n\n  function render(renderer, scene, camera) {\n    scope.visible = false;\n    var currentRenderTarget = renderer.getRenderTarget();\n    var currentXrEnabled = renderer.xr.enabled;\n    var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n    renderer.xr.enabled = false; // avoid camera modification\n\n    renderer.shadowMap.autoUpdate = false; // avoid re-computing shadows\n\n    renderer.setRenderTarget(renderTarget);\n    if (renderer.autoClear === false) renderer.clear();\n    renderer.render(scene, virtualCamera);\n    renderer.xr.enabled = currentXrEnabled;\n    renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    renderer.setRenderTarget(currentRenderTarget); // restore viewport\n\n    var viewport = camera.viewport;\n\n    if (viewport !== undefined) {\n      renderer.state.viewport(viewport);\n    }\n\n    scope.visible = true;\n  } //\n\n\n  this.onBeforeRender = function (renderer, scene, camera) {\n    // Render\n    renderTarget.texture.encoding = renderer.outputEncoding; // ensure refractors are rendered only once per frame\n\n    if (camera.userData.refractor === true) return; // avoid rendering when the refractor is viewed from behind\n\n    if (!visible(camera) === true) return; // update\n\n    updateRefractorPlane();\n    updateTextureMatrix(camera);\n    updateVirtualCamera(camera);\n    render(renderer, scene, camera);\n  };\n\n  this.getRenderTarget = function () {\n    return renderTarget;\n  };\n};\n\nRefractor.prototype = Object.create(Mesh.prototype);\nRefractor.prototype.constructor = Refractor;\nRefractor.RefractorShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader: ['uniform mat4 textureMatrix;', 'varying vec4 vUv;', 'void main() {', '\tvUv = textureMatrix * vec4( position, 1.0 );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 color;', 'uniform sampler2D tDiffuse;', 'varying vec4 vUv;', 'float blendOverlay( float base, float blend ) {', '\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );', '}', 'vec3 blendOverlay( vec3 base, vec3 blend ) {', '\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );', '}', 'void main() {', '\tvec4 base = texture2DProj( tDiffuse, vUv );', '\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );', '}'].join('\\n')\n};\n\nexport { Refractor };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}