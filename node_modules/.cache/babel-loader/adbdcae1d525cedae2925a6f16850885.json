{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { contains, every, has, some } from \"../../../utils/utils\";\nimport { AbstractProduction, Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal } from \"./gast_public\";\nimport { GAstVisitor } from \"./gast_visitor_public\";\nexport function isSequenceProd(prod) {\n  return prod instanceof Alternative || prod instanceof Option || prod instanceof Repetition || prod instanceof RepetitionMandatory || prod instanceof RepetitionMandatoryWithSeparator || prod instanceof RepetitionWithSeparator || prod instanceof Terminal || prod instanceof Rule;\n}\nexport function isOptionalProd(prod, alreadyVisited) {\n  if (alreadyVisited === void 0) {\n    alreadyVisited = [];\n  }\n\n  var isDirectlyOptional = prod instanceof Option || prod instanceof Repetition || prod instanceof RepetitionWithSeparator;\n\n  if (isDirectlyOptional) {\n    return true;\n  } // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n  // empty optional top rule\n  // may be indirectly optional ((A?B?C?) | (D?E?F?))\n\n\n  if (prod instanceof Alternation) {\n    // for OR its enough for just one of the alternatives to be optional\n    return some(prod.definition, function (subProd) {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else if (prod instanceof NonTerminal && contains(alreadyVisited, prod)) {\n    // avoiding stack overflow due to infinite recursion\n    return false;\n  } else if (prod instanceof AbstractProduction) {\n    if (prod instanceof NonTerminal) {\n      alreadyVisited.push(prod);\n    }\n\n    return every(prod.definition, function (subProd) {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else {\n    return false;\n  }\n}\nexport function isBranchingProd(prod) {\n  return prod instanceof Alternation;\n}\nexport function getProductionDslName(prod) {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    return \"SUBRULE\";\n  } else if (prod instanceof Option) {\n    return \"OPTION\";\n  } else if (prod instanceof Alternation) {\n    return \"OR\";\n  } else if (prod instanceof RepetitionMandatory) {\n    return \"AT_LEAST_ONE\";\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return \"AT_LEAST_ONE_SEP\";\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return \"MANY_SEP\";\n  } else if (prod instanceof Repetition) {\n    return \"MANY\";\n  } else if (prod instanceof Terminal) {\n    return \"CONSUME\";\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nvar DslMethodsCollectorVisitor =\n/** @class */\nfunction (_super) {\n  __extends(DslMethodsCollectorVisitor, _super);\n\n  function DslMethodsCollectorVisitor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // A minus is never valid in an identifier name\n\n\n    _this.separator = \"-\";\n    _this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: []\n    };\n    return _this;\n  }\n\n  DslMethodsCollectorVisitor.prototype.reset = function () {\n    this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: []\n    };\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitTerminal = function (terminal) {\n    var key = terminal.terminalType.name + this.separator + \"Terminal\";\n\n    if (!has(this.dslMethods, key)) {\n      this.dslMethods[key] = [];\n    }\n\n    this.dslMethods[key].push(terminal);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitNonTerminal = function (subrule) {\n    var key = subrule.nonTerminalName + this.separator + \"Terminal\";\n\n    if (!has(this.dslMethods, key)) {\n      this.dslMethods[key] = [];\n    }\n\n    this.dslMethods[key].push(subrule);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitOption = function (option) {\n    this.dslMethods.option.push(option);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitRepetitionWithSeparator = function (manySep) {\n    this.dslMethods.repetitionWithSeparator.push(manySep);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitRepetitionMandatory = function (atLeastOne) {\n    this.dslMethods.repetitionMandatory.push(atLeastOne);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n    this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitRepetition = function (many) {\n    this.dslMethods.repetition.push(many);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitAlternation = function (or) {\n    this.dslMethods.alternation.push(or);\n  };\n\n  return DslMethodsCollectorVisitor;\n}(GAstVisitor);\n\nexport { DslMethodsCollectorVisitor };\nvar collectorVisitor = new DslMethodsCollectorVisitor();\nexport function collectMethods(rule) {\n  collectorVisitor.reset();\n  rule.accept(collectorVisitor);\n  var dslMethods = collectorVisitor.dslMethods; // avoid uncleaned references\n\n  collectorVisitor.reset();\n  return dslMethods;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,KAAnB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,sBAA3C;AACA,SACEC,kBADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,MALF,EAMEC,UANF,EAOEC,mBAPF,EAQEC,gCARF,EASEC,uBATF,EAUEC,IAVF,EAWEC,QAXF,QAYO,eAZP;AAaA,SAASC,WAAT,QAA4B,uBAA5B;AAGA,OAAM,SAAUC,cAAV,CAAyBC,IAAzB,EAA0C;EAC9C,OACEA,IAAI,YAAYX,WAAhB,IACAW,IAAI,YAAYT,MADhB,IAEAS,IAAI,YAAYR,UAFhB,IAGAQ,IAAI,YAAYP,mBAHhB,IAIAO,IAAI,YAAYN,gCAJhB,IAKAM,IAAI,YAAYL,uBALhB,IAMAK,IAAI,YAAYH,QANhB,IAOAG,IAAI,YAAYJ,IARlB;AAUD;AAED,OAAM,SAAUK,cAAV,CACJD,IADI,EAEJE,cAFI,EAE8B;EAAlC;IAAAA;EAAkC;;EAElC,IAAIC,kBAAkB,GACpBH,IAAI,YAAYT,MAAhB,IACAS,IAAI,YAAYR,UADhB,IAEAQ,IAAI,YAAYL,uBAHlB;;EAIA,IAAIQ,kBAAJ,EAAwB;IACtB,OAAO,IAAP;EACD,CARiC,CAUlC;EACA;EACA;;;EACA,IAAIH,IAAI,YAAYZ,WAApB,EAAiC;IAC/B;IACA,OAAOF,IAAI,CAAec,IAAK,CAACI,UAArB,EAAiC,UAACC,OAAD,EAAqB;MAC/D,OAAOJ,cAAc,CAACI,OAAD,EAAUH,cAAV,CAArB;IACD,CAFU,CAAX;EAGD,CALD,MAKO,IAAIF,IAAI,YAAYV,WAAhB,IAA+BP,QAAQ,CAACmB,cAAD,EAAiBF,IAAjB,CAA3C,EAAmE;IACxE;IACA,OAAO,KAAP;EACD,CAHM,MAGA,IAAIA,IAAI,YAAYb,kBAApB,EAAwC;IAC7C,IAAIa,IAAI,YAAYV,WAApB,EAAiC;MAC/BY,cAAc,CAACI,IAAf,CAAoBN,IAApB;IACD;;IACD,OAAOhB,KAAK,CACWgB,IAAK,CAACI,UADjB,EAEV,UAACC,OAAD,EAAqB;MACnB,OAAOJ,cAAc,CAACI,OAAD,EAAUH,cAAV,CAArB;IACD,CAJS,CAAZ;EAMD,CAVM,MAUA;IACL,OAAO,KAAP;EACD;AACF;AAED,OAAM,SAAUK,eAAV,CAA0BP,IAA1B,EAA2C;EAC/C,OAAOA,IAAI,YAAYZ,WAAvB;AACD;AAED,OAAM,SAAUoB,oBAAV,CAA+BR,IAA/B,EAA8D;EAClE;EACA,IAAIA,IAAI,YAAYV,WAApB,EAAiC;IAC/B,OAAO,SAAP;EACD,CAFD,MAEO,IAAIU,IAAI,YAAYT,MAApB,EAA4B;IACjC,OAAO,QAAP;EACD,CAFM,MAEA,IAAIS,IAAI,YAAYZ,WAApB,EAAiC;IACtC,OAAO,IAAP;EACD,CAFM,MAEA,IAAIY,IAAI,YAAYP,mBAApB,EAAyC;IAC9C,OAAO,cAAP;EACD,CAFM,MAEA,IAAIO,IAAI,YAAYN,gCAApB,EAAsD;IAC3D,OAAO,kBAAP;EACD,CAFM,MAEA,IAAIM,IAAI,YAAYL,uBAApB,EAA6C;IAClD,OAAO,UAAP;EACD,CAFM,MAEA,IAAIK,IAAI,YAAYR,UAApB,EAAgC;IACrC,OAAO,MAAP;EACD,CAFM,MAEA,IAAIQ,IAAI,YAAYH,QAApB,EAA8B;IACnC,OAAO,SAAP;EACD,CAFM,MAEA;IACL,MAAMY,KAAK,CAAC,sBAAD,CAAX;EACD;AACF;;AAED;AAAA;AAAA;EAAgDC;;EAAhD;IAAA,sEACE;;;IACOC,kBAAY,GAAZ;IACAA,mBAAa;MAClBC,MAAM,EAAE,EADU;MAElBC,WAAW,EAAE,EAFK;MAGlBC,UAAU,EAAE,EAHM;MAIlBC,uBAAuB,EAAE,EAJP;MAKlBC,mBAAmB,EAAE,EALH;MAMlBC,gCAAgC,EAAE;IANhB,CAAb;;EA6DR;;EApDCC;IACE,KAAKC,UAAL,GAAkB;MAChBP,MAAM,EAAE,EADQ;MAEhBC,WAAW,EAAE,EAFG;MAGhBC,UAAU,EAAE,EAHI;MAIhBC,uBAAuB,EAAE,EAJT;MAKhBC,mBAAmB,EAAE,EALL;MAMhBC,gCAAgC,EAAE;IANlB,CAAlB;EAQD,CATD;;EAWOC,qDAAP,UAAqBE,QAArB,EAAuC;IACrC,IAAMC,GAAG,GAAGD,QAAQ,CAACE,YAAT,CAAsBC,IAAtB,GAA6B,KAAKC,SAAlC,GAA8C,UAA1D;;IACA,IAAI,CAACvC,GAAG,CAAC,KAAKkC,UAAN,EAAkBE,GAAlB,CAAR,EAAgC;MAC9B,KAAKF,UAAL,CAAgBE,GAAhB,IAAuB,EAAvB;IACD;;IACD,KAAKF,UAAL,CAAgBE,GAAhB,EAAqBf,IAArB,CAA0Bc,QAA1B;EACD,CANM;;EAQAF,wDAAP,UAAwBO,OAAxB,EAA4C;IAC1C,IAAMJ,GAAG,GAAGI,OAAO,CAACC,eAAR,GAA0B,KAAKF,SAA/B,GAA2C,UAAvD;;IACA,IAAI,CAACvC,GAAG,CAAC,KAAKkC,UAAN,EAAkBE,GAAlB,CAAR,EAAgC;MAC9B,KAAKF,UAAL,CAAgBE,GAAhB,IAAuB,EAAvB;IACD;;IACD,KAAKF,UAAL,CAAgBE,GAAhB,EAAqBf,IAArB,CAA0BmB,OAA1B;EACD,CANM;;EAQAP,mDAAP,UAAmBN,MAAnB,EAAiC;IAC/B,KAAKO,UAAL,CAAgBP,MAAhB,CAAuBN,IAAvB,CAA4BM,MAA5B;EACD,CAFM;;EAIAM,oEAAP,UAAoCS,OAApC,EAAoE;IAClE,KAAKR,UAAL,CAAgBJ,uBAAhB,CAAwCT,IAAxC,CAA6CqB,OAA7C;EACD,CAFM;;EAIAT,gEAAP,UAAgCU,UAAhC,EAA+D;IAC7D,KAAKT,UAAL,CAAgBH,mBAAhB,CAAoCV,IAApC,CAAyCsB,UAAzC;EACD,CAFM;;EAIAV,6EAAP,UACEW,aADF,EACiD;IAE/C,KAAKV,UAAL,CAAgBF,gCAAhB,CAAiDX,IAAjD,CAAsDuB,aAAtD;EACD,CAJM;;EAMAX,uDAAP,UAAuBY,IAAvB,EAAuC;IACrC,KAAKX,UAAL,CAAgBL,UAAhB,CAA2BR,IAA3B,CAAgCwB,IAAhC;EACD,CAFM;;EAIAZ,wDAAP,UAAwBa,EAAxB,EAAuC;IACrC,KAAKZ,UAAL,CAAgBN,WAAhB,CAA4BP,IAA5B,CAAiCyB,EAAjC;EACD,CAFM;;EAGT;AAAC,CAhED,CAAgDjC,WAAhD;;;AAkEA,IAAMkC,gBAAgB,GAAG,IAAId,0BAAJ,EAAzB;AACA,OAAM,SAAUe,cAAV,CACJC,IADI,EACM;EASVF,gBAAgB,CAACG,KAAjB;EACAD,IAAI,CAACE,MAAL,CAAYJ,gBAAZ;EACA,IAAMb,UAAU,GAAGa,gBAAgB,CAACb,UAApC,CAXU,CAYV;;EACAa,gBAAgB,CAACG,KAAjB;EACA,OAAYhB,UAAZ;AACD","names":["contains","every","has","some","AbstractProduction","Alternation","Alternative","NonTerminal","Option","Repetition","RepetitionMandatory","RepetitionMandatoryWithSeparator","RepetitionWithSeparator","Rule","Terminal","GAstVisitor","isSequenceProd","prod","isOptionalProd","alreadyVisited","isDirectlyOptional","definition","subProd","push","isBranchingProd","getProductionDslName","Error","__extends","_this","option","alternation","repetition","repetitionWithSeparator","repetitionMandatory","repetitionMandatoryWithSeparator","DslMethodsCollectorVisitor","dslMethods","terminal","key","terminalType","name","separator","subrule","nonTerminalName","manySep","atLeastOne","atLeastOneSep","many","or","collectorVisitor","collectMethods","rule","reset","accept"],"sourceRoot":"","sources":["../../../../../src/parse/grammar/gast/gast.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}