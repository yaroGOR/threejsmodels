{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport { BufferGeometry } from 'three';\nimport { TessellateModifier } from 'three-stdlib';\n\nfunction useTessellation() {\n  var passes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n  var maxEdgeLength = arguments.length > 1 ? arguments[1] : undefined;\n  var ref = useRef();\n  var original = useRef();\n  var modifier = useRef();\n  useEffect(function () {\n    if (!original.current) {\n      original.current = ref.current.geometry.clone();\n      modifier.current = new TessellateModifier(parseInt(maxEdgeLength), passes);\n    }\n  }, [maxEdgeLength, passes]);\n  useEffect(function () {\n    modifier.current.maxEdgeLength = maxEdgeLength;\n  }, [maxEdgeLength]);\n  useEffect(function () {\n    if (original.current && ref.current) {\n      var geometry = new BufferGeometry();\n      geometry = original.current.clone();\n      geometry = modifier.current.modify(geometry);\n      ref.current.geometry = geometry;\n    }\n  }, [maxEdgeLength, passes]);\n  return ref;\n}\n\nexport { useTessellation };","map":{"version":3,"names":["useRef","useEffect","BufferGeometry","TessellateModifier","useTessellation","passes","maxEdgeLength","ref","original","modifier","current","geometry","clone","parseInt","modify"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/@react-three/drei/core/useTessellation.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\nimport { BufferGeometry } from 'three';\nimport { TessellateModifier } from 'three-stdlib';\n\nfunction useTessellation(passes = 3, maxEdgeLength) {\n  const ref = useRef();\n  const original = useRef();\n  const modifier = useRef();\n  useEffect(() => {\n    if (!original.current) {\n      original.current = ref.current.geometry.clone();\n      modifier.current = new TessellateModifier(parseInt(maxEdgeLength), passes);\n    }\n  }, [maxEdgeLength, passes]);\n  useEffect(() => {\n    modifier.current.maxEdgeLength = maxEdgeLength;\n  }, [maxEdgeLength]);\n  useEffect(() => {\n    if (original.current && ref.current) {\n      let geometry = new BufferGeometry();\n      geometry = original.current.clone();\n      geometry = modifier.current.modify(geometry);\n      ref.current.geometry = geometry;\n    }\n  }, [maxEdgeLength, passes]);\n  return ref;\n}\n\nexport { useTessellation };\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,kBAAT,QAAmC,cAAnC;;AAEA,SAASC,eAAT,GAAoD;EAAA,IAA3BC,MAA2B,uEAAlB,CAAkB;EAAA,IAAfC,aAAe;EAClD,IAAMC,GAAG,GAAGP,MAAM,EAAlB;EACA,IAAMQ,QAAQ,GAAGR,MAAM,EAAvB;EACA,IAAMS,QAAQ,GAAGT,MAAM,EAAvB;EACAC,SAAS,CAAC,YAAM;IACd,IAAI,CAACO,QAAQ,CAACE,OAAd,EAAuB;MACrBF,QAAQ,CAACE,OAAT,GAAmBH,GAAG,CAACG,OAAJ,CAAYC,QAAZ,CAAqBC,KAArB,EAAnB;MACAH,QAAQ,CAACC,OAAT,GAAmB,IAAIP,kBAAJ,CAAuBU,QAAQ,CAACP,aAAD,CAA/B,EAAgDD,MAAhD,CAAnB;IACD;EACF,CALQ,EAKN,CAACC,aAAD,EAAgBD,MAAhB,CALM,CAAT;EAMAJ,SAAS,CAAC,YAAM;IACdQ,QAAQ,CAACC,OAAT,CAAiBJ,aAAjB,GAAiCA,aAAjC;EACD,CAFQ,EAEN,CAACA,aAAD,CAFM,CAAT;EAGAL,SAAS,CAAC,YAAM;IACd,IAAIO,QAAQ,CAACE,OAAT,IAAoBH,GAAG,CAACG,OAA5B,EAAqC;MACnC,IAAIC,QAAQ,GAAG,IAAIT,cAAJ,EAAf;MACAS,QAAQ,GAAGH,QAAQ,CAACE,OAAT,CAAiBE,KAAjB,EAAX;MACAD,QAAQ,GAAGF,QAAQ,CAACC,OAAT,CAAiBI,MAAjB,CAAwBH,QAAxB,CAAX;MACAJ,GAAG,CAACG,OAAJ,CAAYC,QAAZ,GAAuBA,QAAvB;IACD;EACF,CAPQ,EAON,CAACL,aAAD,EAAgBD,MAAhB,CAPM,CAAT;EAQA,OAAOE,GAAP;AACD;;AAED,SAASH,eAAT"},"metadata":{},"sourceType":"module"}