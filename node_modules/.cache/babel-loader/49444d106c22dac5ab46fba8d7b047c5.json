{"ast":null,"code":"import { useLoader } from '@react-three/fiber';\nimport { GLTFLoader, DRACOLoader, MeshoptDecoder } from 'three-stdlib'; // @ts-ignore\n\nfunction extensions(useDraco, useMeshopt) {\n  return function (loader) {\n    if (useDraco) {\n      var dracoLoader = new DRACOLoader();\n      dracoLoader.setDecoderPath(typeof useDraco === 'string' ? useDraco : 'https://www.gstatic.com/draco/v1/decoders/');\n      loader.setDRACOLoader(dracoLoader);\n    }\n\n    if (useMeshopt) {\n      loader.setMeshoptDecoder(MeshoptDecoder);\n    }\n  };\n}\n\nfunction useGLTF(path) {\n  var useDraco = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var useMeshOpt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var gltf = useLoader(GLTFLoader, path, extensions(useDraco, useMeshOpt));\n  return gltf;\n}\n\nuseGLTF.preload = function (path) {\n  var useDraco = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var useMeshOpt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return useLoader.preload(GLTFLoader, path, extensions(useDraco, useMeshOpt));\n};\n\nexport { useGLTF };","map":{"version":3,"names":["useLoader","GLTFLoader","DRACOLoader","MeshoptDecoder","extensions","useDraco","useMeshopt","loader","dracoLoader","setDecoderPath","setDRACOLoader","setMeshoptDecoder","useGLTF","path","useMeshOpt","gltf","preload"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/@react-three/drei/core/useGLTF.js"],"sourcesContent":["import { useLoader } from '@react-three/fiber';\nimport { GLTFLoader, DRACOLoader, MeshoptDecoder } from 'three-stdlib';\n\n// @ts-ignore\n\nfunction extensions(useDraco, useMeshopt) {\n  return loader => {\n    if (useDraco) {\n      const dracoLoader = new DRACOLoader();\n      dracoLoader.setDecoderPath(typeof useDraco === 'string' ? useDraco : 'https://www.gstatic.com/draco/v1/decoders/');\n      loader.setDRACOLoader(dracoLoader);\n    }\n\n    if (useMeshopt) {\n      loader.setMeshoptDecoder(MeshoptDecoder);\n    }\n  };\n}\n\nfunction useGLTF(path, useDraco = true, useMeshOpt = true) {\n  const gltf = useLoader(GLTFLoader, path, extensions(useDraco, useMeshOpt));\n  return gltf;\n}\n\nuseGLTF.preload = (path, useDraco = true, useMeshOpt = true) => useLoader.preload(GLTFLoader, path, extensions(useDraco, useMeshOpt));\n\nexport { useGLTF };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,cAAlC,QAAwD,cAAxD,C,CAEA;;AAEA,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,UAA9B,EAA0C;EACxC,OAAO,UAAAC,MAAM,EAAI;IACf,IAAIF,QAAJ,EAAc;MACZ,IAAMG,WAAW,GAAG,IAAIN,WAAJ,EAApB;MACAM,WAAW,CAACC,cAAZ,CAA2B,OAAOJ,QAAP,KAAoB,QAApB,GAA+BA,QAA/B,GAA0C,4CAArE;MACAE,MAAM,CAACG,cAAP,CAAsBF,WAAtB;IACD;;IAED,IAAIF,UAAJ,EAAgB;MACdC,MAAM,CAACI,iBAAP,CAAyBR,cAAzB;IACD;EACF,CAVD;AAWD;;AAED,SAASS,OAAT,CAAiBC,IAAjB,EAA2D;EAAA,IAApCR,QAAoC,uEAAzB,IAAyB;EAAA,IAAnBS,UAAmB,uEAAN,IAAM;EACzD,IAAMC,IAAI,GAAGf,SAAS,CAACC,UAAD,EAAaY,IAAb,EAAmBT,UAAU,CAACC,QAAD,EAAWS,UAAX,CAA7B,CAAtB;EACA,OAAOC,IAAP;AACD;;AAEDH,OAAO,CAACI,OAAR,GAAkB,UAACH,IAAD;EAAA,IAAOR,QAAP,uEAAkB,IAAlB;EAAA,IAAwBS,UAAxB,uEAAqC,IAArC;EAAA,OAA8Cd,SAAS,CAACgB,OAAV,CAAkBf,UAAlB,EAA8BY,IAA9B,EAAoCT,UAAU,CAACC,QAAD,EAAWS,UAAX,CAA9C,CAA9C;AAAA,CAAlB;;AAEA,SAASF,OAAT"},"metadata":{},"sourceType":"module"}