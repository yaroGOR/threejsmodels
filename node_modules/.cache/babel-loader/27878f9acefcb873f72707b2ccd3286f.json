{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, Vector3, Quaternion, Matrix4, MeshBasicMaterial, Scene, TextureLoader, Euler, MathUtils, AnimationClip, VectorKeyframeTrack, QuaternionKeyframeTrack, MeshLambertMaterial, MeshPhongMaterial, DoubleSide, PerspectiveCamera, OrthographicCamera, Color, AmbientLight, SpotLight, PointLight, DirectionalLight, BufferGeometry, Float32BufferAttribute, Skeleton, Bone, Group, LineBasicMaterial, SkinnedMesh, Mesh, Line, LineSegments, RepeatWrapping, ClampToEdgeWrapping } from 'three';\nimport { TGALoader } from './TGALoader.js';\n\nvar ColladaLoader = function ColladaLoader(manager) {\n  Loader.call(this, manager);\n};\n\nColladaLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: ColladaLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  options: {\n    set convertUpAxis(value) {\n      console.warn('THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.');\n    }\n\n  },\n  parse: function parse(text, path) {\n    function getElementsByTagName(xml, name) {\n      // Non recursive xml.getElementsByTagName() ...\n      var array = [];\n      var childNodes = xml.childNodes;\n\n      for (var i = 0, l = childNodes.length; i < l; i++) {\n        var child = childNodes[i];\n\n        if (child.nodeName === name) {\n          array.push(child);\n        }\n      }\n\n      return array;\n    }\n\n    function parseStrings(text) {\n      if (text.length === 0) return [];\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (var i = 0, l = parts.length; i < l; i++) {\n        array[i] = parts[i];\n      }\n\n      return array;\n    }\n\n    function parseFloats(text) {\n      if (text.length === 0) return [];\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (var i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseFloat(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseInts(text) {\n      if (text.length === 0) return [];\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (var i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseInt(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseId(text) {\n      return text.substring(1);\n    }\n\n    function generateId() {\n      return 'three_default_' + count++;\n    }\n\n    function isEmpty(object) {\n      return Object.keys(object).length === 0;\n    } // asset\n\n\n    function parseAsset(xml) {\n      return {\n        unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),\n        upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])\n      };\n    }\n\n    function parseAssetUnit(xml) {\n      if (xml !== undefined && xml.hasAttribute('meter') === true) {\n        return parseFloat(xml.getAttribute('meter'));\n      } else {\n        return 1; // default 1 meter\n      }\n    }\n\n    function parseAssetUpAxis(xml) {\n      return xml !== undefined ? xml.textContent : 'Y_UP';\n    } // library\n\n\n    function parseLibrary(xml, libraryName, nodeName, parser) {\n      var library = getElementsByTagName(xml, libraryName)[0];\n\n      if (library !== undefined) {\n        var elements = getElementsByTagName(library, nodeName);\n\n        for (var i = 0; i < elements.length; i++) {\n          parser(elements[i]);\n        }\n      }\n    }\n\n    function buildLibrary(data, builder) {\n      for (var name in data) {\n        var object = data[name];\n        object.build = builder(data[name]);\n      }\n    } // get\n\n\n    function getBuild(data, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data);\n      return data.build;\n    } // animation\n\n\n    function parseAnimation(xml) {\n      var data = {\n        sources: {},\n        samplers: {},\n        channels: {}\n      };\n      var hasChildren = false;\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        var id;\n\n        switch (child.nodeName) {\n          case 'source':\n            id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'sampler':\n            id = child.getAttribute('id');\n            data.samplers[id] = parseAnimationSampler(child);\n            break;\n\n          case 'channel':\n            id = child.getAttribute('target');\n            data.channels[id] = parseAnimationChannel(child);\n            break;\n\n          case 'animation':\n            // hierarchy of related animations\n            parseAnimation(child);\n            hasChildren = true;\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      if (hasChildren === false) {\n        // since 'id' attributes can be optional, it's necessary to generate a UUID for unqiue assignment\n        library.animations[xml.getAttribute('id') || MathUtils.generateUUID()] = data;\n      }\n    }\n\n    function parseAnimationSampler(xml) {\n      var data = {\n        inputs: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var id = parseId(child.getAttribute('source'));\n            var semantic = child.getAttribute('semantic');\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseAnimationChannel(xml) {\n      var data = {};\n      var target = xml.getAttribute('target'); // parsing SID Addressing Syntax\n\n      var parts = target.split('/');\n      var id = parts.shift();\n      var sid = parts.shift(); // check selection syntax\n\n      var arraySyntax = sid.indexOf('(') !== -1;\n      var memberSyntax = sid.indexOf('.') !== -1;\n\n      if (memberSyntax) {\n        //  member selection access\n        parts = sid.split('.');\n        sid = parts.shift();\n        data.member = parts.shift();\n      } else if (arraySyntax) {\n        // array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n        var indices = sid.split('(');\n        sid = indices.shift();\n\n        for (var i = 0; i < indices.length; i++) {\n          indices[i] = parseInt(indices[i].replace(/\\)/, ''));\n        }\n\n        data.indices = indices;\n      }\n\n      data.id = id;\n      data.sid = sid;\n      data.arraySyntax = arraySyntax;\n      data.memberSyntax = memberSyntax;\n      data.sampler = parseId(xml.getAttribute('source'));\n      return data;\n    }\n\n    function buildAnimation(data) {\n      var tracks = [];\n      var channels = data.channels;\n      var samplers = data.samplers;\n      var sources = data.sources;\n\n      for (var target in channels) {\n        if (channels.hasOwnProperty(target)) {\n          var channel = channels[target];\n          var sampler = samplers[channel.sampler];\n          var inputId = sampler.inputs.INPUT;\n          var outputId = sampler.inputs.OUTPUT;\n          var inputSource = sources[inputId];\n          var outputSource = sources[outputId];\n          var animation = buildAnimationChannel(channel, inputSource, outputSource);\n          createKeyframeTracks(animation, tracks);\n        }\n      }\n\n      return tracks;\n    }\n\n    function getAnimation(id) {\n      return getBuild(library.animations[id], buildAnimation);\n    }\n\n    function buildAnimationChannel(channel, inputSource, outputSource) {\n      var node = library.nodes[channel.id];\n      var object3D = getNode(node.id);\n      var transform = node.transforms[channel.sid];\n      var defaultMatrix = node.matrix.clone().transpose();\n      var time, stride;\n      var i, il, j, jl;\n      var data = {}; // the collada spec allows the animation of data in various ways.\n      // depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n      switch (transform) {\n        case 'matrix':\n          for (i = 0, il = inputSource.array.length; i < il; i++) {\n            time = inputSource.array[i];\n            stride = i * outputSource.stride;\n            if (data[time] === undefined) data[time] = {};\n\n            if (channel.arraySyntax === true) {\n              var value = outputSource.array[stride];\n              var index = channel.indices[0] + 4 * channel.indices[1];\n              data[time][index] = value;\n            } else {\n              for (j = 0, jl = outputSource.stride; j < jl; j++) {\n                data[time][j] = outputSource.array[stride + j];\n              }\n            }\n          }\n\n          break;\n\n        case 'translate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n\n        case 'rotate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n\n        case 'scale':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n      }\n\n      var keyframes = prepareAnimationData(data, defaultMatrix);\n      var animation = {\n        name: object3D.uuid,\n        keyframes: keyframes\n      };\n      return animation;\n    }\n\n    function prepareAnimationData(data, defaultMatrix) {\n      var keyframes = []; // transfer data into a sortable array\n\n      for (var time in data) {\n        keyframes.push({\n          time: parseFloat(time),\n          value: data[time]\n        });\n      } // ensure keyframes are sorted by time\n\n\n      keyframes.sort(ascending); // now we clean up all animation data, so we can use them for keyframe tracks\n\n      for (var i = 0; i < 16; i++) {\n        transformAnimationData(keyframes, i, defaultMatrix.elements[i]);\n      }\n\n      return keyframes; // array sort function\n\n      function ascending(a, b) {\n        return a.time - b.time;\n      }\n    }\n\n    var position = new Vector3();\n    var scale = new Vector3();\n    var quaternion = new Quaternion();\n\n    function createKeyframeTracks(animation, tracks) {\n      var keyframes = animation.keyframes;\n      var name = animation.name;\n      var times = [];\n      var positionData = [];\n      var quaternionData = [];\n      var scaleData = [];\n\n      for (var i = 0, l = keyframes.length; i < l; i++) {\n        var keyframe = keyframes[i];\n        var time = keyframe.time;\n        var value = keyframe.value;\n        matrix.fromArray(value).transpose();\n        matrix.decompose(position, quaternion, scale);\n        times.push(time);\n        positionData.push(position.x, position.y, position.z);\n        quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n        scaleData.push(scale.x, scale.y, scale.z);\n      }\n\n      if (positionData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.position', times, positionData));\n      if (quaternionData.length > 0) tracks.push(new QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));\n      if (scaleData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.scale', times, scaleData));\n      return tracks;\n    }\n\n    function transformAnimationData(keyframes, property, defaultValue) {\n      var keyframe;\n      var empty = true;\n      var i, l; // check, if values of a property are missing in our keyframes\n\n      for (i = 0, l = keyframes.length; i < l; i++) {\n        keyframe = keyframes[i];\n\n        if (keyframe.value[property] === undefined) {\n          keyframe.value[property] = null; // mark as missing\n        } else {\n          empty = false;\n        }\n      }\n\n      if (empty === true) {\n        // no values at all, so we set a default value\n        for (i = 0, l = keyframes.length; i < l; i++) {\n          keyframe = keyframes[i];\n          keyframe.value[property] = defaultValue;\n        }\n      } else {\n        // filling gaps\n        createMissingKeyframes(keyframes, property);\n      }\n    }\n\n    function createMissingKeyframes(keyframes, property) {\n      var prev, next;\n\n      for (var i = 0, l = keyframes.length; i < l; i++) {\n        var keyframe = keyframes[i];\n\n        if (keyframe.value[property] === null) {\n          prev = getPrev(keyframes, i, property);\n          next = getNext(keyframes, i, property);\n\n          if (prev === null) {\n            keyframe.value[property] = next.value[property];\n            continue;\n          }\n\n          if (next === null) {\n            keyframe.value[property] = prev.value[property];\n            continue;\n          }\n\n          interpolate(keyframe, prev, next, property);\n        }\n      }\n    }\n\n    function getPrev(keyframes, i, property) {\n      while (i >= 0) {\n        var keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i--;\n      }\n\n      return null;\n    }\n\n    function getNext(keyframes, i, property) {\n      while (i < keyframes.length) {\n        var keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i++;\n      }\n\n      return null;\n    }\n\n    function interpolate(key, prev, next, property) {\n      if (next.time - prev.time === 0) {\n        key.value[property] = prev.value[property];\n        return;\n      }\n\n      key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];\n    } // animation clips\n\n\n    function parseAnimationClip(xml) {\n      var data = {\n        name: xml.getAttribute('id') || 'default',\n        start: parseFloat(xml.getAttribute('start') || 0),\n        end: parseFloat(xml.getAttribute('end') || 0),\n        animations: []\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'instance_animation':\n            data.animations.push(parseId(child.getAttribute('url')));\n            break;\n        }\n      }\n\n      library.clips[xml.getAttribute('id')] = data;\n    }\n\n    function buildAnimationClip(data) {\n      var tracks = [];\n      var name = data.name;\n      var duration = data.end - data.start || -1;\n      var animations = data.animations;\n\n      for (var i = 0, il = animations.length; i < il; i++) {\n        var animationTracks = getAnimation(animations[i]);\n\n        for (var j = 0, jl = animationTracks.length; j < jl; j++) {\n          tracks.push(animationTracks[j]);\n        }\n      }\n\n      return new AnimationClip(name, duration, tracks);\n    }\n\n    function getAnimationClip(id) {\n      return getBuild(library.clips[id], buildAnimationClip);\n    } // controller\n\n\n    function parseController(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'skin':\n            // there is exactly one skin per controller\n            data.id = parseId(child.getAttribute('source'));\n            data.skin = parseSkin(child);\n            break;\n\n          case 'morph':\n            data.id = parseId(child.getAttribute('source'));\n            console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');\n            break;\n        }\n      }\n\n      library.controllers[xml.getAttribute('id')] = data;\n    }\n\n    function parseSkin(xml) {\n      var data = {\n        sources: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'bind_shape_matrix':\n            data.bindShapeMatrix = parseFloats(child.textContent);\n            break;\n\n          case 'source':\n            var id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'joints':\n            data.joints = parseJoints(child);\n            break;\n\n          case 'vertex_weights':\n            data.vertexWeights = parseVertexWeights(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseJoints(xml) {\n      var data = {\n        inputs: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var semantic = child.getAttribute('semantic');\n            var id = parseId(child.getAttribute('source'));\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseVertexWeights(xml) {\n      var data = {\n        inputs: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var semantic = child.getAttribute('semantic');\n            var id = parseId(child.getAttribute('source'));\n            var offset = parseInt(child.getAttribute('offset'));\n            data.inputs[semantic] = {\n              id: id,\n              offset: offset\n            };\n            break;\n\n          case 'vcount':\n            data.vcount = parseInts(child.textContent);\n            break;\n\n          case 'v':\n            data.v = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildController(data) {\n      var build = {\n        id: data.id\n      };\n      var geometry = library.geometries[build.id];\n\n      if (data.skin !== undefined) {\n        build.skin = buildSkin(data.skin); // we enhance the 'sources' property of the corresponding geometry with our skin data\n\n        geometry.sources.skinIndices = build.skin.indices;\n        geometry.sources.skinWeights = build.skin.weights;\n      }\n\n      return build;\n    }\n\n    function buildSkin(data) {\n      var BONE_LIMIT = 4;\n      var build = {\n        joints: [],\n        // this must be an array to preserve the joint order\n        indices: {\n          array: [],\n          stride: BONE_LIMIT\n        },\n        weights: {\n          array: [],\n          stride: BONE_LIMIT\n        }\n      };\n      var sources = data.sources;\n      var vertexWeights = data.vertexWeights;\n      var vcount = vertexWeights.vcount;\n      var v = vertexWeights.v;\n      var jointOffset = vertexWeights.inputs.JOINT.offset;\n      var weightOffset = vertexWeights.inputs.WEIGHT.offset;\n      var jointSource = data.sources[data.joints.inputs.JOINT];\n      var inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];\n      var weights = sources[vertexWeights.inputs.WEIGHT.id].array;\n      var stride = 0;\n      var i, j, l; // procces skin data for each vertex\n\n      for (i = 0, l = vcount.length; i < l; i++) {\n        var jointCount = vcount[i]; // this is the amount of joints that affect a single vertex\n\n        var vertexSkinData = [];\n\n        for (j = 0; j < jointCount; j++) {\n          var skinIndex = v[stride + jointOffset];\n          var weightId = v[stride + weightOffset];\n          var skinWeight = weights[weightId];\n          vertexSkinData.push({\n            index: skinIndex,\n            weight: skinWeight\n          });\n          stride += 2;\n        } // we sort the joints in descending order based on the weights.\n        // this ensures, we only procced the most important joints of the vertex\n\n\n        vertexSkinData.sort(descending); // now we provide for each vertex a set of four index and weight values.\n        // the order of the skin data matches the order of vertices\n\n        for (j = 0; j < BONE_LIMIT; j++) {\n          var d = vertexSkinData[j];\n\n          if (d !== undefined) {\n            build.indices.array.push(d.index);\n            build.weights.array.push(d.weight);\n          } else {\n            build.indices.array.push(0);\n            build.weights.array.push(0);\n          }\n        }\n      } // setup bind matrix\n\n\n      if (data.bindShapeMatrix) {\n        build.bindMatrix = new Matrix4().fromArray(data.bindShapeMatrix).transpose();\n      } else {\n        build.bindMatrix = new Matrix4().identity();\n      } // process bones and inverse bind matrix data\n\n\n      for (i = 0, l = jointSource.array.length; i < l; i++) {\n        var name = jointSource.array[i];\n        var boneInverse = new Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();\n        build.joints.push({\n          name: name,\n          boneInverse: boneInverse\n        });\n      }\n\n      return build; // array sort function\n\n      function descending(a, b) {\n        return b.weight - a.weight;\n      }\n    }\n\n    function getController(id) {\n      return getBuild(library.controllers[id], buildController);\n    } // image\n\n\n    function parseImage(xml) {\n      var data = {\n        init_from: getElementsByTagName(xml, 'init_from')[0].textContent\n      };\n      library.images[xml.getAttribute('id')] = data;\n    }\n\n    function buildImage(data) {\n      if (data.build !== undefined) return data.build;\n      return data.init_from;\n    }\n\n    function getImage(id) {\n      var data = library.images[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildImage);\n      }\n\n      console.warn(\"THREE.ColladaLoader: Couldn't find image with ID:\", id);\n      return null;\n    } // effect\n\n\n    function parseEffect(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'profile_COMMON':\n            data.profile = parseEffectProfileCOMMON(child);\n            break;\n        }\n      }\n\n      library.effects[xml.getAttribute('id')] = data;\n    }\n\n    function parseEffectProfileCOMMON(xml) {\n      var data = {\n        surfaces: {},\n        samplers: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'newparam':\n            parseEffectNewparam(child, data);\n            break;\n\n          case 'technique':\n            data.technique = parseEffectTechnique(child);\n            break;\n\n          case 'extra':\n            data.extra = parseEffectExtra(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectNewparam(xml, data) {\n      var sid = xml.getAttribute('sid');\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'surface':\n            data.surfaces[sid] = parseEffectSurface(child);\n            break;\n\n          case 'sampler2D':\n            data.samplers[sid] = parseEffectSampler(child);\n            break;\n        }\n      }\n    }\n\n    function parseEffectSurface(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'init_from':\n            data.init_from = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectSampler(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'source':\n            data.source = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectTechnique(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'constant':\n          case 'lambert':\n          case 'blinn':\n          case 'phong':\n            data.type = child.nodeName;\n            data.parameters = parseEffectParameters(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameters(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'emission':\n          case 'diffuse':\n          case 'specular':\n          case 'bump':\n          case 'ambient':\n          case 'shininess':\n          case 'transparency':\n            data[child.nodeName] = parseEffectParameter(child);\n            break;\n\n          case 'transparent':\n            data[child.nodeName] = {\n              opaque: child.getAttribute('opaque'),\n              data: parseEffectParameter(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameter(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'color':\n            data[child.nodeName] = parseFloats(child.textContent);\n            break;\n\n          case 'float':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case 'texture':\n            data[child.nodeName] = {\n              id: child.getAttribute('texture'),\n              extra: parseEffectParameterTexture(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTexture(xml) {\n      var data = {\n        technique: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'extra':\n            parseEffectParameterTextureExtra(child, data);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTextureExtra(xml, data) {\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique':\n            parseEffectParameterTextureExtraTechnique(child, data);\n            break;\n        }\n      }\n    }\n\n    function parseEffectParameterTextureExtraTechnique(xml, data) {\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'repeatU':\n          case 'repeatV':\n          case 'offsetU':\n          case 'offsetV':\n            data.technique[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case 'wrapU':\n          case 'wrapV':\n            // some files have values for wrapU/wrapV which become NaN via parseInt\n            if (child.textContent.toUpperCase() === 'TRUE') {\n              data.technique[child.nodeName] = 1;\n            } else if (child.textContent.toUpperCase() === 'FALSE') {\n              data.technique[child.nodeName] = 0;\n            } else {\n              data.technique[child.nodeName] = parseInt(child.textContent);\n            }\n\n            break;\n        }\n      }\n    }\n\n    function parseEffectExtra(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique':\n            data.technique = parseEffectExtraTechnique(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectExtraTechnique(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'double_sided':\n            data[child.nodeName] = parseInt(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildEffect(data) {\n      return data;\n    }\n\n    function getEffect(id) {\n      return getBuild(library.effects[id], buildEffect);\n    } // material\n\n\n    function parseMaterial(xml) {\n      var data = {\n        name: xml.getAttribute('name')\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'instance_effect':\n            data.url = parseId(child.getAttribute('url'));\n            break;\n        }\n      }\n\n      library.materials[xml.getAttribute('id')] = data;\n    }\n\n    function getTextureLoader(image) {\n      var loader;\n      var extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2); // http://www.jstips.co/en/javascript/get-file-extension/\n\n      extension = extension.toLowerCase();\n\n      switch (extension) {\n        case 'tga':\n          loader = tgaLoader;\n          break;\n\n        default:\n          loader = textureLoader;\n      }\n\n      return loader;\n    }\n\n    function buildMaterial(data) {\n      var effect = getEffect(data.url);\n      var technique = effect.profile.technique;\n      var extra = effect.profile.extra;\n      var material;\n\n      switch (technique.type) {\n        case 'phong':\n        case 'blinn':\n          material = new MeshPhongMaterial();\n          break;\n\n        case 'lambert':\n          material = new MeshLambertMaterial();\n          break;\n\n        default:\n          material = new MeshBasicMaterial();\n          break;\n      }\n\n      material.name = data.name || '';\n\n      function getTexture(textureObject) {\n        var sampler = effect.profile.samplers[textureObject.id];\n        var image = null; // get image\n\n        if (sampler !== undefined) {\n          var surface = effect.profile.surfaces[sampler.source];\n          image = getImage(surface.init_from);\n        } else {\n          console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');\n          image = getImage(textureObject.id);\n        } // create texture if image is avaiable\n\n\n        if (image !== null) {\n          var loader = getTextureLoader(image);\n\n          if (loader !== undefined) {\n            var texture = loader.load(image);\n            var extra = textureObject.extra;\n\n            if (extra !== undefined && extra.technique !== undefined && isEmpty(extra.technique) === false) {\n              var technique = extra.technique;\n              texture.wrapS = technique.wrapU ? RepeatWrapping : ClampToEdgeWrapping;\n              texture.wrapT = technique.wrapV ? RepeatWrapping : ClampToEdgeWrapping;\n              texture.offset.set(technique.offsetU || 0, technique.offsetV || 0);\n              texture.repeat.set(technique.repeatU || 1, technique.repeatV || 1);\n            } else {\n              texture.wrapS = RepeatWrapping;\n              texture.wrapT = RepeatWrapping;\n            }\n\n            return texture;\n          } else {\n            console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);\n            return null;\n          }\n        } else {\n          console.warn(\"THREE.ColladaLoader: Couldn't create texture with ID:\", textureObject.id);\n          return null;\n        }\n      }\n\n      var parameters = technique.parameters;\n\n      for (var key in parameters) {\n        var parameter = parameters[key];\n\n        switch (key) {\n          case 'diffuse':\n            if (parameter.color) material.color.fromArray(parameter.color);\n            if (parameter.texture) material.map = getTexture(parameter.texture);\n            break;\n\n          case 'specular':\n            if (parameter.color && material.specular) material.specular.fromArray(parameter.color);\n            if (parameter.texture) material.specularMap = getTexture(parameter.texture);\n            break;\n\n          case 'bump':\n            if (parameter.texture) material.normalMap = getTexture(parameter.texture);\n            break;\n\n          case 'ambient':\n            if (parameter.texture) material.lightMap = getTexture(parameter.texture);\n            break;\n\n          case 'shininess':\n            if (parameter.float && material.shininess) material.shininess = parameter.float;\n            break;\n\n          case 'emission':\n            if (parameter.color && material.emissive) material.emissive.fromArray(parameter.color);\n            if (parameter.texture) material.emissiveMap = getTexture(parameter.texture);\n            break;\n        }\n      } //\n\n\n      var transparent = parameters['transparent'];\n      var transparency = parameters['transparency']; // <transparency> does not exist but <transparent>\n\n      if (transparency === undefined && transparent) {\n        transparency = {\n          float: 1\n        };\n      } // <transparent> does not exist but <transparency>\n\n\n      if (transparent === undefined && transparency) {\n        transparent = {\n          opaque: 'A_ONE',\n          data: {\n            color: [1, 1, 1, 1]\n          }\n        };\n      }\n\n      if (transparent && transparency) {\n        // handle case if a texture exists but no color\n        if (transparent.data.texture) {\n          // we do not set an alpha map (see #13792)\n          material.transparent = true;\n        } else {\n          var color = transparent.data.color;\n\n          switch (transparent.opaque) {\n            case 'A_ONE':\n              material.opacity = color[3] * transparency.float;\n              break;\n\n            case 'RGB_ZERO':\n              material.opacity = 1 - color[0] * transparency.float;\n              break;\n\n            case 'A_ZERO':\n              material.opacity = 1 - color[3] * transparency.float;\n              break;\n\n            case 'RGB_ONE':\n              material.opacity = color[0] * transparency.float;\n              break;\n\n            default:\n              console.warn('THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque);\n          }\n\n          if (material.opacity < 1) material.transparent = true;\n        }\n      } //\n\n\n      if (extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1) {\n        material.side = DoubleSide;\n      }\n\n      return material;\n    }\n\n    function getMaterial(id) {\n      return getBuild(library.materials[id], buildMaterial);\n    } // camera\n\n\n    function parseCamera(xml) {\n      var data = {\n        name: xml.getAttribute('name')\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'optics':\n            data.optics = parseCameraOptics(child);\n            break;\n        }\n      }\n\n      library.cameras[xml.getAttribute('id')] = data;\n    }\n\n    function parseCameraOptics(xml) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            return parseCameraTechnique(child);\n        }\n      }\n\n      return {};\n    }\n\n    function parseCameraTechnique(xml) {\n      var data = {};\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'perspective':\n          case 'orthographic':\n            data.technique = child.nodeName;\n            data.parameters = parseCameraParameters(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseCameraParameters(xml) {\n      var data = {};\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'xfov':\n          case 'yfov':\n          case 'xmag':\n          case 'ymag':\n          case 'znear':\n          case 'zfar':\n          case 'aspect_ratio':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildCamera(data) {\n      var camera;\n\n      switch (data.optics.technique) {\n        case 'perspective':\n          camera = new PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n\n        case 'orthographic':\n          var ymag = data.optics.parameters.ymag;\n          var xmag = data.optics.parameters.xmag;\n          var aspectRatio = data.optics.parameters.aspect_ratio;\n          xmag = xmag === undefined ? ymag * aspectRatio : xmag;\n          ymag = ymag === undefined ? xmag / aspectRatio : ymag;\n          xmag *= 0.5;\n          ymag *= 0.5;\n          camera = new OrthographicCamera(-xmag, xmag, ymag, -ymag, // left, right, top, bottom\n          data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n\n        default:\n          camera = new PerspectiveCamera();\n          break;\n      }\n\n      camera.name = data.name || '';\n      return camera;\n    }\n\n    function getCamera(id) {\n      var data = library.cameras[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildCamera);\n      }\n\n      console.warn(\"THREE.ColladaLoader: Couldn't find camera with ID:\", id);\n      return null;\n    } // light\n\n\n    function parseLight(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            data = parseLightTechnique(child);\n            break;\n        }\n      }\n\n      library.lights[xml.getAttribute('id')] = data;\n    }\n\n    function parseLightTechnique(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'directional':\n          case 'point':\n          case 'spot':\n          case 'ambient':\n            data.technique = child.nodeName;\n            data.parameters = parseLightParameters(child);\n        }\n      }\n\n      return data;\n    }\n\n    function parseLightParameters(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'color':\n            var array = parseFloats(child.textContent);\n            data.color = new Color().fromArray(array);\n            break;\n\n          case 'falloff_angle':\n            data.falloffAngle = parseFloat(child.textContent);\n            break;\n\n          case 'quadratic_attenuation':\n            var f = parseFloat(child.textContent);\n            data.distance = f ? Math.sqrt(1 / f) : 0;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildLight(data) {\n      var light;\n\n      switch (data.technique) {\n        case 'directional':\n          light = new DirectionalLight();\n          break;\n\n        case 'point':\n          light = new PointLight();\n          break;\n\n        case 'spot':\n          light = new SpotLight();\n          break;\n\n        case 'ambient':\n          light = new AmbientLight();\n          break;\n      }\n\n      if (data.parameters.color) light.color.copy(data.parameters.color);\n      if (data.parameters.distance) light.distance = data.parameters.distance;\n      return light;\n    }\n\n    function getLight(id) {\n      var data = library.lights[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildLight);\n      }\n\n      console.warn(\"THREE.ColladaLoader: Couldn't find light with ID:\", id);\n      return null;\n    } // geometry\n\n\n    function parseGeometry(xml) {\n      var data = {\n        name: xml.getAttribute('name'),\n        sources: {},\n        vertices: {},\n        primitives: []\n      };\n      var mesh = getElementsByTagName(xml, 'mesh')[0]; // the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n\n      if (mesh === undefined) return;\n\n      for (var i = 0; i < mesh.childNodes.length; i++) {\n        var child = mesh.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        var id = child.getAttribute('id');\n\n        switch (child.nodeName) {\n          case 'source':\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'vertices':\n            // data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n            data.vertices = parseGeometryVertices(child);\n            break;\n\n          case 'polygons':\n            console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);\n            break;\n\n          case 'lines':\n          case 'linestrips':\n          case 'polylist':\n          case 'triangles':\n            data.primitives.push(parseGeometryPrimitive(child));\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      library.geometries[xml.getAttribute('id')] = data;\n    }\n\n    function parseSource(xml) {\n      var data = {\n        array: [],\n        stride: 3\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'float_array':\n            data.array = parseFloats(child.textContent);\n            break;\n\n          case 'Name_array':\n            data.array = parseStrings(child.textContent);\n            break;\n\n          case 'technique_common':\n            var accessor = getElementsByTagName(child, 'accessor')[0];\n\n            if (accessor !== undefined) {\n              data.stride = parseInt(accessor.getAttribute('stride'));\n            }\n\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseGeometryVertices(xml) {\n      var data = {};\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));\n      }\n\n      return data;\n    }\n\n    function parseGeometryPrimitive(xml) {\n      var primitive = {\n        type: xml.nodeName,\n        material: xml.getAttribute('material'),\n        count: parseInt(xml.getAttribute('count')),\n        inputs: {},\n        stride: 0,\n        hasUV: false\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var id = parseId(child.getAttribute('source'));\n            var semantic = child.getAttribute('semantic');\n            var offset = parseInt(child.getAttribute('offset'));\n            var set = parseInt(child.getAttribute('set'));\n            var inputname = set > 0 ? semantic + set : semantic;\n            primitive.inputs[inputname] = {\n              id: id,\n              offset: offset\n            };\n            primitive.stride = Math.max(primitive.stride, offset + 1);\n            if (semantic === 'TEXCOORD') primitive.hasUV = true;\n            break;\n\n          case 'vcount':\n            primitive.vcount = parseInts(child.textContent);\n            break;\n\n          case 'p':\n            primitive.p = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return primitive;\n    }\n\n    function groupPrimitives(primitives) {\n      var build = {};\n\n      for (var i = 0; i < primitives.length; i++) {\n        var primitive = primitives[i];\n        if (build[primitive.type] === undefined) build[primitive.type] = [];\n        build[primitive.type].push(primitive);\n      }\n\n      return build;\n    }\n\n    function checkUVCoordinates(primitives) {\n      var count = 0;\n\n      for (var i = 0, l = primitives.length; i < l; i++) {\n        var primitive = primitives[i];\n\n        if (primitive.hasUV === true) {\n          count++;\n        }\n      }\n\n      if (count > 0 && count < primitives.length) {\n        primitives.uvsNeedsFix = true;\n      }\n    }\n\n    function buildGeometry(data) {\n      var build = {};\n      var sources = data.sources;\n      var vertices = data.vertices;\n      var primitives = data.primitives;\n      if (primitives.length === 0) return {}; // our goal is to create one buffer geometry for a single type of primitives\n      // first, we group all primitives by their type\n\n      var groupedPrimitives = groupPrimitives(primitives);\n\n      for (var type in groupedPrimitives) {\n        var primitiveType = groupedPrimitives[type]; // second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n        checkUVCoordinates(primitiveType); // third, create a buffer geometry for each type of primitives\n\n        build[type] = buildGeometryType(primitiveType, sources, vertices);\n      }\n\n      return build;\n    }\n\n    function buildGeometryType(primitives, sources, vertices) {\n      var build = {};\n      var position = {\n        array: [],\n        stride: 0\n      };\n      var normal = {\n        array: [],\n        stride: 0\n      };\n      var uv = {\n        array: [],\n        stride: 0\n      };\n      var uv2 = {\n        array: [],\n        stride: 0\n      };\n      var color = {\n        array: [],\n        stride: 0\n      };\n      var skinIndex = {\n        array: [],\n        stride: 4\n      };\n      var skinWeight = {\n        array: [],\n        stride: 4\n      };\n      var geometry = new BufferGeometry();\n      var materialKeys = [];\n      var start = 0;\n\n      for (var p = 0; p < primitives.length; p++) {\n        var primitive = primitives[p];\n        var inputs = primitive.inputs; // groups\n\n        var count = 0;\n\n        switch (primitive.type) {\n          case 'lines':\n          case 'linestrips':\n            count = primitive.count * 2;\n            break;\n\n          case 'triangles':\n            count = primitive.count * 3;\n            break;\n\n          case 'polylist':\n            for (var g = 0; g < primitive.count; g++) {\n              var vc = primitive.vcount[g];\n\n              switch (vc) {\n                case 3:\n                  count += 3; // single triangle\n\n                  break;\n\n                case 4:\n                  count += 6; // quad, subdivided into two triangles\n\n                  break;\n\n                default:\n                  count += (vc - 2) * 3; // polylist with more than four vertices\n\n                  break;\n              }\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);\n        }\n\n        geometry.addGroup(start, count, p);\n        start += count; // material\n\n        if (primitive.material) {\n          materialKeys.push(primitive.material);\n        } // geometry data\n\n\n        for (var name in inputs) {\n          var input = inputs[name];\n\n          switch (name) {\n            case 'VERTEX':\n              for (var key in vertices) {\n                var id = vertices[key];\n\n                switch (key) {\n                  case 'POSITION':\n                    var prevLength = position.array.length;\n                    buildGeometryData(primitive, sources[id], input.offset, position.array);\n                    position.stride = sources[id].stride;\n\n                    if (sources.skinWeights && sources.skinIndices) {\n                      buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);\n                      buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);\n                    } // see #3803\n\n\n                    if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {\n                      var count = (position.array.length - prevLength) / position.stride;\n\n                      for (var i = 0; i < count; i++) {\n                        // fill missing uv coordinates\n                        uv.array.push(0, 0);\n                      }\n                    }\n\n                    break;\n\n                  case 'NORMAL':\n                    buildGeometryData(primitive, sources[id], input.offset, normal.array);\n                    normal.stride = sources[id].stride;\n                    break;\n\n                  case 'COLOR':\n                    buildGeometryData(primitive, sources[id], input.offset, color.array);\n                    color.stride = sources[id].stride;\n                    break;\n\n                  case 'TEXCOORD':\n                    buildGeometryData(primitive, sources[id], input.offset, uv.array);\n                    uv.stride = sources[id].stride;\n                    break;\n\n                  case 'TEXCOORD1':\n                    buildGeometryData(primitive, sources[id], input.offset, uv2.array);\n                    uv.stride = sources[id].stride;\n                    break;\n\n                  default:\n                    console.warn('THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key);\n                }\n              }\n\n              break;\n\n            case 'NORMAL':\n              buildGeometryData(primitive, sources[input.id], input.offset, normal.array);\n              normal.stride = sources[input.id].stride;\n              break;\n\n            case 'COLOR':\n              buildGeometryData(primitive, sources[input.id], input.offset, color.array);\n              color.stride = sources[input.id].stride;\n              break;\n\n            case 'TEXCOORD':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv.array);\n              uv.stride = sources[input.id].stride;\n              break;\n\n            case 'TEXCOORD1':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);\n              uv2.stride = sources[input.id].stride;\n              break;\n          }\n        }\n      } // build geometry\n\n\n      if (position.array.length > 0) geometry.setAttribute('position', new Float32BufferAttribute(position.array, position.stride));\n      if (normal.array.length > 0) geometry.setAttribute('normal', new Float32BufferAttribute(normal.array, normal.stride));\n      if (color.array.length > 0) geometry.setAttribute('color', new Float32BufferAttribute(color.array, color.stride));\n      if (uv.array.length > 0) geometry.setAttribute('uv', new Float32BufferAttribute(uv.array, uv.stride));\n      if (uv2.array.length > 0) geometry.setAttribute('uv2', new Float32BufferAttribute(uv2.array, uv2.stride));\n      if (skinIndex.array.length > 0) geometry.setAttribute('skinIndex', new Float32BufferAttribute(skinIndex.array, skinIndex.stride));\n      if (skinWeight.array.length > 0) geometry.setAttribute('skinWeight', new Float32BufferAttribute(skinWeight.array, skinWeight.stride));\n      build.data = geometry;\n      build.type = primitives[0].type;\n      build.materialKeys = materialKeys;\n      return build;\n    }\n\n    function buildGeometryData(primitive, source, offset, array) {\n      var indices = primitive.p;\n      var stride = primitive.stride;\n      var vcount = primitive.vcount;\n\n      function pushVector(i) {\n        var index = indices[i + offset] * sourceStride;\n        var length = index + sourceStride;\n\n        for (; index < length; index++) {\n          array.push(sourceArray[index]);\n        }\n      }\n\n      var sourceArray = source.array;\n      var sourceStride = source.stride;\n\n      if (primitive.vcount !== undefined) {\n        var index = 0;\n\n        for (var i = 0, l = vcount.length; i < l; i++) {\n          var count = vcount[i];\n\n          if (count === 4) {\n            var a = index + stride * 0;\n            var b = index + stride * 1;\n            var c = index + stride * 2;\n            var d = index + stride * 3;\n            pushVector(a);\n            pushVector(b);\n            pushVector(d);\n            pushVector(b);\n            pushVector(c);\n            pushVector(d);\n          } else if (count === 3) {\n            var a = index + stride * 0;\n            var b = index + stride * 1;\n            var c = index + stride * 2;\n            pushVector(a);\n            pushVector(b);\n            pushVector(c);\n          } else if (count > 4) {\n            for (var k = 1, kl = count - 2; k <= kl; k++) {\n              var a = index + stride * 0;\n              var b = index + stride * k;\n              var c = index + stride * (k + 1);\n              pushVector(a);\n              pushVector(b);\n              pushVector(c);\n            }\n          }\n\n          index += stride * count;\n        }\n      } else {\n        for (var _i = 0, _l = indices.length; _i < _l; _i += stride) {\n          pushVector(_i);\n        }\n      }\n    }\n\n    function getGeometry(id) {\n      return getBuild(library.geometries[id], buildGeometry);\n    } // kinematics\n\n\n    function parseKinematicsModel(xml) {\n      var data = {\n        name: xml.getAttribute('name') || '',\n        joints: {},\n        links: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            parseKinematicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n\n      library.kinematicsModels[xml.getAttribute('id')] = data;\n    }\n\n    function buildKinematicsModel(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n\n    function getKinematicsModel(id) {\n      return getBuild(library.kinematicsModels[id], buildKinematicsModel);\n    }\n\n    function parseKinematicsTechniqueCommon(xml, data) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'joint':\n            data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);\n            break;\n\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n        }\n      }\n    }\n\n    function parseKinematicsJoint(xml) {\n      var data;\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'prismatic':\n          case 'revolute':\n            data = parseKinematicsJointParameter(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsJointParameter(xml, data) {\n      var data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        axis: new Vector3(),\n        limits: {\n          min: 0,\n          max: 0\n        },\n        type: xml.nodeName,\n        static: false,\n        zeroPosition: 0,\n        middlePosition: 0\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'axis':\n            var array = parseFloats(child.textContent);\n            data.axis.fromArray(array);\n            break;\n\n          case 'limits':\n            var max = child.getElementsByTagName('max')[0];\n            var min = child.getElementsByTagName('min')[0];\n            data.limits.max = parseFloat(max.textContent);\n            data.limits.min = parseFloat(min.textContent);\n            break;\n        }\n      } // if min is equal to or greater than max, consider the joint static\n\n\n      if (data.limits.min >= data.limits.max) {\n        data.static = true;\n      } // calculate middle position\n\n\n      data.middlePosition = (data.limits.min + data.limits.max) / 2.0;\n      return data;\n    }\n\n    function parseKinematicsLink(xml) {\n      var data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        attachments: [],\n        transforms: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'attachment_full':\n            data.attachments.push(parseKinematicsAttachment(child));\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsAttachment(xml) {\n      var data = {\n        joint: xml.getAttribute('joint').split('/').pop(),\n        transforms: [],\n        links: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsTransform(xml) {\n      var data = {\n        type: xml.nodeName\n      };\n      var array = parseFloats(xml.textContent);\n\n      switch (data.type) {\n        case 'matrix':\n          data.obj = new Matrix4();\n          data.obj.fromArray(array).transpose();\n          break;\n\n        case 'translate':\n          data.obj = new Vector3();\n          data.obj.fromArray(array);\n          break;\n\n        case 'rotate':\n          data.obj = new Vector3();\n          data.obj.fromArray(array);\n          data.angle = MathUtils.degToRad(array[3]);\n          break;\n      }\n\n      return data;\n    } // physics\n\n\n    function parsePhysicsModel(xml) {\n      var data = {\n        name: xml.getAttribute('name') || '',\n        rigidBodies: {}\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'rigid_body':\n            data.rigidBodies[child.getAttribute('name')] = {};\n            parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);\n            break;\n        }\n      }\n\n      library.physicsModels[xml.getAttribute('id')] = data;\n    }\n\n    function parsePhysicsRigidBody(xml, data) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            parsePhysicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n    }\n\n    function parsePhysicsTechniqueCommon(xml, data) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'inertia':\n            data.inertia = parseFloats(child.textContent);\n            break;\n\n          case 'mass':\n            data.mass = parseFloats(child.textContent)[0];\n            break;\n        }\n      }\n    } // scene\n\n\n    function parseKinematicsScene(xml) {\n      var data = {\n        bindJointAxis: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'bind_joint_axis':\n            data.bindJointAxis.push(parseKinematicsBindJointAxis(child));\n            break;\n        }\n      }\n\n      library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;\n    }\n\n    function parseKinematicsBindJointAxis(xml) {\n      var data = {\n        target: xml.getAttribute('target').split('/').pop()\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'axis':\n            var param = child.getElementsByTagName('param')[0];\n            data.axis = param.textContent;\n            var tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];\n            data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildKinematicsScene(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n\n    function getKinematicsScene(id) {\n      return getBuild(library.kinematicsScenes[id], buildKinematicsScene);\n    }\n\n    function setupKinematics() {\n      var kinematicsModelId = Object.keys(library.kinematicsModels)[0];\n      var kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];\n      var visualSceneId = Object.keys(library.visualScenes)[0];\n      if (kinematicsModelId === undefined || kinematicsSceneId === undefined) return;\n      var kinematicsModel = getKinematicsModel(kinematicsModelId);\n      var kinematicsScene = getKinematicsScene(kinematicsSceneId);\n      var visualScene = getVisualScene(visualSceneId);\n      var bindJointAxis = kinematicsScene.bindJointAxis;\n      var jointMap = {};\n\n      for (var i = 0, l = bindJointAxis.length; i < l; i++) {\n        var axis = bindJointAxis[i]; // the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n        var targetElement = collada.querySelector('[sid=\"' + axis.target + '\"]');\n\n        if (targetElement) {\n          // get the parent of the transform element\n          var parentVisualElement = targetElement.parentElement; // connect the joint of the kinematics model with the element in the visual scene\n\n          connect(axis.jointIndex, parentVisualElement);\n        }\n      }\n\n      function connect(jointIndex, visualElement) {\n        var visualElementName = visualElement.getAttribute('name');\n        var joint = kinematicsModel.joints[jointIndex];\n        visualScene.traverse(function (object) {\n          if (object.name === visualElementName) {\n            jointMap[jointIndex] = {\n              object: object,\n              transforms: buildTransformList(visualElement),\n              joint: joint,\n              position: joint.zeroPosition\n            };\n          }\n        });\n      }\n\n      var m0 = new Matrix4();\n      kinematics = {\n        joints: kinematicsModel && kinematicsModel.joints,\n        getJointValue: function getJointValue(jointIndex) {\n          var jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            return jointData.position;\n          } else {\n            console.warn('THREE.ColladaLoader: Joint ' + jointIndex + \" doesn't exist.\");\n          }\n        },\n        setJointValue: function setJointValue(jointIndex, value) {\n          var jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            var joint = jointData.joint;\n\n            if (value > joint.limits.max || value < joint.limits.min) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');\n            } else if (joint.static) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');\n            } else {\n              var object = jointData.object;\n              var axis = joint.axis;\n              var transforms = jointData.transforms;\n              matrix.identity(); // each update, we have to apply all transforms in the correct order\n\n              for (var _i2 = 0; _i2 < transforms.length; _i2++) {\n                var transform = transforms[_i2]; // if there is a connection of the transform node with a joint, apply the joint value\n\n                if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {\n                  switch (joint.type) {\n                    case 'revolute':\n                      matrix.multiply(m0.makeRotationAxis(axis, MathUtils.degToRad(value)));\n                      break;\n\n                    case 'prismatic':\n                      matrix.multiply(m0.makeTranslation(axis.x * value, axis.y * value, axis.z * value));\n                      break;\n\n                    default:\n                      console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);\n                      break;\n                  }\n                } else {\n                  switch (transform.type) {\n                    case 'matrix':\n                      matrix.multiply(transform.obj);\n                      break;\n\n                    case 'translate':\n                      matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));\n                      break;\n\n                    case 'scale':\n                      matrix.scale(transform.obj);\n                      break;\n\n                    case 'rotate':\n                      matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));\n                      break;\n                  }\n                }\n              }\n\n              object.matrix.copy(matrix);\n              object.matrix.decompose(object.position, object.quaternion, object.scale);\n              jointMap[jointIndex].position = value;\n            }\n          } else {\n            console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');\n          }\n        }\n      };\n    }\n\n    function buildTransformList(node) {\n      var transforms = [];\n      var xml = collada.querySelector('[id=\"' + node.id + '\"]');\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'matrix':\n            var array = parseFloats(child.textContent);\n            var matrix = new Matrix4().fromArray(array).transpose();\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: matrix\n            });\n            break;\n\n          case 'translate':\n          case 'scale':\n            var array = parseFloats(child.textContent);\n            var vector = new Vector3().fromArray(array);\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector\n            });\n            break;\n\n          case 'rotate':\n            var array = parseFloats(child.textContent);\n            var vector = new Vector3().fromArray(array);\n            var angle = MathUtils.degToRad(array[3]);\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector,\n              angle: angle\n            });\n            break;\n        }\n      }\n\n      return transforms;\n    } // nodes\n\n\n    function prepareNodes(xml) {\n      var elements = xml.getElementsByTagName('node'); // ensure all node elements have id attributes\n\n      for (var i = 0; i < elements.length; i++) {\n        var element = elements[i];\n\n        if (element.hasAttribute('id') === false) {\n          element.setAttribute('id', generateId());\n        }\n      }\n    }\n\n    var matrix = new Matrix4();\n    var vector = new Vector3();\n\n    function parseNode(xml) {\n      var data = {\n        name: xml.getAttribute('name') || '',\n        type: xml.getAttribute('type'),\n        id: xml.getAttribute('id'),\n        sid: xml.getAttribute('sid'),\n        matrix: new Matrix4(),\n        nodes: [],\n        instanceCameras: [],\n        instanceControllers: [],\n        instanceLights: [],\n        instanceGeometries: [],\n        instanceNodes: [],\n        transforms: {}\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'node':\n            data.nodes.push(child.getAttribute('id'));\n            parseNode(child);\n            break;\n\n          case 'instance_camera':\n            data.instanceCameras.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'instance_controller':\n            data.instanceControllers.push(parseNodeInstance(child));\n            break;\n\n          case 'instance_light':\n            data.instanceLights.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'instance_geometry':\n            data.instanceGeometries.push(parseNodeInstance(child));\n            break;\n\n          case 'instance_node':\n            data.instanceNodes.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'matrix':\n            var array = parseFloats(child.textContent);\n            data.matrix.multiply(matrix.fromArray(array).transpose());\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'translate':\n            var array = parseFloats(child.textContent);\n            vector.fromArray(array);\n            data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'rotate':\n            var array = parseFloats(child.textContent);\n            var angle = MathUtils.degToRad(array[3]);\n            data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'scale':\n            var array = parseFloats(child.textContent);\n            data.matrix.scale(vector.fromArray(array));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'extra':\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      if (hasNode(data.id)) {\n        console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);\n      } else {\n        library.nodes[data.id] = data;\n      }\n\n      return data;\n    }\n\n    function parseNodeInstance(xml) {\n      var data = {\n        id: parseId(xml.getAttribute('url')),\n        materials: {},\n        skeletons: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'bind_material':\n            var instances = child.getElementsByTagName('instance_material');\n\n            for (var j = 0; j < instances.length; j++) {\n              var instance = instances[j];\n              var symbol = instance.getAttribute('symbol');\n              var target = instance.getAttribute('target');\n              data.materials[symbol] = parseId(target);\n            }\n\n            break;\n\n          case 'skeleton':\n            data.skeletons.push(parseId(child.textContent));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildSkeleton(skeletons, joints) {\n      var boneData = [];\n      var sortedBoneData = [];\n      var i, j, data; // a skeleton can have multiple root bones. collada expresses this\n      // situtation with multiple \"skeleton\" tags per controller instance\n\n      for (i = 0; i < skeletons.length; i++) {\n        var skeleton = skeletons[i];\n        var root;\n\n        if (hasNode(skeleton)) {\n          root = getNode(skeleton);\n          buildBoneHierarchy(root, joints, boneData);\n        } else if (hasVisualScene(skeleton)) {\n          // handle case where the skeleton refers to the visual scene (#13335)\n          var visualScene = library.visualScenes[skeleton];\n          var children = visualScene.children;\n\n          for (var _j = 0; _j < children.length; _j++) {\n            var child = children[_j];\n\n            if (child.type === 'JOINT') {\n              var root = getNode(child.id);\n              buildBoneHierarchy(root, joints, boneData);\n            }\n          }\n        } else {\n          console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);\n        }\n      } // sort bone data (the order is defined in the corresponding controller)\n\n\n      for (i = 0; i < joints.length; i++) {\n        for (j = 0; j < boneData.length; j++) {\n          data = boneData[j];\n\n          if (data.bone.name === joints[i].name) {\n            sortedBoneData[i] = data;\n            data.processed = true;\n            break;\n          }\n        }\n      } // add unprocessed bone data at the end of the list\n\n\n      for (i = 0; i < boneData.length; i++) {\n        data = boneData[i];\n\n        if (data.processed === false) {\n          sortedBoneData.push(data);\n          data.processed = true;\n        }\n      } // setup arrays for skeleton creation\n\n\n      var bones = [];\n      var boneInverses = [];\n\n      for (i = 0; i < sortedBoneData.length; i++) {\n        data = sortedBoneData[i];\n        bones.push(data.bone);\n        boneInverses.push(data.boneInverse);\n      }\n\n      return new Skeleton(bones, boneInverses);\n    }\n\n    function buildBoneHierarchy(root, joints, boneData) {\n      // setup bone data from visual scene\n      root.traverse(function (object) {\n        if (object.isBone === true) {\n          var boneInverse; // retrieve the boneInverse from the controller data\n\n          for (var i = 0; i < joints.length; i++) {\n            var joint = joints[i];\n\n            if (joint.name === object.name) {\n              boneInverse = joint.boneInverse;\n              break;\n            }\n          }\n\n          if (boneInverse === undefined) {\n            // Unfortunately, there can be joints in the visual scene that are not part of the\n            // corresponding controller. In this case, we have to create a dummy boneInverse matrix\n            // for the respective bone. This bone won't affect any vertices, because there are no skin indices\n            // and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n            // ensure a correct animation of the model.\n            boneInverse = new Matrix4();\n          }\n\n          boneData.push({\n            bone: object,\n            boneInverse: boneInverse,\n            processed: false\n          });\n        }\n      });\n    }\n\n    function buildNode(data) {\n      var objects = [];\n      var matrix = data.matrix;\n      var nodes = data.nodes;\n      var type = data.type;\n      var instanceCameras = data.instanceCameras;\n      var instanceControllers = data.instanceControllers;\n      var instanceLights = data.instanceLights;\n      var instanceGeometries = data.instanceGeometries;\n      var instanceNodes = data.instanceNodes; // nodes\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        objects.push(getNode(nodes[i]));\n      } // instance cameras\n\n\n      for (var _i3 = 0, _l2 = instanceCameras.length; _i3 < _l2; _i3++) {\n        var instanceCamera = getCamera(instanceCameras[_i3]);\n\n        if (instanceCamera !== null) {\n          objects.push(instanceCamera.clone());\n        }\n      } // instance controllers\n\n\n      for (var _i4 = 0, _l3 = instanceControllers.length; _i4 < _l3; _i4++) {\n        var instance = instanceControllers[_i4];\n        var controller = getController(instance.id);\n        var geometries = getGeometry(controller.id);\n        var newObjects = buildObjects(geometries, instance.materials);\n        var skeletons = instance.skeletons;\n        var joints = controller.skin.joints;\n        var skeleton = buildSkeleton(skeletons, joints);\n\n        for (var j = 0, jl = newObjects.length; j < jl; j++) {\n          var object = newObjects[j];\n\n          if (object.isSkinnedMesh) {\n            object.bind(skeleton, controller.skin.bindMatrix);\n            object.normalizeSkinWeights();\n          }\n\n          objects.push(object);\n        }\n      } // instance lights\n\n\n      for (var _i5 = 0, _l4 = instanceLights.length; _i5 < _l4; _i5++) {\n        var instanceLight = getLight(instanceLights[_i5]);\n\n        if (instanceLight !== null) {\n          objects.push(instanceLight.clone());\n        }\n      } // instance geometries\n\n\n      for (var _i6 = 0, _l5 = instanceGeometries.length; _i6 < _l5; _i6++) {\n        var instance = instanceGeometries[_i6]; // a single geometry instance in collada can lead to multiple object3Ds.\n        // this is the case when primitives are combined like triangles and lines\n\n        var geometries = getGeometry(instance.id);\n        var newObjects = buildObjects(geometries, instance.materials);\n\n        for (var _j2 = 0, _jl = newObjects.length; _j2 < _jl; _j2++) {\n          objects.push(newObjects[_j2]);\n        }\n      } // instance nodes\n\n\n      for (var _i7 = 0, _l6 = instanceNodes.length; _i7 < _l6; _i7++) {\n        objects.push(getNode(instanceNodes[_i7]).clone());\n      }\n\n      var object;\n\n      if (nodes.length === 0 && objects.length === 1) {\n        object = objects[0];\n      } else {\n        object = type === 'JOINT' ? new Bone() : new Group();\n\n        for (var _i8 = 0; _i8 < objects.length; _i8++) {\n          object.add(objects[_i8]);\n        }\n      }\n\n      object.name = type === 'JOINT' ? data.sid : data.name;\n      object.matrix.copy(matrix);\n      object.matrix.decompose(object.position, object.quaternion, object.scale);\n      return object;\n    }\n\n    var fallbackMaterial = new MeshBasicMaterial({\n      color: 0xff00ff\n    });\n\n    function resolveMaterialBinding(keys, instanceMaterials) {\n      var materials = [];\n\n      for (var i = 0, l = keys.length; i < l; i++) {\n        var id = instanceMaterials[keys[i]];\n\n        if (id === undefined) {\n          console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);\n          materials.push(fallbackMaterial);\n        } else {\n          materials.push(getMaterial(id));\n        }\n      }\n\n      return materials;\n    }\n\n    function buildObjects(geometries, instanceMaterials) {\n      var objects = [];\n\n      for (var type in geometries) {\n        var geometry = geometries[type];\n        var materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials); // handle case if no materials are defined\n\n        if (materials.length === 0) {\n          if (type === 'lines' || type === 'linestrips') {\n            materials.push(new LineBasicMaterial());\n          } else {\n            materials.push(new MeshPhongMaterial());\n          }\n        } // regard skinning\n\n\n        var skinning = geometry.data.attributes.skinIndex !== undefined;\n\n        if (skinning) {\n          for (var i = 0, l = materials.length; i < l; i++) {\n            materials[i].skinning = true;\n          }\n        } // choose between a single or multi materials (material array)\n\n\n        var material = materials.length === 1 ? materials[0] : materials; // now create a specific 3D object\n\n        var object;\n\n        switch (type) {\n          case 'lines':\n            object = new LineSegments(geometry.data, material);\n            break;\n\n          case 'linestrips':\n            object = new Line(geometry.data, material);\n            break;\n\n          case 'triangles':\n          case 'polylist':\n            if (skinning) {\n              object = new SkinnedMesh(geometry.data, material);\n            } else {\n              object = new Mesh(geometry.data, material);\n            }\n\n            break;\n        }\n\n        objects.push(object);\n      }\n\n      return objects;\n    }\n\n    function hasNode(id) {\n      return library.nodes[id] !== undefined;\n    }\n\n    function getNode(id) {\n      return getBuild(library.nodes[id], buildNode);\n    } // visual scenes\n\n\n    function parseVisualScene(xml) {\n      var data = {\n        name: xml.getAttribute('name'),\n        children: []\n      };\n      prepareNodes(xml);\n      var elements = getElementsByTagName(xml, 'node');\n\n      for (var i = 0; i < elements.length; i++) {\n        data.children.push(parseNode(elements[i]));\n      }\n\n      library.visualScenes[xml.getAttribute('id')] = data;\n    }\n\n    function buildVisualScene(data) {\n      var group = new Group();\n      group.name = data.name;\n      var children = data.children;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        group.add(getNode(child.id));\n      }\n\n      return group;\n    }\n\n    function hasVisualScene(id) {\n      return library.visualScenes[id] !== undefined;\n    }\n\n    function getVisualScene(id) {\n      return getBuild(library.visualScenes[id], buildVisualScene);\n    } // scenes\n\n\n    function parseScene(xml) {\n      var instance = getElementsByTagName(xml, 'instance_visual_scene')[0];\n      return getVisualScene(parseId(instance.getAttribute('url')));\n    }\n\n    function setupAnimations() {\n      var clips = library.clips;\n\n      if (isEmpty(clips) === true) {\n        if (isEmpty(library.animations) === false) {\n          // if there are animations but no clips, we create a default clip for playback\n          var tracks = [];\n\n          for (var id in library.animations) {\n            var animationTracks = getAnimation(id);\n\n            for (var i = 0, l = animationTracks.length; i < l; i++) {\n              tracks.push(animationTracks[i]);\n            }\n          }\n\n          animations.push(new AnimationClip('default', -1, tracks));\n        }\n      } else {\n        for (var _id in clips) {\n          animations.push(getAnimationClip(_id));\n        }\n      }\n    } // convert the parser error element into text with each child elements text\n    // separated by new lines.\n\n\n    function parserErrorToText(parserError) {\n      var result = '';\n      var stack = [parserError];\n\n      while (stack.length) {\n        var node = stack.shift();\n\n        if (node.nodeType === Node.TEXT_NODE) {\n          result += node.textContent;\n        } else {\n          result += '\\n';\n          stack.push.apply(stack, node.childNodes);\n        }\n      }\n\n      return result.trim();\n    }\n\n    if (text.length === 0) {\n      return {\n        scene: new Scene()\n      };\n    }\n\n    var xml = new DOMParser().parseFromString(text, 'application/xml');\n    var collada = getElementsByTagName(xml, 'COLLADA')[0];\n    var parserError = xml.getElementsByTagName('parsererror')[0];\n\n    if (parserError !== undefined) {\n      // Chrome will return parser error with a div in it\n      var errorElement = getElementsByTagName(parserError, 'div')[0];\n      var errorText;\n\n      if (errorElement) {\n        errorText = errorElement.textContent;\n      } else {\n        errorText = parserErrorToText(parserError);\n      }\n\n      console.error('THREE.ColladaLoader: Failed to parse collada file.\\n', errorText);\n      return null;\n    } // metadata\n\n\n    var version = collada.getAttribute('version');\n    console.log('THREE.ColladaLoader: File version', version);\n    var asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);\n    var textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    var tgaLoader;\n\n    if (TGALoader) {\n      tgaLoader = new TGALoader(this.manager);\n      tgaLoader.setPath(this.resourcePath || path);\n    } //\n\n\n    var animations = [];\n    var kinematics = {};\n    var count = 0; //\n\n    var library = {\n      animations: {},\n      clips: {},\n      controllers: {},\n      images: {},\n      effects: {},\n      materials: {},\n      cameras: {},\n      lights: {},\n      geometries: {},\n      nodes: {},\n      visualScenes: {},\n      kinematicsModels: {},\n      physicsModels: {},\n      kinematicsScenes: {}\n    };\n    parseLibrary(collada, 'library_animations', 'animation', parseAnimation);\n    parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);\n    parseLibrary(collada, 'library_controllers', 'controller', parseController);\n    parseLibrary(collada, 'library_images', 'image', parseImage);\n    parseLibrary(collada, 'library_effects', 'effect', parseEffect);\n    parseLibrary(collada, 'library_materials', 'material', parseMaterial);\n    parseLibrary(collada, 'library_cameras', 'camera', parseCamera);\n    parseLibrary(collada, 'library_lights', 'light', parseLight);\n    parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);\n    parseLibrary(collada, 'library_nodes', 'node', parseNode);\n    parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);\n    parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);\n    parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);\n    parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);\n    buildLibrary(library.animations, buildAnimation);\n    buildLibrary(library.clips, buildAnimationClip);\n    buildLibrary(library.controllers, buildController);\n    buildLibrary(library.images, buildImage);\n    buildLibrary(library.effects, buildEffect);\n    buildLibrary(library.materials, buildMaterial);\n    buildLibrary(library.cameras, buildCamera);\n    buildLibrary(library.lights, buildLight);\n    buildLibrary(library.geometries, buildGeometry);\n    buildLibrary(library.visualScenes, buildVisualScene);\n    setupAnimations();\n    setupKinematics();\n    var scene = parseScene(getElementsByTagName(collada, 'scene')[0]);\n    scene.animations = animations;\n\n    if (asset.upAxis === 'Z_UP') {\n      scene.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n    }\n\n    scene.scale.multiplyScalar(asset.unit);\n    return {\n      get animations() {\n        console.warn('THREE.ColladaLoader: Please access animations over scene.animations now.');\n        return animations;\n      },\n\n      kinematics: kinematics,\n      library: library,\n      scene: scene\n    };\n  }\n});\nexport { ColladaLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","Vector3","Quaternion","Matrix4","MeshBasicMaterial","Scene","TextureLoader","Euler","MathUtils","AnimationClip","VectorKeyframeTrack","QuaternionKeyframeTrack","MeshLambertMaterial","MeshPhongMaterial","DoubleSide","PerspectiveCamera","OrthographicCamera","Color","AmbientLight","SpotLight","PointLight","DirectionalLight","BufferGeometry","Float32BufferAttribute","Skeleton","Bone","Group","LineBasicMaterial","SkinnedMesh","Mesh","Line","LineSegments","RepeatWrapping","ClampToEdgeWrapping","TGALoader","ColladaLoader","manager","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","options","convertUpAxis","value","warn","getElementsByTagName","xml","name","array","childNodes","i","l","length","child","nodeName","push","parseStrings","parts","trim","split","Array","parseFloats","parseFloat","parseInts","parseInt","parseId","substring","generateId","count","isEmpty","object","keys","parseAsset","unit","parseAssetUnit","upAxis","parseAssetUpAxis","undefined","hasAttribute","getAttribute","textContent","parseLibrary","libraryName","parser","library","elements","buildLibrary","data","builder","build","getBuild","parseAnimation","sources","samplers","channels","hasChildren","nodeType","id","parseSource","parseAnimationSampler","parseAnimationChannel","log","animations","generateUUID","inputs","semantic","target","shift","sid","arraySyntax","indexOf","memberSyntax","member","indices","replace","sampler","buildAnimation","tracks","hasOwnProperty","channel","inputId","INPUT","outputId","OUTPUT","inputSource","outputSource","animation","buildAnimationChannel","createKeyframeTracks","getAnimation","node","nodes","object3D","getNode","transform","transforms","defaultMatrix","matrix","clone","transpose","time","stride","il","j","jl","index","keyframes","prepareAnimationData","uuid","sort","ascending","transformAnimationData","a","b","position","scale","quaternion","times","positionData","quaternionData","scaleData","keyframe","fromArray","decompose","x","y","z","w","property","defaultValue","empty","createMissingKeyframes","prev","next","getPrev","getNext","interpolate","key","parseAnimationClip","start","end","clips","buildAnimationClip","duration","animationTracks","getAnimationClip","parseController","skin","parseSkin","controllers","bindShapeMatrix","joints","parseJoints","vertexWeights","parseVertexWeights","offset","vcount","v","buildController","geometry","geometries","buildSkin","skinIndices","skinWeights","weights","BONE_LIMIT","jointOffset","JOINT","weightOffset","WEIGHT","jointSource","inverseSource","INV_BIND_MATRIX","jointCount","vertexSkinData","skinIndex","weightId","skinWeight","weight","descending","d","bindMatrix","identity","boneInverse","getController","parseImage","init_from","images","buildImage","getImage","parseEffect","profile","parseEffectProfileCOMMON","effects","surfaces","parseEffectNewparam","technique","parseEffectTechnique","extra","parseEffectExtra","parseEffectSurface","parseEffectSampler","source","type","parameters","parseEffectParameters","parseEffectParameter","opaque","parseEffectParameterTexture","parseEffectParameterTextureExtra","parseEffectParameterTextureExtraTechnique","toUpperCase","parseEffectExtraTechnique","buildEffect","getEffect","parseMaterial","materials","getTextureLoader","image","extension","slice","lastIndexOf","toLowerCase","tgaLoader","textureLoader","buildMaterial","effect","material","getTexture","textureObject","surface","texture","wrapS","wrapU","wrapT","wrapV","set","offsetU","offsetV","repeat","repeatU","repeatV","parameter","color","map","specular","specularMap","normalMap","lightMap","float","shininess","emissive","emissiveMap","transparent","transparency","opacity","double_sided","side","getMaterial","parseCamera","optics","parseCameraOptics","cameras","parseCameraTechnique","parseCameraParameters","buildCamera","camera","yfov","aspect_ratio","znear","zfar","ymag","xmag","aspectRatio","getCamera","parseLight","parseLightTechnique","lights","parseLightParameters","falloffAngle","f","distance","Math","sqrt","buildLight","light","copy","getLight","parseGeometry","vertices","primitives","mesh","parseGeometryVertices","parseGeometryPrimitive","accessor","primitive","hasUV","inputname","max","p","groupPrimitives","checkUVCoordinates","uvsNeedsFix","buildGeometry","groupedPrimitives","primitiveType","buildGeometryType","normal","uv","uv2","materialKeys","g","vc","addGroup","input","prevLength","buildGeometryData","setAttribute","pushVector","sourceStride","sourceArray","c","k","kl","getGeometry","parseKinematicsModel","links","parseKinematicsTechniqueCommon","kinematicsModels","buildKinematicsModel","getKinematicsModel","parseKinematicsJoint","parseKinematicsLink","parseKinematicsJointParameter","axis","limits","min","static","zeroPosition","middlePosition","attachments","parseKinematicsAttachment","parseKinematicsTransform","joint","pop","obj","angle","degToRad","parsePhysicsModel","rigidBodies","parsePhysicsRigidBody","physicsModels","parsePhysicsTechniqueCommon","inertia","mass","parseKinematicsScene","bindJointAxis","parseKinematicsBindJointAxis","kinematicsScenes","param","tmpJointIndex","jointIndex","substr","buildKinematicsScene","getKinematicsScene","setupKinematics","kinematicsModelId","kinematicsSceneId","visualSceneId","visualScenes","kinematicsModel","kinematicsScene","visualScene","getVisualScene","jointMap","targetElement","collada","querySelector","parentVisualElement","parentElement","connect","visualElement","visualElementName","traverse","buildTransformList","m0","kinematics","getJointValue","jointData","setJointValue","multiply","makeRotationAxis","makeTranslation","vector","prepareNodes","element","parseNode","instanceCameras","instanceControllers","instanceLights","instanceGeometries","instanceNodes","parseNodeInstance","hasNode","skeletons","instances","instance","symbol","buildSkeleton","boneData","sortedBoneData","skeleton","root","buildBoneHierarchy","hasVisualScene","children","bone","processed","bones","boneInverses","isBone","buildNode","objects","instanceCamera","controller","newObjects","buildObjects","isSkinnedMesh","bind","normalizeSkinWeights","instanceLight","add","fallbackMaterial","resolveMaterialBinding","instanceMaterials","skinning","attributes","parseVisualScene","buildVisualScene","group","parseScene","setupAnimations","parserErrorToText","parserError","result","stack","Node","TEXT_NODE","apply","scene","DOMParser","parseFromString","errorElement","errorText","version","asset","resourcePath","setCrossOrigin","crossOrigin","setFromEuler","PI","multiplyScalar"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/loaders/ColladaLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, Vector3, Quaternion, Matrix4, MeshBasicMaterial, Scene, TextureLoader, Euler, MathUtils, AnimationClip, VectorKeyframeTrack, QuaternionKeyframeTrack, MeshLambertMaterial, MeshPhongMaterial, DoubleSide, PerspectiveCamera, OrthographicCamera, Color, AmbientLight, SpotLight, PointLight, DirectionalLight, BufferGeometry, Float32BufferAttribute, Skeleton, Bone, Group, LineBasicMaterial, SkinnedMesh, Mesh, Line, LineSegments, RepeatWrapping, ClampToEdgeWrapping } from 'three';\nimport { TGALoader } from './TGALoader.js';\n\nvar ColladaLoader = function (manager) {\n  Loader.call(this, manager);\n};\n\nColladaLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: ColladaLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  options: {\n    set convertUpAxis(value) {\n      console.warn('THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.');\n    }\n\n  },\n  parse: function (text, path) {\n    function getElementsByTagName(xml, name) {\n      // Non recursive xml.getElementsByTagName() ...\n      var array = [];\n      var childNodes = xml.childNodes;\n\n      for (let i = 0, l = childNodes.length; i < l; i++) {\n        var child = childNodes[i];\n\n        if (child.nodeName === name) {\n          array.push(child);\n        }\n      }\n\n      return array;\n    }\n\n    function parseStrings(text) {\n      if (text.length === 0) return [];\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (let i = 0, l = parts.length; i < l; i++) {\n        array[i] = parts[i];\n      }\n\n      return array;\n    }\n\n    function parseFloats(text) {\n      if (text.length === 0) return [];\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (let i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseFloat(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseInts(text) {\n      if (text.length === 0) return [];\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (let i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseInt(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseId(text) {\n      return text.substring(1);\n    }\n\n    function generateId() {\n      return 'three_default_' + count++;\n    }\n\n    function isEmpty(object) {\n      return Object.keys(object).length === 0;\n    } // asset\n\n\n    function parseAsset(xml) {\n      return {\n        unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),\n        upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])\n      };\n    }\n\n    function parseAssetUnit(xml) {\n      if (xml !== undefined && xml.hasAttribute('meter') === true) {\n        return parseFloat(xml.getAttribute('meter'));\n      } else {\n        return 1; // default 1 meter\n      }\n    }\n\n    function parseAssetUpAxis(xml) {\n      return xml !== undefined ? xml.textContent : 'Y_UP';\n    } // library\n\n\n    function parseLibrary(xml, libraryName, nodeName, parser) {\n      var library = getElementsByTagName(xml, libraryName)[0];\n\n      if (library !== undefined) {\n        var elements = getElementsByTagName(library, nodeName);\n\n        for (let i = 0; i < elements.length; i++) {\n          parser(elements[i]);\n        }\n      }\n    }\n\n    function buildLibrary(data, builder) {\n      for (let name in data) {\n        var object = data[name];\n        object.build = builder(data[name]);\n      }\n    } // get\n\n\n    function getBuild(data, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data);\n      return data.build;\n    } // animation\n\n\n    function parseAnimation(xml) {\n      var data = {\n        sources: {},\n        samplers: {},\n        channels: {}\n      };\n      var hasChildren = false;\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        var id;\n\n        switch (child.nodeName) {\n          case 'source':\n            id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'sampler':\n            id = child.getAttribute('id');\n            data.samplers[id] = parseAnimationSampler(child);\n            break;\n\n          case 'channel':\n            id = child.getAttribute('target');\n            data.channels[id] = parseAnimationChannel(child);\n            break;\n\n          case 'animation':\n            // hierarchy of related animations\n            parseAnimation(child);\n            hasChildren = true;\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      if (hasChildren === false) {\n        // since 'id' attributes can be optional, it's necessary to generate a UUID for unqiue assignment\n        library.animations[xml.getAttribute('id') || MathUtils.generateUUID()] = data;\n      }\n    }\n\n    function parseAnimationSampler(xml) {\n      var data = {\n        inputs: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var id = parseId(child.getAttribute('source'));\n            var semantic = child.getAttribute('semantic');\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseAnimationChannel(xml) {\n      var data = {};\n      var target = xml.getAttribute('target'); // parsing SID Addressing Syntax\n\n      var parts = target.split('/');\n      var id = parts.shift();\n      var sid = parts.shift(); // check selection syntax\n\n      var arraySyntax = sid.indexOf('(') !== -1;\n      var memberSyntax = sid.indexOf('.') !== -1;\n\n      if (memberSyntax) {\n        //  member selection access\n        parts = sid.split('.');\n        sid = parts.shift();\n        data.member = parts.shift();\n      } else if (arraySyntax) {\n        // array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n        var indices = sid.split('(');\n        sid = indices.shift();\n\n        for (let i = 0; i < indices.length; i++) {\n          indices[i] = parseInt(indices[i].replace(/\\)/, ''));\n        }\n\n        data.indices = indices;\n      }\n\n      data.id = id;\n      data.sid = sid;\n      data.arraySyntax = arraySyntax;\n      data.memberSyntax = memberSyntax;\n      data.sampler = parseId(xml.getAttribute('source'));\n      return data;\n    }\n\n    function buildAnimation(data) {\n      var tracks = [];\n      var channels = data.channels;\n      var samplers = data.samplers;\n      var sources = data.sources;\n\n      for (let target in channels) {\n        if (channels.hasOwnProperty(target)) {\n          var channel = channels[target];\n          var sampler = samplers[channel.sampler];\n          var inputId = sampler.inputs.INPUT;\n          var outputId = sampler.inputs.OUTPUT;\n          var inputSource = sources[inputId];\n          var outputSource = sources[outputId];\n          var animation = buildAnimationChannel(channel, inputSource, outputSource);\n          createKeyframeTracks(animation, tracks);\n        }\n      }\n\n      return tracks;\n    }\n\n    function getAnimation(id) {\n      return getBuild(library.animations[id], buildAnimation);\n    }\n\n    function buildAnimationChannel(channel, inputSource, outputSource) {\n      var node = library.nodes[channel.id];\n      var object3D = getNode(node.id);\n      var transform = node.transforms[channel.sid];\n      var defaultMatrix = node.matrix.clone().transpose();\n      var time, stride;\n      var i, il, j, jl;\n      var data = {}; // the collada spec allows the animation of data in various ways.\n      // depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n      switch (transform) {\n        case 'matrix':\n          for (i = 0, il = inputSource.array.length; i < il; i++) {\n            time = inputSource.array[i];\n            stride = i * outputSource.stride;\n            if (data[time] === undefined) data[time] = {};\n\n            if (channel.arraySyntax === true) {\n              var value = outputSource.array[stride];\n              var index = channel.indices[0] + 4 * channel.indices[1];\n              data[time][index] = value;\n            } else {\n              for (j = 0, jl = outputSource.stride; j < jl; j++) {\n                data[time][j] = outputSource.array[stride + j];\n              }\n            }\n          }\n\n          break;\n\n        case 'translate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n\n        case 'rotate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n\n        case 'scale':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n      }\n\n      var keyframes = prepareAnimationData(data, defaultMatrix);\n      var animation = {\n        name: object3D.uuid,\n        keyframes: keyframes\n      };\n      return animation;\n    }\n\n    function prepareAnimationData(data, defaultMatrix) {\n      var keyframes = []; // transfer data into a sortable array\n\n      for (let time in data) {\n        keyframes.push({\n          time: parseFloat(time),\n          value: data[time]\n        });\n      } // ensure keyframes are sorted by time\n\n\n      keyframes.sort(ascending); // now we clean up all animation data, so we can use them for keyframe tracks\n\n      for (let i = 0; i < 16; i++) {\n        transformAnimationData(keyframes, i, defaultMatrix.elements[i]);\n      }\n\n      return keyframes; // array sort function\n\n      function ascending(a, b) {\n        return a.time - b.time;\n      }\n    }\n\n    var position = new Vector3();\n    var scale = new Vector3();\n    var quaternion = new Quaternion();\n\n    function createKeyframeTracks(animation, tracks) {\n      var keyframes = animation.keyframes;\n      var name = animation.name;\n      var times = [];\n      var positionData = [];\n      var quaternionData = [];\n      var scaleData = [];\n\n      for (let i = 0, l = keyframes.length; i < l; i++) {\n        var keyframe = keyframes[i];\n        var time = keyframe.time;\n        var value = keyframe.value;\n        matrix.fromArray(value).transpose();\n        matrix.decompose(position, quaternion, scale);\n        times.push(time);\n        positionData.push(position.x, position.y, position.z);\n        quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n        scaleData.push(scale.x, scale.y, scale.z);\n      }\n\n      if (positionData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.position', times, positionData));\n      if (quaternionData.length > 0) tracks.push(new QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));\n      if (scaleData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.scale', times, scaleData));\n      return tracks;\n    }\n\n    function transformAnimationData(keyframes, property, defaultValue) {\n      var keyframe;\n      var empty = true;\n      var i, l; // check, if values of a property are missing in our keyframes\n\n      for (i = 0, l = keyframes.length; i < l; i++) {\n        keyframe = keyframes[i];\n\n        if (keyframe.value[property] === undefined) {\n          keyframe.value[property] = null; // mark as missing\n        } else {\n          empty = false;\n        }\n      }\n\n      if (empty === true) {\n        // no values at all, so we set a default value\n        for (i = 0, l = keyframes.length; i < l; i++) {\n          keyframe = keyframes[i];\n          keyframe.value[property] = defaultValue;\n        }\n      } else {\n        // filling gaps\n        createMissingKeyframes(keyframes, property);\n      }\n    }\n\n    function createMissingKeyframes(keyframes, property) {\n      var prev, next;\n\n      for (let i = 0, l = keyframes.length; i < l; i++) {\n        var keyframe = keyframes[i];\n\n        if (keyframe.value[property] === null) {\n          prev = getPrev(keyframes, i, property);\n          next = getNext(keyframes, i, property);\n\n          if (prev === null) {\n            keyframe.value[property] = next.value[property];\n            continue;\n          }\n\n          if (next === null) {\n            keyframe.value[property] = prev.value[property];\n            continue;\n          }\n\n          interpolate(keyframe, prev, next, property);\n        }\n      }\n    }\n\n    function getPrev(keyframes, i, property) {\n      while (i >= 0) {\n        var keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i--;\n      }\n\n      return null;\n    }\n\n    function getNext(keyframes, i, property) {\n      while (i < keyframes.length) {\n        var keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i++;\n      }\n\n      return null;\n    }\n\n    function interpolate(key, prev, next, property) {\n      if (next.time - prev.time === 0) {\n        key.value[property] = prev.value[property];\n        return;\n      }\n\n      key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];\n    } // animation clips\n\n\n    function parseAnimationClip(xml) {\n      var data = {\n        name: xml.getAttribute('id') || 'default',\n        start: parseFloat(xml.getAttribute('start') || 0),\n        end: parseFloat(xml.getAttribute('end') || 0),\n        animations: []\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'instance_animation':\n            data.animations.push(parseId(child.getAttribute('url')));\n            break;\n        }\n      }\n\n      library.clips[xml.getAttribute('id')] = data;\n    }\n\n    function buildAnimationClip(data) {\n      var tracks = [];\n      var name = data.name;\n      var duration = data.end - data.start || -1;\n      var animations = data.animations;\n\n      for (let i = 0, il = animations.length; i < il; i++) {\n        var animationTracks = getAnimation(animations[i]);\n\n        for (let j = 0, jl = animationTracks.length; j < jl; j++) {\n          tracks.push(animationTracks[j]);\n        }\n      }\n\n      return new AnimationClip(name, duration, tracks);\n    }\n\n    function getAnimationClip(id) {\n      return getBuild(library.clips[id], buildAnimationClip);\n    } // controller\n\n\n    function parseController(xml) {\n      var data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'skin':\n            // there is exactly one skin per controller\n            data.id = parseId(child.getAttribute('source'));\n            data.skin = parseSkin(child);\n            break;\n\n          case 'morph':\n            data.id = parseId(child.getAttribute('source'));\n            console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');\n            break;\n        }\n      }\n\n      library.controllers[xml.getAttribute('id')] = data;\n    }\n\n    function parseSkin(xml) {\n      var data = {\n        sources: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'bind_shape_matrix':\n            data.bindShapeMatrix = parseFloats(child.textContent);\n            break;\n\n          case 'source':\n            var id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'joints':\n            data.joints = parseJoints(child);\n            break;\n\n          case 'vertex_weights':\n            data.vertexWeights = parseVertexWeights(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseJoints(xml) {\n      var data = {\n        inputs: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var semantic = child.getAttribute('semantic');\n            var id = parseId(child.getAttribute('source'));\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseVertexWeights(xml) {\n      var data = {\n        inputs: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var semantic = child.getAttribute('semantic');\n            var id = parseId(child.getAttribute('source'));\n            var offset = parseInt(child.getAttribute('offset'));\n            data.inputs[semantic] = {\n              id: id,\n              offset: offset\n            };\n            break;\n\n          case 'vcount':\n            data.vcount = parseInts(child.textContent);\n            break;\n\n          case 'v':\n            data.v = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildController(data) {\n      var build = {\n        id: data.id\n      };\n      var geometry = library.geometries[build.id];\n\n      if (data.skin !== undefined) {\n        build.skin = buildSkin(data.skin); // we enhance the 'sources' property of the corresponding geometry with our skin data\n\n        geometry.sources.skinIndices = build.skin.indices;\n        geometry.sources.skinWeights = build.skin.weights;\n      }\n\n      return build;\n    }\n\n    function buildSkin(data) {\n      var BONE_LIMIT = 4;\n      var build = {\n        joints: [],\n        // this must be an array to preserve the joint order\n        indices: {\n          array: [],\n          stride: BONE_LIMIT\n        },\n        weights: {\n          array: [],\n          stride: BONE_LIMIT\n        }\n      };\n      var sources = data.sources;\n      var vertexWeights = data.vertexWeights;\n      var vcount = vertexWeights.vcount;\n      var v = vertexWeights.v;\n      var jointOffset = vertexWeights.inputs.JOINT.offset;\n      var weightOffset = vertexWeights.inputs.WEIGHT.offset;\n      var jointSource = data.sources[data.joints.inputs.JOINT];\n      var inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];\n      var weights = sources[vertexWeights.inputs.WEIGHT.id].array;\n      var stride = 0;\n      var i, j, l; // procces skin data for each vertex\n\n      for (i = 0, l = vcount.length; i < l; i++) {\n        var jointCount = vcount[i]; // this is the amount of joints that affect a single vertex\n\n        var vertexSkinData = [];\n\n        for (j = 0; j < jointCount; j++) {\n          var skinIndex = v[stride + jointOffset];\n          var weightId = v[stride + weightOffset];\n          var skinWeight = weights[weightId];\n          vertexSkinData.push({\n            index: skinIndex,\n            weight: skinWeight\n          });\n          stride += 2;\n        } // we sort the joints in descending order based on the weights.\n        // this ensures, we only procced the most important joints of the vertex\n\n\n        vertexSkinData.sort(descending); // now we provide for each vertex a set of four index and weight values.\n        // the order of the skin data matches the order of vertices\n\n        for (j = 0; j < BONE_LIMIT; j++) {\n          var d = vertexSkinData[j];\n\n          if (d !== undefined) {\n            build.indices.array.push(d.index);\n            build.weights.array.push(d.weight);\n          } else {\n            build.indices.array.push(0);\n            build.weights.array.push(0);\n          }\n        }\n      } // setup bind matrix\n\n\n      if (data.bindShapeMatrix) {\n        build.bindMatrix = new Matrix4().fromArray(data.bindShapeMatrix).transpose();\n      } else {\n        build.bindMatrix = new Matrix4().identity();\n      } // process bones and inverse bind matrix data\n\n\n      for (i = 0, l = jointSource.array.length; i < l; i++) {\n        var name = jointSource.array[i];\n        var boneInverse = new Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();\n        build.joints.push({\n          name: name,\n          boneInverse: boneInverse\n        });\n      }\n\n      return build; // array sort function\n\n      function descending(a, b) {\n        return b.weight - a.weight;\n      }\n    }\n\n    function getController(id) {\n      return getBuild(library.controllers[id], buildController);\n    } // image\n\n\n    function parseImage(xml) {\n      var data = {\n        init_from: getElementsByTagName(xml, 'init_from')[0].textContent\n      };\n      library.images[xml.getAttribute('id')] = data;\n    }\n\n    function buildImage(data) {\n      if (data.build !== undefined) return data.build;\n      return data.init_from;\n    }\n\n    function getImage(id) {\n      var data = library.images[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildImage);\n      }\n\n      console.warn(\"THREE.ColladaLoader: Couldn't find image with ID:\", id);\n      return null;\n    } // effect\n\n\n    function parseEffect(xml) {\n      var data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'profile_COMMON':\n            data.profile = parseEffectProfileCOMMON(child);\n            break;\n        }\n      }\n\n      library.effects[xml.getAttribute('id')] = data;\n    }\n\n    function parseEffectProfileCOMMON(xml) {\n      var data = {\n        surfaces: {},\n        samplers: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'newparam':\n            parseEffectNewparam(child, data);\n            break;\n\n          case 'technique':\n            data.technique = parseEffectTechnique(child);\n            break;\n\n          case 'extra':\n            data.extra = parseEffectExtra(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectNewparam(xml, data) {\n      var sid = xml.getAttribute('sid');\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'surface':\n            data.surfaces[sid] = parseEffectSurface(child);\n            break;\n\n          case 'sampler2D':\n            data.samplers[sid] = parseEffectSampler(child);\n            break;\n        }\n      }\n    }\n\n    function parseEffectSurface(xml) {\n      var data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'init_from':\n            data.init_from = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectSampler(xml) {\n      var data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'source':\n            data.source = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectTechnique(xml) {\n      var data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'constant':\n          case 'lambert':\n          case 'blinn':\n          case 'phong':\n            data.type = child.nodeName;\n            data.parameters = parseEffectParameters(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameters(xml) {\n      var data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'emission':\n          case 'diffuse':\n          case 'specular':\n          case 'bump':\n          case 'ambient':\n          case 'shininess':\n          case 'transparency':\n            data[child.nodeName] = parseEffectParameter(child);\n            break;\n\n          case 'transparent':\n            data[child.nodeName] = {\n              opaque: child.getAttribute('opaque'),\n              data: parseEffectParameter(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameter(xml) {\n      var data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'color':\n            data[child.nodeName] = parseFloats(child.textContent);\n            break;\n\n          case 'float':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case 'texture':\n            data[child.nodeName] = {\n              id: child.getAttribute('texture'),\n              extra: parseEffectParameterTexture(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTexture(xml) {\n      var data = {\n        technique: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'extra':\n            parseEffectParameterTextureExtra(child, data);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTextureExtra(xml, data) {\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique':\n            parseEffectParameterTextureExtraTechnique(child, data);\n            break;\n        }\n      }\n    }\n\n    function parseEffectParameterTextureExtraTechnique(xml, data) {\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'repeatU':\n          case 'repeatV':\n          case 'offsetU':\n          case 'offsetV':\n            data.technique[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case 'wrapU':\n          case 'wrapV':\n            // some files have values for wrapU/wrapV which become NaN via parseInt\n            if (child.textContent.toUpperCase() === 'TRUE') {\n              data.technique[child.nodeName] = 1;\n            } else if (child.textContent.toUpperCase() === 'FALSE') {\n              data.technique[child.nodeName] = 0;\n            } else {\n              data.technique[child.nodeName] = parseInt(child.textContent);\n            }\n\n            break;\n        }\n      }\n    }\n\n    function parseEffectExtra(xml) {\n      var data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique':\n            data.technique = parseEffectExtraTechnique(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectExtraTechnique(xml) {\n      var data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'double_sided':\n            data[child.nodeName] = parseInt(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildEffect(data) {\n      return data;\n    }\n\n    function getEffect(id) {\n      return getBuild(library.effects[id], buildEffect);\n    } // material\n\n\n    function parseMaterial(xml) {\n      var data = {\n        name: xml.getAttribute('name')\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'instance_effect':\n            data.url = parseId(child.getAttribute('url'));\n            break;\n        }\n      }\n\n      library.materials[xml.getAttribute('id')] = data;\n    }\n\n    function getTextureLoader(image) {\n      var loader;\n      var extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2); // http://www.jstips.co/en/javascript/get-file-extension/\n\n      extension = extension.toLowerCase();\n\n      switch (extension) {\n        case 'tga':\n          loader = tgaLoader;\n          break;\n\n        default:\n          loader = textureLoader;\n      }\n\n      return loader;\n    }\n\n    function buildMaterial(data) {\n      var effect = getEffect(data.url);\n      var technique = effect.profile.technique;\n      var extra = effect.profile.extra;\n      var material;\n\n      switch (technique.type) {\n        case 'phong':\n        case 'blinn':\n          material = new MeshPhongMaterial();\n          break;\n\n        case 'lambert':\n          material = new MeshLambertMaterial();\n          break;\n\n        default:\n          material = new MeshBasicMaterial();\n          break;\n      }\n\n      material.name = data.name || '';\n\n      function getTexture(textureObject) {\n        var sampler = effect.profile.samplers[textureObject.id];\n        var image = null; // get image\n\n        if (sampler !== undefined) {\n          var surface = effect.profile.surfaces[sampler.source];\n          image = getImage(surface.init_from);\n        } else {\n          console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');\n          image = getImage(textureObject.id);\n        } // create texture if image is avaiable\n\n\n        if (image !== null) {\n          var loader = getTextureLoader(image);\n\n          if (loader !== undefined) {\n            var texture = loader.load(image);\n            var extra = textureObject.extra;\n\n            if (extra !== undefined && extra.technique !== undefined && isEmpty(extra.technique) === false) {\n              var technique = extra.technique;\n              texture.wrapS = technique.wrapU ? RepeatWrapping : ClampToEdgeWrapping;\n              texture.wrapT = technique.wrapV ? RepeatWrapping : ClampToEdgeWrapping;\n              texture.offset.set(technique.offsetU || 0, technique.offsetV || 0);\n              texture.repeat.set(technique.repeatU || 1, technique.repeatV || 1);\n            } else {\n              texture.wrapS = RepeatWrapping;\n              texture.wrapT = RepeatWrapping;\n            }\n\n            return texture;\n          } else {\n            console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);\n            return null;\n          }\n        } else {\n          console.warn(\"THREE.ColladaLoader: Couldn't create texture with ID:\", textureObject.id);\n          return null;\n        }\n      }\n\n      var parameters = technique.parameters;\n\n      for (let key in parameters) {\n        var parameter = parameters[key];\n\n        switch (key) {\n          case 'diffuse':\n            if (parameter.color) material.color.fromArray(parameter.color);\n            if (parameter.texture) material.map = getTexture(parameter.texture);\n            break;\n\n          case 'specular':\n            if (parameter.color && material.specular) material.specular.fromArray(parameter.color);\n            if (parameter.texture) material.specularMap = getTexture(parameter.texture);\n            break;\n\n          case 'bump':\n            if (parameter.texture) material.normalMap = getTexture(parameter.texture);\n            break;\n\n          case 'ambient':\n            if (parameter.texture) material.lightMap = getTexture(parameter.texture);\n            break;\n\n          case 'shininess':\n            if (parameter.float && material.shininess) material.shininess = parameter.float;\n            break;\n\n          case 'emission':\n            if (parameter.color && material.emissive) material.emissive.fromArray(parameter.color);\n            if (parameter.texture) material.emissiveMap = getTexture(parameter.texture);\n            break;\n        }\n      } //\n\n\n      var transparent = parameters['transparent'];\n      var transparency = parameters['transparency']; // <transparency> does not exist but <transparent>\n\n      if (transparency === undefined && transparent) {\n        transparency = {\n          float: 1\n        };\n      } // <transparent> does not exist but <transparency>\n\n\n      if (transparent === undefined && transparency) {\n        transparent = {\n          opaque: 'A_ONE',\n          data: {\n            color: [1, 1, 1, 1]\n          }\n        };\n      }\n\n      if (transparent && transparency) {\n        // handle case if a texture exists but no color\n        if (transparent.data.texture) {\n          // we do not set an alpha map (see #13792)\n          material.transparent = true;\n        } else {\n          var color = transparent.data.color;\n\n          switch (transparent.opaque) {\n            case 'A_ONE':\n              material.opacity = color[3] * transparency.float;\n              break;\n\n            case 'RGB_ZERO':\n              material.opacity = 1 - color[0] * transparency.float;\n              break;\n\n            case 'A_ZERO':\n              material.opacity = 1 - color[3] * transparency.float;\n              break;\n\n            case 'RGB_ONE':\n              material.opacity = color[0] * transparency.float;\n              break;\n\n            default:\n              console.warn('THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque);\n          }\n\n          if (material.opacity < 1) material.transparent = true;\n        }\n      } //\n\n\n      if (extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1) {\n        material.side = DoubleSide;\n      }\n\n      return material;\n    }\n\n    function getMaterial(id) {\n      return getBuild(library.materials[id], buildMaterial);\n    } // camera\n\n\n    function parseCamera(xml) {\n      var data = {\n        name: xml.getAttribute('name')\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'optics':\n            data.optics = parseCameraOptics(child);\n            break;\n        }\n      }\n\n      library.cameras[xml.getAttribute('id')] = data;\n    }\n\n    function parseCameraOptics(xml) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            return parseCameraTechnique(child);\n        }\n      }\n\n      return {};\n    }\n\n    function parseCameraTechnique(xml) {\n      var data = {};\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'perspective':\n          case 'orthographic':\n            data.technique = child.nodeName;\n            data.parameters = parseCameraParameters(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseCameraParameters(xml) {\n      var data = {};\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'xfov':\n          case 'yfov':\n          case 'xmag':\n          case 'ymag':\n          case 'znear':\n          case 'zfar':\n          case 'aspect_ratio':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildCamera(data) {\n      var camera;\n\n      switch (data.optics.technique) {\n        case 'perspective':\n          camera = new PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n\n        case 'orthographic':\n          var ymag = data.optics.parameters.ymag;\n          var xmag = data.optics.parameters.xmag;\n          var aspectRatio = data.optics.parameters.aspect_ratio;\n          xmag = xmag === undefined ? ymag * aspectRatio : xmag;\n          ymag = ymag === undefined ? xmag / aspectRatio : ymag;\n          xmag *= 0.5;\n          ymag *= 0.5;\n          camera = new OrthographicCamera(-xmag, xmag, ymag, -ymag, // left, right, top, bottom\n          data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n\n        default:\n          camera = new PerspectiveCamera();\n          break;\n      }\n\n      camera.name = data.name || '';\n      return camera;\n    }\n\n    function getCamera(id) {\n      var data = library.cameras[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildCamera);\n      }\n\n      console.warn(\"THREE.ColladaLoader: Couldn't find camera with ID:\", id);\n      return null;\n    } // light\n\n\n    function parseLight(xml) {\n      var data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            data = parseLightTechnique(child);\n            break;\n        }\n      }\n\n      library.lights[xml.getAttribute('id')] = data;\n    }\n\n    function parseLightTechnique(xml) {\n      var data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'directional':\n          case 'point':\n          case 'spot':\n          case 'ambient':\n            data.technique = child.nodeName;\n            data.parameters = parseLightParameters(child);\n        }\n      }\n\n      return data;\n    }\n\n    function parseLightParameters(xml) {\n      var data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'color':\n            var array = parseFloats(child.textContent);\n            data.color = new Color().fromArray(array);\n            break;\n\n          case 'falloff_angle':\n            data.falloffAngle = parseFloat(child.textContent);\n            break;\n\n          case 'quadratic_attenuation':\n            var f = parseFloat(child.textContent);\n            data.distance = f ? Math.sqrt(1 / f) : 0;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildLight(data) {\n      var light;\n\n      switch (data.technique) {\n        case 'directional':\n          light = new DirectionalLight();\n          break;\n\n        case 'point':\n          light = new PointLight();\n          break;\n\n        case 'spot':\n          light = new SpotLight();\n          break;\n\n        case 'ambient':\n          light = new AmbientLight();\n          break;\n      }\n\n      if (data.parameters.color) light.color.copy(data.parameters.color);\n      if (data.parameters.distance) light.distance = data.parameters.distance;\n      return light;\n    }\n\n    function getLight(id) {\n      var data = library.lights[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildLight);\n      }\n\n      console.warn(\"THREE.ColladaLoader: Couldn't find light with ID:\", id);\n      return null;\n    } // geometry\n\n\n    function parseGeometry(xml) {\n      var data = {\n        name: xml.getAttribute('name'),\n        sources: {},\n        vertices: {},\n        primitives: []\n      };\n      var mesh = getElementsByTagName(xml, 'mesh')[0]; // the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n\n      if (mesh === undefined) return;\n\n      for (let i = 0; i < mesh.childNodes.length; i++) {\n        var child = mesh.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        var id = child.getAttribute('id');\n\n        switch (child.nodeName) {\n          case 'source':\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'vertices':\n            // data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n            data.vertices = parseGeometryVertices(child);\n            break;\n\n          case 'polygons':\n            console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);\n            break;\n\n          case 'lines':\n          case 'linestrips':\n          case 'polylist':\n          case 'triangles':\n            data.primitives.push(parseGeometryPrimitive(child));\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      library.geometries[xml.getAttribute('id')] = data;\n    }\n\n    function parseSource(xml) {\n      var data = {\n        array: [],\n        stride: 3\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'float_array':\n            data.array = parseFloats(child.textContent);\n            break;\n\n          case 'Name_array':\n            data.array = parseStrings(child.textContent);\n            break;\n\n          case 'technique_common':\n            var accessor = getElementsByTagName(child, 'accessor')[0];\n\n            if (accessor !== undefined) {\n              data.stride = parseInt(accessor.getAttribute('stride'));\n            }\n\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseGeometryVertices(xml) {\n      var data = {};\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));\n      }\n\n      return data;\n    }\n\n    function parseGeometryPrimitive(xml) {\n      var primitive = {\n        type: xml.nodeName,\n        material: xml.getAttribute('material'),\n        count: parseInt(xml.getAttribute('count')),\n        inputs: {},\n        stride: 0,\n        hasUV: false\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var id = parseId(child.getAttribute('source'));\n            var semantic = child.getAttribute('semantic');\n            var offset = parseInt(child.getAttribute('offset'));\n            var set = parseInt(child.getAttribute('set'));\n            var inputname = set > 0 ? semantic + set : semantic;\n            primitive.inputs[inputname] = {\n              id: id,\n              offset: offset\n            };\n            primitive.stride = Math.max(primitive.stride, offset + 1);\n            if (semantic === 'TEXCOORD') primitive.hasUV = true;\n            break;\n\n          case 'vcount':\n            primitive.vcount = parseInts(child.textContent);\n            break;\n\n          case 'p':\n            primitive.p = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return primitive;\n    }\n\n    function groupPrimitives(primitives) {\n      var build = {};\n\n      for (let i = 0; i < primitives.length; i++) {\n        var primitive = primitives[i];\n        if (build[primitive.type] === undefined) build[primitive.type] = [];\n        build[primitive.type].push(primitive);\n      }\n\n      return build;\n    }\n\n    function checkUVCoordinates(primitives) {\n      var count = 0;\n\n      for (let i = 0, l = primitives.length; i < l; i++) {\n        var primitive = primitives[i];\n\n        if (primitive.hasUV === true) {\n          count++;\n        }\n      }\n\n      if (count > 0 && count < primitives.length) {\n        primitives.uvsNeedsFix = true;\n      }\n    }\n\n    function buildGeometry(data) {\n      var build = {};\n      var sources = data.sources;\n      var vertices = data.vertices;\n      var primitives = data.primitives;\n      if (primitives.length === 0) return {}; // our goal is to create one buffer geometry for a single type of primitives\n      // first, we group all primitives by their type\n\n      var groupedPrimitives = groupPrimitives(primitives);\n\n      for (let type in groupedPrimitives) {\n        var primitiveType = groupedPrimitives[type]; // second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n        checkUVCoordinates(primitiveType); // third, create a buffer geometry for each type of primitives\n\n        build[type] = buildGeometryType(primitiveType, sources, vertices);\n      }\n\n      return build;\n    }\n\n    function buildGeometryType(primitives, sources, vertices) {\n      var build = {};\n      var position = {\n        array: [],\n        stride: 0\n      };\n      var normal = {\n        array: [],\n        stride: 0\n      };\n      var uv = {\n        array: [],\n        stride: 0\n      };\n      var uv2 = {\n        array: [],\n        stride: 0\n      };\n      var color = {\n        array: [],\n        stride: 0\n      };\n      var skinIndex = {\n        array: [],\n        stride: 4\n      };\n      var skinWeight = {\n        array: [],\n        stride: 4\n      };\n      var geometry = new BufferGeometry();\n      var materialKeys = [];\n      var start = 0;\n\n      for (let p = 0; p < primitives.length; p++) {\n        var primitive = primitives[p];\n        var inputs = primitive.inputs; // groups\n\n        var count = 0;\n\n        switch (primitive.type) {\n          case 'lines':\n          case 'linestrips':\n            count = primitive.count * 2;\n            break;\n\n          case 'triangles':\n            count = primitive.count * 3;\n            break;\n\n          case 'polylist':\n            for (let g = 0; g < primitive.count; g++) {\n              var vc = primitive.vcount[g];\n\n              switch (vc) {\n                case 3:\n                  count += 3; // single triangle\n\n                  break;\n\n                case 4:\n                  count += 6; // quad, subdivided into two triangles\n\n                  break;\n\n                default:\n                  count += (vc - 2) * 3; // polylist with more than four vertices\n\n                  break;\n              }\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);\n        }\n\n        geometry.addGroup(start, count, p);\n        start += count; // material\n\n        if (primitive.material) {\n          materialKeys.push(primitive.material);\n        } // geometry data\n\n\n        for (let name in inputs) {\n          var input = inputs[name];\n\n          switch (name) {\n            case 'VERTEX':\n              for (let key in vertices) {\n                var id = vertices[key];\n\n                switch (key) {\n                  case 'POSITION':\n                    var prevLength = position.array.length;\n                    buildGeometryData(primitive, sources[id], input.offset, position.array);\n                    position.stride = sources[id].stride;\n\n                    if (sources.skinWeights && sources.skinIndices) {\n                      buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);\n                      buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);\n                    } // see #3803\n\n\n                    if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {\n                      var count = (position.array.length - prevLength) / position.stride;\n\n                      for (let i = 0; i < count; i++) {\n                        // fill missing uv coordinates\n                        uv.array.push(0, 0);\n                      }\n                    }\n\n                    break;\n\n                  case 'NORMAL':\n                    buildGeometryData(primitive, sources[id], input.offset, normal.array);\n                    normal.stride = sources[id].stride;\n                    break;\n\n                  case 'COLOR':\n                    buildGeometryData(primitive, sources[id], input.offset, color.array);\n                    color.stride = sources[id].stride;\n                    break;\n\n                  case 'TEXCOORD':\n                    buildGeometryData(primitive, sources[id], input.offset, uv.array);\n                    uv.stride = sources[id].stride;\n                    break;\n\n                  case 'TEXCOORD1':\n                    buildGeometryData(primitive, sources[id], input.offset, uv2.array);\n                    uv.stride = sources[id].stride;\n                    break;\n\n                  default:\n                    console.warn('THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key);\n                }\n              }\n\n              break;\n\n            case 'NORMAL':\n              buildGeometryData(primitive, sources[input.id], input.offset, normal.array);\n              normal.stride = sources[input.id].stride;\n              break;\n\n            case 'COLOR':\n              buildGeometryData(primitive, sources[input.id], input.offset, color.array);\n              color.stride = sources[input.id].stride;\n              break;\n\n            case 'TEXCOORD':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv.array);\n              uv.stride = sources[input.id].stride;\n              break;\n\n            case 'TEXCOORD1':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);\n              uv2.stride = sources[input.id].stride;\n              break;\n          }\n        }\n      } // build geometry\n\n\n      if (position.array.length > 0) geometry.setAttribute('position', new Float32BufferAttribute(position.array, position.stride));\n      if (normal.array.length > 0) geometry.setAttribute('normal', new Float32BufferAttribute(normal.array, normal.stride));\n      if (color.array.length > 0) geometry.setAttribute('color', new Float32BufferAttribute(color.array, color.stride));\n      if (uv.array.length > 0) geometry.setAttribute('uv', new Float32BufferAttribute(uv.array, uv.stride));\n      if (uv2.array.length > 0) geometry.setAttribute('uv2', new Float32BufferAttribute(uv2.array, uv2.stride));\n      if (skinIndex.array.length > 0) geometry.setAttribute('skinIndex', new Float32BufferAttribute(skinIndex.array, skinIndex.stride));\n      if (skinWeight.array.length > 0) geometry.setAttribute('skinWeight', new Float32BufferAttribute(skinWeight.array, skinWeight.stride));\n      build.data = geometry;\n      build.type = primitives[0].type;\n      build.materialKeys = materialKeys;\n      return build;\n    }\n\n    function buildGeometryData(primitive, source, offset, array) {\n      var indices = primitive.p;\n      var stride = primitive.stride;\n      var vcount = primitive.vcount;\n\n      function pushVector(i) {\n        var index = indices[i + offset] * sourceStride;\n        var length = index + sourceStride;\n\n        for (; index < length; index++) {\n          array.push(sourceArray[index]);\n        }\n      }\n\n      var sourceArray = source.array;\n      var sourceStride = source.stride;\n\n      if (primitive.vcount !== undefined) {\n        var index = 0;\n\n        for (let i = 0, l = vcount.length; i < l; i++) {\n          var count = vcount[i];\n\n          if (count === 4) {\n            var a = index + stride * 0;\n            var b = index + stride * 1;\n            var c = index + stride * 2;\n            var d = index + stride * 3;\n            pushVector(a);\n            pushVector(b);\n            pushVector(d);\n            pushVector(b);\n            pushVector(c);\n            pushVector(d);\n          } else if (count === 3) {\n            var a = index + stride * 0;\n            var b = index + stride * 1;\n            var c = index + stride * 2;\n            pushVector(a);\n            pushVector(b);\n            pushVector(c);\n          } else if (count > 4) {\n            for (let k = 1, kl = count - 2; k <= kl; k++) {\n              var a = index + stride * 0;\n              var b = index + stride * k;\n              var c = index + stride * (k + 1);\n              pushVector(a);\n              pushVector(b);\n              pushVector(c);\n            }\n          }\n\n          index += stride * count;\n        }\n      } else {\n        for (let i = 0, l = indices.length; i < l; i += stride) {\n          pushVector(i);\n        }\n      }\n    }\n\n    function getGeometry(id) {\n      return getBuild(library.geometries[id], buildGeometry);\n    } // kinematics\n\n\n    function parseKinematicsModel(xml) {\n      var data = {\n        name: xml.getAttribute('name') || '',\n        joints: {},\n        links: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            parseKinematicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n\n      library.kinematicsModels[xml.getAttribute('id')] = data;\n    }\n\n    function buildKinematicsModel(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n\n    function getKinematicsModel(id) {\n      return getBuild(library.kinematicsModels[id], buildKinematicsModel);\n    }\n\n    function parseKinematicsTechniqueCommon(xml, data) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'joint':\n            data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);\n            break;\n\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n        }\n      }\n    }\n\n    function parseKinematicsJoint(xml) {\n      var data;\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'prismatic':\n          case 'revolute':\n            data = parseKinematicsJointParameter(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsJointParameter(xml, data) {\n      var data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        axis: new Vector3(),\n        limits: {\n          min: 0,\n          max: 0\n        },\n        type: xml.nodeName,\n        static: false,\n        zeroPosition: 0,\n        middlePosition: 0\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'axis':\n            var array = parseFloats(child.textContent);\n            data.axis.fromArray(array);\n            break;\n\n          case 'limits':\n            var max = child.getElementsByTagName('max')[0];\n            var min = child.getElementsByTagName('min')[0];\n            data.limits.max = parseFloat(max.textContent);\n            data.limits.min = parseFloat(min.textContent);\n            break;\n        }\n      } // if min is equal to or greater than max, consider the joint static\n\n\n      if (data.limits.min >= data.limits.max) {\n        data.static = true;\n      } // calculate middle position\n\n\n      data.middlePosition = (data.limits.min + data.limits.max) / 2.0;\n      return data;\n    }\n\n    function parseKinematicsLink(xml) {\n      var data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        attachments: [],\n        transforms: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'attachment_full':\n            data.attachments.push(parseKinematicsAttachment(child));\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsAttachment(xml) {\n      var data = {\n        joint: xml.getAttribute('joint').split('/').pop(),\n        transforms: [],\n        links: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsTransform(xml) {\n      var data = {\n        type: xml.nodeName\n      };\n      var array = parseFloats(xml.textContent);\n\n      switch (data.type) {\n        case 'matrix':\n          data.obj = new Matrix4();\n          data.obj.fromArray(array).transpose();\n          break;\n\n        case 'translate':\n          data.obj = new Vector3();\n          data.obj.fromArray(array);\n          break;\n\n        case 'rotate':\n          data.obj = new Vector3();\n          data.obj.fromArray(array);\n          data.angle = MathUtils.degToRad(array[3]);\n          break;\n      }\n\n      return data;\n    } // physics\n\n\n    function parsePhysicsModel(xml) {\n      var data = {\n        name: xml.getAttribute('name') || '',\n        rigidBodies: {}\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'rigid_body':\n            data.rigidBodies[child.getAttribute('name')] = {};\n            parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);\n            break;\n        }\n      }\n\n      library.physicsModels[xml.getAttribute('id')] = data;\n    }\n\n    function parsePhysicsRigidBody(xml, data) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            parsePhysicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n    }\n\n    function parsePhysicsTechniqueCommon(xml, data) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'inertia':\n            data.inertia = parseFloats(child.textContent);\n            break;\n\n          case 'mass':\n            data.mass = parseFloats(child.textContent)[0];\n            break;\n        }\n      }\n    } // scene\n\n\n    function parseKinematicsScene(xml) {\n      var data = {\n        bindJointAxis: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'bind_joint_axis':\n            data.bindJointAxis.push(parseKinematicsBindJointAxis(child));\n            break;\n        }\n      }\n\n      library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;\n    }\n\n    function parseKinematicsBindJointAxis(xml) {\n      var data = {\n        target: xml.getAttribute('target').split('/').pop()\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'axis':\n            var param = child.getElementsByTagName('param')[0];\n            data.axis = param.textContent;\n            var tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];\n            data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildKinematicsScene(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n\n    function getKinematicsScene(id) {\n      return getBuild(library.kinematicsScenes[id], buildKinematicsScene);\n    }\n\n    function setupKinematics() {\n      var kinematicsModelId = Object.keys(library.kinematicsModels)[0];\n      var kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];\n      var visualSceneId = Object.keys(library.visualScenes)[0];\n      if (kinematicsModelId === undefined || kinematicsSceneId === undefined) return;\n      var kinematicsModel = getKinematicsModel(kinematicsModelId);\n      var kinematicsScene = getKinematicsScene(kinematicsSceneId);\n      var visualScene = getVisualScene(visualSceneId);\n      var bindJointAxis = kinematicsScene.bindJointAxis;\n      var jointMap = {};\n\n      for (let i = 0, l = bindJointAxis.length; i < l; i++) {\n        var axis = bindJointAxis[i]; // the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n        var targetElement = collada.querySelector('[sid=\"' + axis.target + '\"]');\n\n        if (targetElement) {\n          // get the parent of the transform element\n          var parentVisualElement = targetElement.parentElement; // connect the joint of the kinematics model with the element in the visual scene\n\n          connect(axis.jointIndex, parentVisualElement);\n        }\n      }\n\n      function connect(jointIndex, visualElement) {\n        var visualElementName = visualElement.getAttribute('name');\n        var joint = kinematicsModel.joints[jointIndex];\n        visualScene.traverse(function (object) {\n          if (object.name === visualElementName) {\n            jointMap[jointIndex] = {\n              object: object,\n              transforms: buildTransformList(visualElement),\n              joint: joint,\n              position: joint.zeroPosition\n            };\n          }\n        });\n      }\n\n      var m0 = new Matrix4();\n      kinematics = {\n        joints: kinematicsModel && kinematicsModel.joints,\n        getJointValue: function (jointIndex) {\n          var jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            return jointData.position;\n          } else {\n            console.warn('THREE.ColladaLoader: Joint ' + jointIndex + \" doesn't exist.\");\n          }\n        },\n        setJointValue: function (jointIndex, value) {\n          var jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            var joint = jointData.joint;\n\n            if (value > joint.limits.max || value < joint.limits.min) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');\n            } else if (joint.static) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');\n            } else {\n              var object = jointData.object;\n              var axis = joint.axis;\n              var transforms = jointData.transforms;\n              matrix.identity(); // each update, we have to apply all transforms in the correct order\n\n              for (let i = 0; i < transforms.length; i++) {\n                var transform = transforms[i]; // if there is a connection of the transform node with a joint, apply the joint value\n\n                if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {\n                  switch (joint.type) {\n                    case 'revolute':\n                      matrix.multiply(m0.makeRotationAxis(axis, MathUtils.degToRad(value)));\n                      break;\n\n                    case 'prismatic':\n                      matrix.multiply(m0.makeTranslation(axis.x * value, axis.y * value, axis.z * value));\n                      break;\n\n                    default:\n                      console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);\n                      break;\n                  }\n                } else {\n                  switch (transform.type) {\n                    case 'matrix':\n                      matrix.multiply(transform.obj);\n                      break;\n\n                    case 'translate':\n                      matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));\n                      break;\n\n                    case 'scale':\n                      matrix.scale(transform.obj);\n                      break;\n\n                    case 'rotate':\n                      matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));\n                      break;\n                  }\n                }\n              }\n\n              object.matrix.copy(matrix);\n              object.matrix.decompose(object.position, object.quaternion, object.scale);\n              jointMap[jointIndex].position = value;\n            }\n          } else {\n            console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');\n          }\n        }\n      };\n    }\n\n    function buildTransformList(node) {\n      var transforms = [];\n      var xml = collada.querySelector('[id=\"' + node.id + '\"]');\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'matrix':\n            var array = parseFloats(child.textContent);\n            var matrix = new Matrix4().fromArray(array).transpose();\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: matrix\n            });\n            break;\n\n          case 'translate':\n          case 'scale':\n            var array = parseFloats(child.textContent);\n            var vector = new Vector3().fromArray(array);\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector\n            });\n            break;\n\n          case 'rotate':\n            var array = parseFloats(child.textContent);\n            var vector = new Vector3().fromArray(array);\n            var angle = MathUtils.degToRad(array[3]);\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector,\n              angle: angle\n            });\n            break;\n        }\n      }\n\n      return transforms;\n    } // nodes\n\n\n    function prepareNodes(xml) {\n      var elements = xml.getElementsByTagName('node'); // ensure all node elements have id attributes\n\n      for (let i = 0; i < elements.length; i++) {\n        var element = elements[i];\n\n        if (element.hasAttribute('id') === false) {\n          element.setAttribute('id', generateId());\n        }\n      }\n    }\n\n    var matrix = new Matrix4();\n    var vector = new Vector3();\n\n    function parseNode(xml) {\n      var data = {\n        name: xml.getAttribute('name') || '',\n        type: xml.getAttribute('type'),\n        id: xml.getAttribute('id'),\n        sid: xml.getAttribute('sid'),\n        matrix: new Matrix4(),\n        nodes: [],\n        instanceCameras: [],\n        instanceControllers: [],\n        instanceLights: [],\n        instanceGeometries: [],\n        instanceNodes: [],\n        transforms: {}\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'node':\n            data.nodes.push(child.getAttribute('id'));\n            parseNode(child);\n            break;\n\n          case 'instance_camera':\n            data.instanceCameras.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'instance_controller':\n            data.instanceControllers.push(parseNodeInstance(child));\n            break;\n\n          case 'instance_light':\n            data.instanceLights.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'instance_geometry':\n            data.instanceGeometries.push(parseNodeInstance(child));\n            break;\n\n          case 'instance_node':\n            data.instanceNodes.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'matrix':\n            var array = parseFloats(child.textContent);\n            data.matrix.multiply(matrix.fromArray(array).transpose());\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'translate':\n            var array = parseFloats(child.textContent);\n            vector.fromArray(array);\n            data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'rotate':\n            var array = parseFloats(child.textContent);\n            var angle = MathUtils.degToRad(array[3]);\n            data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'scale':\n            var array = parseFloats(child.textContent);\n            data.matrix.scale(vector.fromArray(array));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'extra':\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      if (hasNode(data.id)) {\n        console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);\n      } else {\n        library.nodes[data.id] = data;\n      }\n\n      return data;\n    }\n\n    function parseNodeInstance(xml) {\n      var data = {\n        id: parseId(xml.getAttribute('url')),\n        materials: {},\n        skeletons: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'bind_material':\n            var instances = child.getElementsByTagName('instance_material');\n\n            for (let j = 0; j < instances.length; j++) {\n              var instance = instances[j];\n              var symbol = instance.getAttribute('symbol');\n              var target = instance.getAttribute('target');\n              data.materials[symbol] = parseId(target);\n            }\n\n            break;\n\n          case 'skeleton':\n            data.skeletons.push(parseId(child.textContent));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildSkeleton(skeletons, joints) {\n      var boneData = [];\n      var sortedBoneData = [];\n      var i, j, data; // a skeleton can have multiple root bones. collada expresses this\n      // situtation with multiple \"skeleton\" tags per controller instance\n\n      for (i = 0; i < skeletons.length; i++) {\n        var skeleton = skeletons[i];\n        var root;\n\n        if (hasNode(skeleton)) {\n          root = getNode(skeleton);\n          buildBoneHierarchy(root, joints, boneData);\n        } else if (hasVisualScene(skeleton)) {\n          // handle case where the skeleton refers to the visual scene (#13335)\n          var visualScene = library.visualScenes[skeleton];\n          var children = visualScene.children;\n\n          for (let j = 0; j < children.length; j++) {\n            var child = children[j];\n\n            if (child.type === 'JOINT') {\n              var root = getNode(child.id);\n              buildBoneHierarchy(root, joints, boneData);\n            }\n          }\n        } else {\n          console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);\n        }\n      } // sort bone data (the order is defined in the corresponding controller)\n\n\n      for (i = 0; i < joints.length; i++) {\n        for (j = 0; j < boneData.length; j++) {\n          data = boneData[j];\n\n          if (data.bone.name === joints[i].name) {\n            sortedBoneData[i] = data;\n            data.processed = true;\n            break;\n          }\n        }\n      } // add unprocessed bone data at the end of the list\n\n\n      for (i = 0; i < boneData.length; i++) {\n        data = boneData[i];\n\n        if (data.processed === false) {\n          sortedBoneData.push(data);\n          data.processed = true;\n        }\n      } // setup arrays for skeleton creation\n\n\n      var bones = [];\n      var boneInverses = [];\n\n      for (i = 0; i < sortedBoneData.length; i++) {\n        data = sortedBoneData[i];\n        bones.push(data.bone);\n        boneInverses.push(data.boneInverse);\n      }\n\n      return new Skeleton(bones, boneInverses);\n    }\n\n    function buildBoneHierarchy(root, joints, boneData) {\n      // setup bone data from visual scene\n      root.traverse(function (object) {\n        if (object.isBone === true) {\n          var boneInverse; // retrieve the boneInverse from the controller data\n\n          for (let i = 0; i < joints.length; i++) {\n            var joint = joints[i];\n\n            if (joint.name === object.name) {\n              boneInverse = joint.boneInverse;\n              break;\n            }\n          }\n\n          if (boneInverse === undefined) {\n            // Unfortunately, there can be joints in the visual scene that are not part of the\n            // corresponding controller. In this case, we have to create a dummy boneInverse matrix\n            // for the respective bone. This bone won't affect any vertices, because there are no skin indices\n            // and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n            // ensure a correct animation of the model.\n            boneInverse = new Matrix4();\n          }\n\n          boneData.push({\n            bone: object,\n            boneInverse: boneInverse,\n            processed: false\n          });\n        }\n      });\n    }\n\n    function buildNode(data) {\n      var objects = [];\n      var matrix = data.matrix;\n      var nodes = data.nodes;\n      var type = data.type;\n      var instanceCameras = data.instanceCameras;\n      var instanceControllers = data.instanceControllers;\n      var instanceLights = data.instanceLights;\n      var instanceGeometries = data.instanceGeometries;\n      var instanceNodes = data.instanceNodes; // nodes\n\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        objects.push(getNode(nodes[i]));\n      } // instance cameras\n\n\n      for (let i = 0, l = instanceCameras.length; i < l; i++) {\n        var instanceCamera = getCamera(instanceCameras[i]);\n\n        if (instanceCamera !== null) {\n          objects.push(instanceCamera.clone());\n        }\n      } // instance controllers\n\n\n      for (let i = 0, l = instanceControllers.length; i < l; i++) {\n        var instance = instanceControllers[i];\n        var controller = getController(instance.id);\n        var geometries = getGeometry(controller.id);\n        var newObjects = buildObjects(geometries, instance.materials);\n        var skeletons = instance.skeletons;\n        var joints = controller.skin.joints;\n        var skeleton = buildSkeleton(skeletons, joints);\n\n        for (let j = 0, jl = newObjects.length; j < jl; j++) {\n          var object = newObjects[j];\n\n          if (object.isSkinnedMesh) {\n            object.bind(skeleton, controller.skin.bindMatrix);\n            object.normalizeSkinWeights();\n          }\n\n          objects.push(object);\n        }\n      } // instance lights\n\n\n      for (let i = 0, l = instanceLights.length; i < l; i++) {\n        var instanceLight = getLight(instanceLights[i]);\n\n        if (instanceLight !== null) {\n          objects.push(instanceLight.clone());\n        }\n      } // instance geometries\n\n\n      for (let i = 0, l = instanceGeometries.length; i < l; i++) {\n        var instance = instanceGeometries[i]; // a single geometry instance in collada can lead to multiple object3Ds.\n        // this is the case when primitives are combined like triangles and lines\n\n        var geometries = getGeometry(instance.id);\n        var newObjects = buildObjects(geometries, instance.materials);\n\n        for (let j = 0, jl = newObjects.length; j < jl; j++) {\n          objects.push(newObjects[j]);\n        }\n      } // instance nodes\n\n\n      for (let i = 0, l = instanceNodes.length; i < l; i++) {\n        objects.push(getNode(instanceNodes[i]).clone());\n      }\n\n      var object;\n\n      if (nodes.length === 0 && objects.length === 1) {\n        object = objects[0];\n      } else {\n        object = type === 'JOINT' ? new Bone() : new Group();\n\n        for (let i = 0; i < objects.length; i++) {\n          object.add(objects[i]);\n        }\n      }\n\n      object.name = type === 'JOINT' ? data.sid : data.name;\n      object.matrix.copy(matrix);\n      object.matrix.decompose(object.position, object.quaternion, object.scale);\n      return object;\n    }\n\n    var fallbackMaterial = new MeshBasicMaterial({\n      color: 0xff00ff\n    });\n\n    function resolveMaterialBinding(keys, instanceMaterials) {\n      var materials = [];\n\n      for (let i = 0, l = keys.length; i < l; i++) {\n        var id = instanceMaterials[keys[i]];\n\n        if (id === undefined) {\n          console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);\n          materials.push(fallbackMaterial);\n        } else {\n          materials.push(getMaterial(id));\n        }\n      }\n\n      return materials;\n    }\n\n    function buildObjects(geometries, instanceMaterials) {\n      var objects = [];\n\n      for (let type in geometries) {\n        var geometry = geometries[type];\n        var materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials); // handle case if no materials are defined\n\n        if (materials.length === 0) {\n          if (type === 'lines' || type === 'linestrips') {\n            materials.push(new LineBasicMaterial());\n          } else {\n            materials.push(new MeshPhongMaterial());\n          }\n        } // regard skinning\n\n\n        var skinning = geometry.data.attributes.skinIndex !== undefined;\n\n        if (skinning) {\n          for (let i = 0, l = materials.length; i < l; i++) {\n            materials[i].skinning = true;\n          }\n        } // choose between a single or multi materials (material array)\n\n\n        var material = materials.length === 1 ? materials[0] : materials; // now create a specific 3D object\n\n        var object;\n\n        switch (type) {\n          case 'lines':\n            object = new LineSegments(geometry.data, material);\n            break;\n\n          case 'linestrips':\n            object = new Line(geometry.data, material);\n            break;\n\n          case 'triangles':\n          case 'polylist':\n            if (skinning) {\n              object = new SkinnedMesh(geometry.data, material);\n            } else {\n              object = new Mesh(geometry.data, material);\n            }\n\n            break;\n        }\n\n        objects.push(object);\n      }\n\n      return objects;\n    }\n\n    function hasNode(id) {\n      return library.nodes[id] !== undefined;\n    }\n\n    function getNode(id) {\n      return getBuild(library.nodes[id], buildNode);\n    } // visual scenes\n\n\n    function parseVisualScene(xml) {\n      var data = {\n        name: xml.getAttribute('name'),\n        children: []\n      };\n      prepareNodes(xml);\n      var elements = getElementsByTagName(xml, 'node');\n\n      for (let i = 0; i < elements.length; i++) {\n        data.children.push(parseNode(elements[i]));\n      }\n\n      library.visualScenes[xml.getAttribute('id')] = data;\n    }\n\n    function buildVisualScene(data) {\n      var group = new Group();\n      group.name = data.name;\n      var children = data.children;\n\n      for (let i = 0; i < children.length; i++) {\n        var child = children[i];\n        group.add(getNode(child.id));\n      }\n\n      return group;\n    }\n\n    function hasVisualScene(id) {\n      return library.visualScenes[id] !== undefined;\n    }\n\n    function getVisualScene(id) {\n      return getBuild(library.visualScenes[id], buildVisualScene);\n    } // scenes\n\n\n    function parseScene(xml) {\n      var instance = getElementsByTagName(xml, 'instance_visual_scene')[0];\n      return getVisualScene(parseId(instance.getAttribute('url')));\n    }\n\n    function setupAnimations() {\n      var clips = library.clips;\n\n      if (isEmpty(clips) === true) {\n        if (isEmpty(library.animations) === false) {\n          // if there are animations but no clips, we create a default clip for playback\n          var tracks = [];\n\n          for (let id in library.animations) {\n            var animationTracks = getAnimation(id);\n\n            for (let i = 0, l = animationTracks.length; i < l; i++) {\n              tracks.push(animationTracks[i]);\n            }\n          }\n\n          animations.push(new AnimationClip('default', -1, tracks));\n        }\n      } else {\n        for (let id in clips) {\n          animations.push(getAnimationClip(id));\n        }\n      }\n    } // convert the parser error element into text with each child elements text\n    // separated by new lines.\n\n\n    function parserErrorToText(parserError) {\n      var result = '';\n      var stack = [parserError];\n\n      while (stack.length) {\n        var node = stack.shift();\n\n        if (node.nodeType === Node.TEXT_NODE) {\n          result += node.textContent;\n        } else {\n          result += '\\n';\n          stack.push.apply(stack, node.childNodes);\n        }\n      }\n\n      return result.trim();\n    }\n\n    if (text.length === 0) {\n      return {\n        scene: new Scene()\n      };\n    }\n\n    var xml = new DOMParser().parseFromString(text, 'application/xml');\n    var collada = getElementsByTagName(xml, 'COLLADA')[0];\n    var parserError = xml.getElementsByTagName('parsererror')[0];\n\n    if (parserError !== undefined) {\n      // Chrome will return parser error with a div in it\n      var errorElement = getElementsByTagName(parserError, 'div')[0];\n      var errorText;\n\n      if (errorElement) {\n        errorText = errorElement.textContent;\n      } else {\n        errorText = parserErrorToText(parserError);\n      }\n\n      console.error('THREE.ColladaLoader: Failed to parse collada file.\\n', errorText);\n      return null;\n    } // metadata\n\n\n    var version = collada.getAttribute('version');\n    console.log('THREE.ColladaLoader: File version', version);\n    var asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);\n    var textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    var tgaLoader;\n\n    if (TGALoader) {\n      tgaLoader = new TGALoader(this.manager);\n      tgaLoader.setPath(this.resourcePath || path);\n    } //\n\n\n    var animations = [];\n    var kinematics = {};\n    var count = 0; //\n\n    var library = {\n      animations: {},\n      clips: {},\n      controllers: {},\n      images: {},\n      effects: {},\n      materials: {},\n      cameras: {},\n      lights: {},\n      geometries: {},\n      nodes: {},\n      visualScenes: {},\n      kinematicsModels: {},\n      physicsModels: {},\n      kinematicsScenes: {}\n    };\n    parseLibrary(collada, 'library_animations', 'animation', parseAnimation);\n    parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);\n    parseLibrary(collada, 'library_controllers', 'controller', parseController);\n    parseLibrary(collada, 'library_images', 'image', parseImage);\n    parseLibrary(collada, 'library_effects', 'effect', parseEffect);\n    parseLibrary(collada, 'library_materials', 'material', parseMaterial);\n    parseLibrary(collada, 'library_cameras', 'camera', parseCamera);\n    parseLibrary(collada, 'library_lights', 'light', parseLight);\n    parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);\n    parseLibrary(collada, 'library_nodes', 'node', parseNode);\n    parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);\n    parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);\n    parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);\n    parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);\n    buildLibrary(library.animations, buildAnimation);\n    buildLibrary(library.clips, buildAnimationClip);\n    buildLibrary(library.controllers, buildController);\n    buildLibrary(library.images, buildImage);\n    buildLibrary(library.effects, buildEffect);\n    buildLibrary(library.materials, buildMaterial);\n    buildLibrary(library.cameras, buildCamera);\n    buildLibrary(library.lights, buildLight);\n    buildLibrary(library.geometries, buildGeometry);\n    buildLibrary(library.visualScenes, buildVisualScene);\n    setupAnimations();\n    setupKinematics();\n    var scene = parseScene(getElementsByTagName(collada, 'scene')[0]);\n    scene.animations = animations;\n\n    if (asset.upAxis === 'Z_UP') {\n      scene.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n    }\n\n    scene.scale.multiplyScalar(asset.unit);\n    return {\n      get animations() {\n        console.warn('THREE.ColladaLoader: Please access animations over scene.animations now.');\n        return animations;\n      },\n\n      kinematics: kinematics,\n      library: library,\n      scene: scene\n    };\n  }\n});\n\nexport { ColladaLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}