{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as utils from \"../../utils/utils\";\nimport { contains, every, findAll, flatten, forEach, isEmpty, map, reduce, reject } from \"../../utils/utils\";\nimport { ParserDefinitionErrorType } from \"../parser/parser\";\nimport { getProductionDslName, isOptionalProd } from \"./gast/gast\";\nimport { containsPath, getLookaheadPathsForOptionalProd, getLookaheadPathsForOr, getProdType, isStrictPrefixOfPath } from \"./lookahead\";\nimport { nextPossibleTokensAfter } from \"./interpreter\";\nimport { Alternation, Alternative as AlternativeGAST, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Terminal } from \"./gast/gast_public\";\nimport { GAstVisitor } from \"./gast/gast_visitor_public\";\nexport function validateGrammar(topLevels, globalMaxLookahead, tokenTypes, errMsgProvider, grammarName) {\n  var duplicateErrors = utils.map(topLevels, function (currTopLevel) {\n    return validateDuplicateProductions(currTopLevel, errMsgProvider);\n  });\n  var leftRecursionErrors = utils.map(topLevels, function (currTopRule) {\n    return validateNoLeftRecursion(currTopRule, currTopRule, errMsgProvider);\n  });\n  var emptyAltErrors = [];\n  var ambiguousAltsErrors = [];\n  var emptyRepetitionErrors = []; // left recursion could cause infinite loops in the following validations.\n  // It is safest to first have the user fix the left recursion errors first and only then examine Further issues.\n\n  if (every(leftRecursionErrors, isEmpty)) {\n    emptyAltErrors = map(topLevels, function (currTopRule) {\n      return validateEmptyOrAlternative(currTopRule, errMsgProvider);\n    });\n    ambiguousAltsErrors = map(topLevels, function (currTopRule) {\n      return validateAmbiguousAlternationAlternatives(currTopRule, globalMaxLookahead, errMsgProvider);\n    });\n    emptyRepetitionErrors = validateSomeNonEmptyLookaheadPath(topLevels, globalMaxLookahead, errMsgProvider);\n  }\n\n  var termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider);\n  var tooManyAltsErrors = map(topLevels, function (curRule) {\n    return validateTooManyAlts(curRule, errMsgProvider);\n  });\n  var duplicateRulesError = map(topLevels, function (curRule) {\n    return validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider);\n  });\n  return utils.flatten(duplicateErrors.concat(emptyRepetitionErrors, leftRecursionErrors, emptyAltErrors, ambiguousAltsErrors, termsNamespaceConflictErrors, tooManyAltsErrors, duplicateRulesError));\n}\n\nfunction validateDuplicateProductions(topLevelRule, errMsgProvider) {\n  var collectorVisitor = new OccurrenceValidationCollector();\n  topLevelRule.accept(collectorVisitor);\n  var allRuleProductions = collectorVisitor.allProductions;\n  var productionGroups = utils.groupBy(allRuleProductions, identifyProductionForDuplicates);\n  var duplicates = utils.pick(productionGroups, function (currGroup) {\n    return currGroup.length > 1;\n  });\n  var errors = utils.map(utils.values(duplicates), function (currDuplicates) {\n    var firstProd = utils.first(currDuplicates);\n    var msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates);\n    var dslName = getProductionDslName(firstProd);\n    var defError = {\n      message: msg,\n      type: ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n      ruleName: topLevelRule.name,\n      dslName: dslName,\n      occurrence: firstProd.idx\n    };\n    var param = getExtraProductionArgument(firstProd);\n\n    if (param) {\n      defError.parameter = param;\n    }\n\n    return defError;\n  });\n  return errors;\n}\n\nexport function identifyProductionForDuplicates(prod) {\n  return getProductionDslName(prod) + \"_#_\" + prod.idx + \"_#_\" + getExtraProductionArgument(prod);\n}\n\nfunction getExtraProductionArgument(prod) {\n  if (prod instanceof Terminal) {\n    return prod.terminalType.name;\n  } else if (prod instanceof NonTerminal) {\n    return prod.nonTerminalName;\n  } else {\n    return \"\";\n  }\n}\n\nvar OccurrenceValidationCollector =\n/** @class */\nfunction (_super) {\n  __extends(OccurrenceValidationCollector, _super);\n\n  function OccurrenceValidationCollector() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.allProductions = [];\n    return _this;\n  }\n\n  OccurrenceValidationCollector.prototype.visitNonTerminal = function (subrule) {\n    this.allProductions.push(subrule);\n  };\n\n  OccurrenceValidationCollector.prototype.visitOption = function (option) {\n    this.allProductions.push(option);\n  };\n\n  OccurrenceValidationCollector.prototype.visitRepetitionWithSeparator = function (manySep) {\n    this.allProductions.push(manySep);\n  };\n\n  OccurrenceValidationCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {\n    this.allProductions.push(atLeastOne);\n  };\n\n  OccurrenceValidationCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n    this.allProductions.push(atLeastOneSep);\n  };\n\n  OccurrenceValidationCollector.prototype.visitRepetition = function (many) {\n    this.allProductions.push(many);\n  };\n\n  OccurrenceValidationCollector.prototype.visitAlternation = function (or) {\n    this.allProductions.push(or);\n  };\n\n  OccurrenceValidationCollector.prototype.visitTerminal = function (terminal) {\n    this.allProductions.push(terminal);\n  };\n\n  return OccurrenceValidationCollector;\n}(GAstVisitor);\n\nexport { OccurrenceValidationCollector };\nexport function validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {\n  var errors = [];\n  var occurrences = reduce(allRules, function (result, curRule) {\n    if (curRule.name === rule.name) {\n      return result + 1;\n    }\n\n    return result;\n  }, 0);\n\n  if (occurrences > 1) {\n    var errMsg = errMsgProvider.buildDuplicateRuleNameError({\n      topLevelRule: rule,\n      grammarName: className\n    });\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n      ruleName: rule.name\n    });\n  }\n\n  return errors;\n} // TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\n\nexport function validateRuleIsOverridden(ruleName, definedRulesNames, className) {\n  var errors = [];\n  var errMsg;\n\n  if (!utils.contains(definedRulesNames, ruleName)) {\n    errMsg = \"Invalid rule override, rule: ->\" + ruleName + \"<- cannot be overridden in the grammar: ->\" + className + \"<-\" + \"as it is not defined in any of the super grammars \";\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n      ruleName: ruleName\n    });\n  }\n\n  return errors;\n}\nexport function validateNoLeftRecursion(topRule, currRule, errMsgProvider, path) {\n  if (path === void 0) {\n    path = [];\n  }\n\n  var errors = [];\n  var nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n\n  if (utils.isEmpty(nextNonTerminals)) {\n    return [];\n  } else {\n    var ruleName = topRule.name;\n    var foundLeftRecursion = utils.contains(nextNonTerminals, topRule);\n\n    if (foundLeftRecursion) {\n      errors.push({\n        message: errMsgProvider.buildLeftRecursionError({\n          topLevelRule: topRule,\n          leftRecursionPath: path\n        }),\n        type: ParserDefinitionErrorType.LEFT_RECURSION,\n        ruleName: ruleName\n      });\n    } // we are only looking for cyclic paths leading back to the specific topRule\n    // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n\n\n    var validNextSteps = utils.difference(nextNonTerminals, path.concat([topRule]));\n    var errorsFromNextSteps = utils.map(validNextSteps, function (currRefRule) {\n      var newPath = utils.cloneArr(path);\n      newPath.push(currRefRule);\n      return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath);\n    });\n    return errors.concat(utils.flatten(errorsFromNextSteps));\n  }\n}\nexport function getFirstNoneTerminal(definition) {\n  var result = [];\n\n  if (utils.isEmpty(definition)) {\n    return result;\n  }\n\n  var firstProd = utils.first(definition);\n  /* istanbul ignore else */\n\n  if (firstProd instanceof NonTerminal) {\n    result.push(firstProd.referencedRule);\n  } else if (firstProd instanceof AlternativeGAST || firstProd instanceof Option || firstProd instanceof RepetitionMandatory || firstProd instanceof RepetitionMandatoryWithSeparator || firstProd instanceof RepetitionWithSeparator || firstProd instanceof Repetition) {\n    result = result.concat(getFirstNoneTerminal(firstProd.definition));\n  } else if (firstProd instanceof Alternation) {\n    // each sub definition in alternation is a FLAT\n    result = utils.flatten(utils.map(firstProd.definition, function (currSubDef) {\n      return getFirstNoneTerminal(currSubDef.definition);\n    }));\n  } else if (firstProd instanceof Terminal) {// nothing to see, move along\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n\n  var isFirstOptional = isOptionalProd(firstProd);\n  var hasMore = definition.length > 1;\n\n  if (isFirstOptional && hasMore) {\n    var rest = utils.drop(definition);\n    return result.concat(getFirstNoneTerminal(rest));\n  } else {\n    return result;\n  }\n}\n\nvar OrCollector =\n/** @class */\nfunction (_super) {\n  __extends(OrCollector, _super);\n\n  function OrCollector() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.alternations = [];\n    return _this;\n  }\n\n  OrCollector.prototype.visitAlternation = function (node) {\n    this.alternations.push(node);\n  };\n\n  return OrCollector;\n}(GAstVisitor);\n\nexport function validateEmptyOrAlternative(topLevelRule, errMsgProvider) {\n  var orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  var ors = orCollector.alternations;\n  var errors = utils.reduce(ors, function (errors, currOr) {\n    var exceptLast = utils.dropRight(currOr.definition);\n    var currErrors = utils.map(exceptLast, function (currAlternative, currAltIdx) {\n      var possibleFirstInAlt = nextPossibleTokensAfter([currAlternative], [], null, 1);\n\n      if (utils.isEmpty(possibleFirstInAlt)) {\n        return {\n          message: errMsgProvider.buildEmptyAlternationError({\n            topLevelRule: topLevelRule,\n            alternation: currOr,\n            emptyChoiceIdx: currAltIdx\n          }),\n          type: ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n          ruleName: topLevelRule.name,\n          occurrence: currOr.idx,\n          alternative: currAltIdx + 1\n        };\n      } else {\n        return null;\n      }\n    });\n    return errors.concat(utils.compact(currErrors));\n  }, []);\n  return errors;\n}\nexport function validateAmbiguousAlternationAlternatives(topLevelRule, globalMaxLookahead, errMsgProvider) {\n  var orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  var ors = orCollector.alternations; // New Handling of ignoring ambiguities\n  // - https://github.com/chevrotain/chevrotain/issues/869\n\n  ors = reject(ors, function (currOr) {\n    return currOr.ignoreAmbiguities === true;\n  });\n  var errors = utils.reduce(ors, function (result, currOr) {\n    var currOccurrence = currOr.idx;\n    var actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n    var alternatives = getLookaheadPathsForOr(currOccurrence, topLevelRule, actualMaxLookahead, currOr);\n    var altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n    var altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n    return result.concat(altsAmbiguityErrors, altsPrefixAmbiguityErrors);\n  }, []);\n  return errors;\n}\n\nvar RepetionCollector =\n/** @class */\nfunction (_super) {\n  __extends(RepetionCollector, _super);\n\n  function RepetionCollector() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.allProductions = [];\n    return _this;\n  }\n\n  RepetionCollector.prototype.visitRepetitionWithSeparator = function (manySep) {\n    this.allProductions.push(manySep);\n  };\n\n  RepetionCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {\n    this.allProductions.push(atLeastOne);\n  };\n\n  RepetionCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n    this.allProductions.push(atLeastOneSep);\n  };\n\n  RepetionCollector.prototype.visitRepetition = function (many) {\n    this.allProductions.push(many);\n  };\n\n  return RepetionCollector;\n}(GAstVisitor);\n\nexport { RepetionCollector };\nexport function validateTooManyAlts(topLevelRule, errMsgProvider) {\n  var orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  var ors = orCollector.alternations;\n  var errors = utils.reduce(ors, function (errors, currOr) {\n    if (currOr.definition.length > 255) {\n      errors.push({\n        message: errMsgProvider.buildTooManyAlternativesError({\n          topLevelRule: topLevelRule,\n          alternation: currOr\n        }),\n        type: ParserDefinitionErrorType.TOO_MANY_ALTS,\n        ruleName: topLevelRule.name,\n        occurrence: currOr.idx\n      });\n    }\n\n    return errors;\n  }, []);\n  return errors;\n}\nexport function validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {\n  var errors = [];\n  forEach(topLevelRules, function (currTopRule) {\n    var collectorVisitor = new RepetionCollector();\n    currTopRule.accept(collectorVisitor);\n    var allRuleProductions = collectorVisitor.allProductions;\n    forEach(allRuleProductions, function (currProd) {\n      var prodType = getProdType(currProd);\n      var actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n      var currOccurrence = currProd.idx;\n      var paths = getLookaheadPathsForOptionalProd(currOccurrence, currTopRule, prodType, actualMaxLookahead);\n      var pathsInsideProduction = paths[0];\n\n      if (isEmpty(flatten(pathsInsideProduction))) {\n        var errMsg = errMsgProvider.buildEmptyRepetitionError({\n          topLevelRule: currTopRule,\n          repetition: currProd\n        });\n        errors.push({\n          message: errMsg,\n          type: ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n          ruleName: currTopRule.name\n        });\n      }\n    });\n  });\n  return errors;\n}\n\nfunction checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n  var foundAmbiguousPaths = [];\n  var identicalAmbiguities = reduce(alternatives, function (result, currAlt, currAltIdx) {\n    // ignore (skip) ambiguities with this alternative\n    if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n      return result;\n    }\n\n    forEach(currAlt, function (currPath) {\n      var altsCurrPathAppearsIn = [currAltIdx];\n      forEach(alternatives, function (currOtherAlt, currOtherAltIdx) {\n        if (currAltIdx !== currOtherAltIdx && containsPath(currOtherAlt, currPath) && // ignore (skip) ambiguities with this \"other\" alternative\n        alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true) {\n          altsCurrPathAppearsIn.push(currOtherAltIdx);\n        }\n      });\n\n      if (altsCurrPathAppearsIn.length > 1 && !containsPath(foundAmbiguousPaths, currPath)) {\n        foundAmbiguousPaths.push(currPath);\n        result.push({\n          alts: altsCurrPathAppearsIn,\n          path: currPath\n        });\n      }\n    });\n    return result;\n  }, []);\n  var currErrors = utils.map(identicalAmbiguities, function (currAmbDescriptor) {\n    var ambgIndices = map(currAmbDescriptor.alts, function (currAltIdx) {\n      return currAltIdx + 1;\n    });\n    var currMessage = errMsgProvider.buildAlternationAmbiguityError({\n      topLevelRule: rule,\n      alternation: alternation,\n      ambiguityIndices: ambgIndices,\n      prefixPath: currAmbDescriptor.path\n    });\n    return {\n      message: currMessage,\n      type: ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n      ruleName: rule.name,\n      occurrence: alternation.idx,\n      alternatives: [currAmbDescriptor.alts]\n    };\n  });\n  return currErrors;\n}\n\nexport function checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n  var errors = []; // flatten\n\n  var pathsAndIndices = reduce(alternatives, function (result, currAlt, idx) {\n    var currPathsAndIdx = map(currAlt, function (currPath) {\n      return {\n        idx: idx,\n        path: currPath\n      };\n    });\n    return result.concat(currPathsAndIdx);\n  }, []);\n  forEach(pathsAndIndices, function (currPathAndIdx) {\n    var alternativeGast = alternation.definition[currPathAndIdx.idx]; // ignore (skip) ambiguities with this alternative\n\n    if (alternativeGast.ignoreAmbiguities === true) {\n      return;\n    }\n\n    var targetIdx = currPathAndIdx.idx;\n    var targetPath = currPathAndIdx.path;\n    var prefixAmbiguitiesPathsAndIndices = findAll(pathsAndIndices, function (searchPathAndIdx) {\n      // prefix ambiguity can only be created from lower idx (higher priority) path\n      return (// ignore (skip) ambiguities with this \"other\" alternative\n        alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !== true && searchPathAndIdx.idx < targetIdx && // checking for strict prefix because identical lookaheads\n        // will be be detected using a different validation.\n        isStrictPrefixOfPath(searchPathAndIdx.path, targetPath)\n      );\n    });\n    var currPathPrefixErrors = map(prefixAmbiguitiesPathsAndIndices, function (currAmbPathAndIdx) {\n      var ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n      var occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n      var message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n        topLevelRule: rule,\n        alternation: alternation,\n        ambiguityIndices: ambgIndices,\n        prefixPath: currAmbPathAndIdx.path\n      });\n      return {\n        message: message,\n        type: ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n        ruleName: rule.name,\n        occurrence: occurrence,\n        alternatives: ambgIndices\n      };\n    });\n    errors = errors.concat(currPathPrefixErrors);\n  });\n  return errors;\n}\n\nfunction checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {\n  var errors = [];\n  var tokenNames = map(tokenTypes, function (currToken) {\n    return currToken.name;\n  });\n  forEach(topLevels, function (currRule) {\n    var currRuleName = currRule.name;\n\n    if (contains(tokenNames, currRuleName)) {\n      var errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n        ruleName: currRuleName\n      });\n    }\n  });\n  return errors;\n}","map":{"version":3,"mappings":"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","names":["utils","contains","every","findAll","flatten","forEach","isEmpty","map","reduce","reject","ParserDefinitionErrorType","getProductionDslName","isOptionalProd","containsPath","getLookaheadPathsForOptionalProd","getLookaheadPathsForOr","getProdType","isStrictPrefixOfPath","nextPossibleTokensAfter","Alternation","Alternative","AlternativeGAST","NonTerminal","Option","Repetition","RepetitionMandatory","RepetitionMandatoryWithSeparator","RepetitionWithSeparator","Terminal","GAstVisitor","validateGrammar","topLevels","globalMaxLookahead","tokenTypes","errMsgProvider","grammarName","duplicateErrors","currTopLevel","leftRecursionErrors","currTopRule","emptyAltErrors","ambiguousAltsErrors","emptyRepetitionErrors","validateSomeNonEmptyLookaheadPath","termsNamespaceConflictErrors","checkTerminalAndNoneTerminalsNameSpace","tooManyAltsErrors","curRule","duplicateRulesError","concat","validateDuplicateProductions","topLevelRule","collectorVisitor","OccurrenceValidationCollector","accept","allRuleProductions","allProductions","productionGroups","groupBy","identifyProductionForDuplicates","duplicates","pick","currGroup","length","errors","values","currDuplicates","firstProd","first","msg","buildDuplicateFoundError","dslName","defError","message","type","DUPLICATE_PRODUCTIONS","ruleName","name","occurrence","idx","param","getExtraProductionArgument","parameter","prod","terminalType","nonTerminalName","__extends","_this","subrule","push","option","manySep","atLeastOne","atLeastOneSep","many","or","terminal","validateRuleDoesNotAlreadyExist","rule","allRules","className","occurrences","result","errMsg","buildDuplicateRuleNameError","DUPLICATE_RULE_NAME","validateRuleIsOverridden","definedRulesNames","INVALID_RULE_OVERRIDE","validateNoLeftRecursion","topRule","currRule","path","nextNonTerminals","getFirstNoneTerminal","definition","foundLeftRecursion","buildLeftRecursionError","leftRecursionPath","LEFT_RECURSION","validNextSteps","difference","errorsFromNextSteps","currRefRule","newPath","cloneArr","referencedRule","currSubDef","Error","isFirstOptional","hasMore","rest","drop","OrCollector","node","alternations","validateEmptyOrAlternative","orCollector","ors","currOr","exceptLast","dropRight","currErrors","currAlternative","currAltIdx","possibleFirstInAlt","buildEmptyAlternationError","alternation","emptyChoiceIdx","NONE_LAST_EMPTY_ALT","alternative","compact","validateAmbiguousAlternationAlternatives","ignoreAmbiguities","currOccurrence","actualMaxLookahead","maxLookahead","alternatives","altsAmbiguityErrors","checkAlternativesAmbiguities","altsPrefixAmbiguityErrors","checkPrefixAlternativesAmbiguities","RepetionCollector","validateTooManyAlts","buildTooManyAlternativesError","TOO_MANY_ALTS","topLevelRules","currProd","prodType","paths","pathsInsideProduction","buildEmptyRepetitionError","repetition","NO_NON_EMPTY_LOOKAHEAD","foundAmbiguousPaths","identicalAmbiguities","currAlt","currPath","altsCurrPathAppearsIn","currOtherAlt","currOtherAltIdx","alts","currAmbDescriptor","ambgIndices","currMessage","buildAlternationAmbiguityError","ambiguityIndices","prefixPath","AMBIGUOUS_ALTS","pathsAndIndices","currPathsAndIdx","currPathAndIdx","alternativeGast","targetIdx","targetPath","prefixAmbiguitiesPathsAndIndices","searchPathAndIdx","currPathPrefixErrors","currAmbPathAndIdx","buildAlternationPrefixAmbiguityError","AMBIGUOUS_PREFIX_ALTS","tokenNames","currToken","currRuleName","buildNamespaceConflictError","CONFLICT_TOKENS_RULES_NAMESPACE"],"sourceRoot":"","sources":["../../../../src/parse/grammar/checks.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}