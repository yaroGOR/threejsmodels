{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, FrontSide, RepeatWrapping, Color, MeshPhongMaterial, Vector2, DefaultLoadingManager, TextureLoader } from 'three';\n/**\n * Loads a Wavefront .mtl file specifying materials\n */\n\nvar MTLLoader = function MTLLoader(manager) {\n  Loader.call(this, manager);\n};\n\nMTLLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: MTLLoader,\n\n  /**\n   * Loads and parses a MTL asset from a URL.\n   *\n   * @param {String} url - URL to the MTL file.\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\n   * @param {Function} [onProgress] - Callback for download progress.\n   * @param {Function} [onError] - Callback for download errors.\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to load.\n   */\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  setMaterialOptions: function setMaterialOptions(value) {\n    this.materialOptions = value;\n    return this;\n  },\n\n  /**\n   * Parses a MTL file.\n   *\n   * @param {String} text - Content of MTL file\n   * @return {MTLLoader.MaterialCreator}\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to parse.\n   */\n  parse: function parse(text, path) {\n    var lines = text.split('\\n');\n    var info = {};\n    var delimiter_pattern = /\\s+/;\n    var materialsInfo = {};\n\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i];\n      line = line.trim();\n\n      if (line.length === 0 || line.charAt(0) === '#') {\n        // Blank line or comment ignore\n        continue;\n      }\n\n      var pos = line.indexOf(' ');\n      var key = pos >= 0 ? line.substring(0, pos) : line;\n      key = key.toLowerCase();\n      var value = pos >= 0 ? line.substring(pos + 1) : '';\n      value = value.trim();\n\n      if (key === 'newmtl') {\n        // New material\n        info = {\n          name: value\n        };\n        materialsInfo[value] = info;\n      } else {\n        if (key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke') {\n          var ss = value.split(delimiter_pattern, 3);\n          info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n        } else {\n          info[key] = value;\n        }\n      }\n    }\n\n    var materialCreator = new MTLLoader.MaterialCreator(this.resourcePath || path, this.materialOptions);\n    materialCreator.setCrossOrigin(this.crossOrigin);\n    materialCreator.setManager(this.manager);\n    materialCreator.setMaterials(materialsInfo);\n    return materialCreator;\n  }\n});\n/**\n * Create a new MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nMTLLoader.MaterialCreator = function (baseUrl, options) {\n  this.baseUrl = baseUrl || '';\n  this.options = options;\n  this.materialsInfo = {};\n  this.materials = {};\n  this.materialsArray = [];\n  this.nameLookup = {};\n  this.side = this.options && this.options.side ? this.options.side : FrontSide;\n  this.wrap = this.options && this.options.wrap ? this.options.wrap : RepeatWrapping;\n};\n\nMTLLoader.MaterialCreator.prototype = {\n  constructor: MTLLoader.MaterialCreator,\n  crossOrigin: 'anonymous',\n  setCrossOrigin: function setCrossOrigin(value) {\n    this.crossOrigin = value;\n    return this;\n  },\n  setManager: function setManager(value) {\n    this.manager = value;\n  },\n  setMaterials: function setMaterials(materialsInfo) {\n    this.materialsInfo = this.convert(materialsInfo);\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n  },\n  convert: function convert(materialsInfo) {\n    if (!this.options) return materialsInfo;\n    var converted = {};\n\n    for (var mn in materialsInfo) {\n      // Convert materials info into normalized form based on options\n      var mat = materialsInfo[mn];\n      var covmat = {};\n      converted[mn] = covmat;\n\n      for (var prop in mat) {\n        var save = true;\n        var value = mat[prop];\n        var lprop = prop.toLowerCase();\n\n        switch (lprop) {\n          case 'kd':\n          case 'ka':\n          case 'ks':\n            // Diffuse color (color under white light) using RGB values\n            if (this.options && this.options.normalizeRGB) {\n              value = [value[0] / 255, value[1] / 255, value[2] / 255];\n            }\n\n            if (this.options && this.options.ignoreZeroRGBs) {\n              if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                // ignore\n                save = false;\n              }\n            }\n\n            break;\n        }\n\n        if (save) {\n          covmat[lprop] = value;\n        }\n      }\n    }\n\n    return converted;\n  },\n  preload: function preload() {\n    for (var mn in this.materialsInfo) {\n      this.create(mn);\n    }\n  },\n  getIndex: function getIndex(materialName) {\n    return this.nameLookup[materialName];\n  },\n  getAsArray: function getAsArray() {\n    var index = 0;\n\n    for (var mn in this.materialsInfo) {\n      this.materialsArray[index] = this.create(mn);\n      this.nameLookup[mn] = index;\n      index++;\n    }\n\n    return this.materialsArray;\n  },\n  create: function create(materialName) {\n    if (this.materials[materialName] === undefined) {\n      this.createMaterial_(materialName);\n    }\n\n    return this.materials[materialName];\n  },\n  createMaterial_: function createMaterial_(materialName) {\n    // Create material\n    var scope = this;\n    var mat = this.materialsInfo[materialName];\n    var params = {\n      name: materialName,\n      side: this.side\n    };\n\n    function resolveURL(baseUrl, url) {\n      if (typeof url !== 'string' || url === '') return ''; // Absolute URL\n\n      if (/^https?:\\/\\//i.test(url)) return url;\n      return baseUrl + url;\n    }\n\n    function setMapForType(mapType, value) {\n      if (params[mapType]) return; // Keep the first encountered texture\n\n      var texParams = scope.getTextureParams(value, params);\n      var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n      map.repeat.copy(texParams.scale);\n      map.offset.copy(texParams.offset);\n      map.wrapS = scope.wrap;\n      map.wrapT = scope.wrap;\n      params[mapType] = map;\n    }\n\n    for (var prop in mat) {\n      var value = mat[prop];\n      var n;\n      if (value === '') continue;\n\n      switch (prop.toLowerCase()) {\n        // Ns is material specular exponent\n        case 'kd':\n          // Diffuse color (color under white light) using RGB values\n          params.color = new Color().fromArray(value);\n          break;\n\n        case 'ks':\n          // Specular color (color when light is reflected from shiny surface) using RGB values\n          params.specular = new Color().fromArray(value);\n          break;\n\n        case 'ke':\n          // Emissive using RGB values\n          params.emissive = new Color().fromArray(value);\n          break;\n\n        case 'map_kd':\n          // Diffuse texture map\n          setMapForType('map', value);\n          break;\n\n        case 'map_ks':\n          // Specular map\n          setMapForType('specularMap', value);\n          break;\n\n        case 'map_ke':\n          // Emissive map\n          setMapForType('emissiveMap', value);\n          break;\n\n        case 'norm':\n          setMapForType('normalMap', value);\n          break;\n\n        case 'map_bump':\n        case 'bump':\n          // Bump texture map\n          setMapForType('bumpMap', value);\n          break;\n\n        case 'map_d':\n          // Alpha map\n          setMapForType('alphaMap', value);\n          params.transparent = true;\n          break;\n\n        case 'ns':\n          // The specular exponent (defines the focus of the specular highlight)\n          // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n          params.shininess = parseFloat(value);\n          break;\n\n        case 'd':\n          n = parseFloat(value);\n\n          if (n < 1) {\n            params.opacity = n;\n            params.transparent = true;\n          }\n\n          break;\n\n        case 'tr':\n          n = parseFloat(value);\n          if (this.options && this.options.invertTrProperty) n = 1 - n;\n\n          if (n > 0) {\n            params.opacity = 1 - n;\n            params.transparent = true;\n          }\n\n          break;\n      }\n    }\n\n    this.materials[materialName] = new MeshPhongMaterial(params);\n    return this.materials[materialName];\n  },\n  getTextureParams: function getTextureParams(value, matParams) {\n    var texParams = {\n      scale: new Vector2(1, 1),\n      offset: new Vector2(0, 0)\n    };\n    var items = value.split(/\\s+/);\n    var pos;\n    pos = items.indexOf('-bm');\n\n    if (pos >= 0) {\n      matParams.bumpScale = parseFloat(items[pos + 1]);\n      items.splice(pos, 2);\n    }\n\n    pos = items.indexOf('-s');\n\n    if (pos >= 0) {\n      texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    pos = items.indexOf('-o');\n\n    if (pos >= 0) {\n      texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    texParams.url = items.join(' ').trim();\n    return texParams;\n  },\n  loadTexture: function loadTexture(url, mapping, onLoad, onProgress, onError) {\n    var texture;\n    var manager = this.manager !== undefined ? this.manager : DefaultLoadingManager;\n    var loader = manager.getHandler(url);\n\n    if (loader === null) {\n      loader = new TextureLoader(manager);\n    }\n\n    if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n    texture = loader.load(url, onLoad, onProgress, onError);\n    if (mapping !== undefined) texture.mapping = mapping;\n    return texture;\n  }\n};\nexport { MTLLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","FrontSide","RepeatWrapping","Color","MeshPhongMaterial","Vector2","DefaultLoadingManager","TextureLoader","MTLLoader","manager","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","setMaterialOptions","value","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","resourcePath","setCrossOrigin","crossOrigin","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","wrap","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","getIndex","materialName","getAsArray","index","undefined","createMaterial_","params","resolveURL","test","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","repeat","copy","scale","offset","wrapS","wrapT","n","color","fromArray","specular","emissive","transparent","shininess","opacity","invertTrProperty","matParams","items","bumpScale","splice","set","join","mapping","texture","getHandler"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/loaders/MTLLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, FrontSide, RepeatWrapping, Color, MeshPhongMaterial, Vector2, DefaultLoadingManager, TextureLoader } from 'three';\n\n/**\n * Loads a Wavefront .mtl file specifying materials\n */\n\nvar MTLLoader = function (manager) {\n  Loader.call(this, manager);\n};\n\nMTLLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: MTLLoader,\n\n  /**\n   * Loads and parses a MTL asset from a URL.\n   *\n   * @param {String} url - URL to the MTL file.\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\n   * @param {Function} [onProgress] - Callback for download progress.\n   * @param {Function} [onError] - Callback for download errors.\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to load.\n   */\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  setMaterialOptions: function (value) {\n    this.materialOptions = value;\n    return this;\n  },\n\n  /**\n   * Parses a MTL file.\n   *\n   * @param {String} text - Content of MTL file\n   * @return {MTLLoader.MaterialCreator}\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to parse.\n   */\n  parse: function (text, path) {\n    var lines = text.split('\\n');\n    var info = {};\n    var delimiter_pattern = /\\s+/;\n    var materialsInfo = {};\n\n    for (let i = 0; i < lines.length; i++) {\n      var line = lines[i];\n      line = line.trim();\n\n      if (line.length === 0 || line.charAt(0) === '#') {\n        // Blank line or comment ignore\n        continue;\n      }\n\n      var pos = line.indexOf(' ');\n      var key = pos >= 0 ? line.substring(0, pos) : line;\n      key = key.toLowerCase();\n      var value = pos >= 0 ? line.substring(pos + 1) : '';\n      value = value.trim();\n\n      if (key === 'newmtl') {\n        // New material\n        info = {\n          name: value\n        };\n        materialsInfo[value] = info;\n      } else {\n        if (key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke') {\n          var ss = value.split(delimiter_pattern, 3);\n          info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n        } else {\n          info[key] = value;\n        }\n      }\n    }\n\n    var materialCreator = new MTLLoader.MaterialCreator(this.resourcePath || path, this.materialOptions);\n    materialCreator.setCrossOrigin(this.crossOrigin);\n    materialCreator.setManager(this.manager);\n    materialCreator.setMaterials(materialsInfo);\n    return materialCreator;\n  }\n});\n/**\n * Create a new MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nMTLLoader.MaterialCreator = function (baseUrl, options) {\n  this.baseUrl = baseUrl || '';\n  this.options = options;\n  this.materialsInfo = {};\n  this.materials = {};\n  this.materialsArray = [];\n  this.nameLookup = {};\n  this.side = this.options && this.options.side ? this.options.side : FrontSide;\n  this.wrap = this.options && this.options.wrap ? this.options.wrap : RepeatWrapping;\n};\n\nMTLLoader.MaterialCreator.prototype = {\n  constructor: MTLLoader.MaterialCreator,\n  crossOrigin: 'anonymous',\n  setCrossOrigin: function (value) {\n    this.crossOrigin = value;\n    return this;\n  },\n  setManager: function (value) {\n    this.manager = value;\n  },\n  setMaterials: function (materialsInfo) {\n    this.materialsInfo = this.convert(materialsInfo);\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n  },\n  convert: function (materialsInfo) {\n    if (!this.options) return materialsInfo;\n    var converted = {};\n\n    for (let mn in materialsInfo) {\n      // Convert materials info into normalized form based on options\n      var mat = materialsInfo[mn];\n      var covmat = {};\n      converted[mn] = covmat;\n\n      for (let prop in mat) {\n        var save = true;\n        var value = mat[prop];\n        var lprop = prop.toLowerCase();\n\n        switch (lprop) {\n          case 'kd':\n          case 'ka':\n          case 'ks':\n            // Diffuse color (color under white light) using RGB values\n            if (this.options && this.options.normalizeRGB) {\n              value = [value[0] / 255, value[1] / 255, value[2] / 255];\n            }\n\n            if (this.options && this.options.ignoreZeroRGBs) {\n              if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                // ignore\n                save = false;\n              }\n            }\n\n            break;\n        }\n\n        if (save) {\n          covmat[lprop] = value;\n        }\n      }\n    }\n\n    return converted;\n  },\n  preload: function () {\n    for (let mn in this.materialsInfo) {\n      this.create(mn);\n    }\n  },\n  getIndex: function (materialName) {\n    return this.nameLookup[materialName];\n  },\n  getAsArray: function () {\n    var index = 0;\n\n    for (let mn in this.materialsInfo) {\n      this.materialsArray[index] = this.create(mn);\n      this.nameLookup[mn] = index;\n      index++;\n    }\n\n    return this.materialsArray;\n  },\n  create: function (materialName) {\n    if (this.materials[materialName] === undefined) {\n      this.createMaterial_(materialName);\n    }\n\n    return this.materials[materialName];\n  },\n  createMaterial_: function (materialName) {\n    // Create material\n    var scope = this;\n    var mat = this.materialsInfo[materialName];\n    var params = {\n      name: materialName,\n      side: this.side\n    };\n\n    function resolveURL(baseUrl, url) {\n      if (typeof url !== 'string' || url === '') return ''; // Absolute URL\n\n      if (/^https?:\\/\\//i.test(url)) return url;\n      return baseUrl + url;\n    }\n\n    function setMapForType(mapType, value) {\n      if (params[mapType]) return; // Keep the first encountered texture\n\n      var texParams = scope.getTextureParams(value, params);\n      var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n      map.repeat.copy(texParams.scale);\n      map.offset.copy(texParams.offset);\n      map.wrapS = scope.wrap;\n      map.wrapT = scope.wrap;\n      params[mapType] = map;\n    }\n\n    for (let prop in mat) {\n      var value = mat[prop];\n      var n;\n      if (value === '') continue;\n\n      switch (prop.toLowerCase()) {\n        // Ns is material specular exponent\n        case 'kd':\n          // Diffuse color (color under white light) using RGB values\n          params.color = new Color().fromArray(value);\n          break;\n\n        case 'ks':\n          // Specular color (color when light is reflected from shiny surface) using RGB values\n          params.specular = new Color().fromArray(value);\n          break;\n\n        case 'ke':\n          // Emissive using RGB values\n          params.emissive = new Color().fromArray(value);\n          break;\n\n        case 'map_kd':\n          // Diffuse texture map\n          setMapForType('map', value);\n          break;\n\n        case 'map_ks':\n          // Specular map\n          setMapForType('specularMap', value);\n          break;\n\n        case 'map_ke':\n          // Emissive map\n          setMapForType('emissiveMap', value);\n          break;\n\n        case 'norm':\n          setMapForType('normalMap', value);\n          break;\n\n        case 'map_bump':\n        case 'bump':\n          // Bump texture map\n          setMapForType('bumpMap', value);\n          break;\n\n        case 'map_d':\n          // Alpha map\n          setMapForType('alphaMap', value);\n          params.transparent = true;\n          break;\n\n        case 'ns':\n          // The specular exponent (defines the focus of the specular highlight)\n          // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n          params.shininess = parseFloat(value);\n          break;\n\n        case 'd':\n          n = parseFloat(value);\n\n          if (n < 1) {\n            params.opacity = n;\n            params.transparent = true;\n          }\n\n          break;\n\n        case 'tr':\n          n = parseFloat(value);\n          if (this.options && this.options.invertTrProperty) n = 1 - n;\n\n          if (n > 0) {\n            params.opacity = 1 - n;\n            params.transparent = true;\n          }\n\n          break;\n      }\n    }\n\n    this.materials[materialName] = new MeshPhongMaterial(params);\n    return this.materials[materialName];\n  },\n  getTextureParams: function (value, matParams) {\n    var texParams = {\n      scale: new Vector2(1, 1),\n      offset: new Vector2(0, 0)\n    };\n    var items = value.split(/\\s+/);\n    var pos;\n    pos = items.indexOf('-bm');\n\n    if (pos >= 0) {\n      matParams.bumpScale = parseFloat(items[pos + 1]);\n      items.splice(pos, 2);\n    }\n\n    pos = items.indexOf('-s');\n\n    if (pos >= 0) {\n      texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    pos = items.indexOf('-o');\n\n    if (pos >= 0) {\n      texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    texParams.url = items.join(' ').trim();\n    return texParams;\n  },\n  loadTexture: function (url, mapping, onLoad, onProgress, onError) {\n    var texture;\n    var manager = this.manager !== undefined ? this.manager : DefaultLoadingManager;\n    var loader = manager.getHandler(url);\n\n    if (loader === null) {\n      loader = new TextureLoader(manager);\n    }\n\n    if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n    texture = loader.load(url, onLoad, onProgress, onError);\n    if (mapping !== undefined) texture.mapping = mapping;\n    return texture;\n  }\n};\n\nexport { MTLLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}