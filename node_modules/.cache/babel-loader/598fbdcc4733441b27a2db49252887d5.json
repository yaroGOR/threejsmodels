{"ast":null,"code":"import { Object3D } from 'three';\nimport { XRHandPrimitiveModel } from './XRHandPrimitiveModel.js';\nimport { XRHandOculusMeshModel } from './XRHandOculusMeshModel.js';\n\nfunction XRHandModel(controller) {\n  Object3D.call(this);\n  this.controller = controller;\n  this.motionController = null;\n  this.envMap = null;\n  this.mesh = null;\n}\n\nXRHandModel.prototype = Object.assign(Object.create(Object3D.prototype), {\n  constructor: XRHandModel,\n  updateMatrixWorld: function updateMatrixWorld(force) {\n    Object3D.prototype.updateMatrixWorld.call(this, force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n});\n\nvar XRHandModelFactory = function () {\n  function XRHandModelFactory() {\n    this.path = '';\n  }\n\n  XRHandModelFactory.prototype = {\n    constructor: XRHandModelFactory,\n    setPath: function setPath(path) {\n      this.path = path;\n      return this;\n    },\n    createHandModel: function createHandModel(controller, profile, options) {\n      var _this = this;\n\n      var handModel = new XRHandModel(controller);\n      controller.addEventListener('connected', function (event) {\n        var xrInputSource = event.data;\n\n        if (xrInputSource.hand && !handModel.motionController) {\n          handModel.visible = true;\n          handModel.xrInputSource = xrInputSource; // @todo Detect profile if not provided\n\n          if (profile === undefined || profile === 'spheres') {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, _this.path, xrInputSource.handedness, {\n              primitive: 'sphere'\n            });\n          } else if (profile === 'boxes') {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, _this.path, xrInputSource.handedness, {\n              primitive: 'box'\n            });\n          } else if (profile === 'oculus') {\n            handModel.motionController = new XRHandOculusMeshModel(handModel, controller, _this.path, xrInputSource.handedness, options);\n          }\n        }\n      });\n      controller.addEventListener('disconnected', function () {// handModel.motionController = null;\n        // handModel.remove( scene );\n        // scene = null;\n      });\n      return handModel;\n    }\n  };\n  return XRHandModelFactory;\n}();\n\nexport { XRHandModelFactory };","map":{"version":3,"names":["Object3D","XRHandPrimitiveModel","XRHandOculusMeshModel","XRHandModel","controller","call","motionController","envMap","mesh","prototype","Object","assign","create","constructor","updateMatrixWorld","force","updateMesh","XRHandModelFactory","path","setPath","createHandModel","profile","options","handModel","addEventListener","event","xrInputSource","data","hand","visible","undefined","handedness","primitive"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/webxr/XRHandModelFactory.js"],"sourcesContent":["import { Object3D } from 'three';\nimport { XRHandPrimitiveModel } from './XRHandPrimitiveModel.js';\nimport { XRHandOculusMeshModel } from './XRHandOculusMeshModel.js';\n\nfunction XRHandModel(controller) {\n  Object3D.call(this);\n  this.controller = controller;\n  this.motionController = null;\n  this.envMap = null;\n  this.mesh = null;\n}\n\nXRHandModel.prototype = Object.assign(Object.create(Object3D.prototype), {\n  constructor: XRHandModel,\n  updateMatrixWorld: function (force) {\n    Object3D.prototype.updateMatrixWorld.call(this, force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n});\n\nconst XRHandModelFactory = function () {\n  function XRHandModelFactory() {\n    this.path = '';\n  }\n\n  XRHandModelFactory.prototype = {\n    constructor: XRHandModelFactory,\n    setPath: function (path) {\n      this.path = path;\n      return this;\n    },\n    createHandModel: function (controller, profile, options) {\n      const handModel = new XRHandModel(controller);\n      controller.addEventListener('connected', event => {\n        const xrInputSource = event.data;\n\n        if (xrInputSource.hand && !handModel.motionController) {\n          handModel.visible = true;\n          handModel.xrInputSource = xrInputSource; // @todo Detect profile if not provided\n\n          if (profile === undefined || profile === 'spheres') {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n              primitive: 'sphere'\n            });\n          } else if (profile === 'boxes') {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n              primitive: 'box'\n            });\n          } else if (profile === 'oculus') {\n            handModel.motionController = new XRHandOculusMeshModel(handModel, controller, this.path, xrInputSource.handedness, options);\n          }\n        }\n      });\n      controller.addEventListener('disconnected', () => {// handModel.motionController = null;\n        // handModel.remove( scene );\n        // scene = null;\n      });\n      return handModel;\n    }\n  };\n  return XRHandModelFactory;\n}();\n\nexport { XRHandModelFactory };\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,qBAAT,QAAsC,4BAAtC;;AAEA,SAASC,WAAT,CAAqBC,UAArB,EAAiC;EAC/BJ,QAAQ,CAACK,IAAT,CAAc,IAAd;EACA,KAAKD,UAAL,GAAkBA,UAAlB;EACA,KAAKE,gBAAL,GAAwB,IAAxB;EACA,KAAKC,MAAL,GAAc,IAAd;EACA,KAAKC,IAAL,GAAY,IAAZ;AACD;;AAEDL,WAAW,CAACM,SAAZ,GAAwBC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAcZ,QAAQ,CAACS,SAAvB,CAAd,EAAiD;EACvEI,WAAW,EAAEV,WAD0D;EAEvEW,iBAAiB,EAAE,2BAAUC,KAAV,EAAiB;IAClCf,QAAQ,CAACS,SAAT,CAAmBK,iBAAnB,CAAqCT,IAArC,CAA0C,IAA1C,EAAgDU,KAAhD;;IAEA,IAAI,KAAKT,gBAAT,EAA2B;MACzB,KAAKA,gBAAL,CAAsBU,UAAtB;IACD;EACF;AARsE,CAAjD,CAAxB;;AAWA,IAAMC,kBAAkB,GAAG,YAAY;EACrC,SAASA,kBAAT,GAA8B;IAC5B,KAAKC,IAAL,GAAY,EAAZ;EACD;;EAEDD,kBAAkB,CAACR,SAAnB,GAA+B;IAC7BI,WAAW,EAAEI,kBADgB;IAE7BE,OAAO,EAAE,iBAAUD,IAAV,EAAgB;MACvB,KAAKA,IAAL,GAAYA,IAAZ;MACA,OAAO,IAAP;IACD,CAL4B;IAM7BE,eAAe,EAAE,yBAAUhB,UAAV,EAAsBiB,OAAtB,EAA+BC,OAA/B,EAAwC;MAAA;;MACvD,IAAMC,SAAS,GAAG,IAAIpB,WAAJ,CAAgBC,UAAhB,CAAlB;MACAA,UAAU,CAACoB,gBAAX,CAA4B,WAA5B,EAAyC,UAAAC,KAAK,EAAI;QAChD,IAAMC,aAAa,GAAGD,KAAK,CAACE,IAA5B;;QAEA,IAAID,aAAa,CAACE,IAAd,IAAsB,CAACL,SAAS,CAACjB,gBAArC,EAAuD;UACrDiB,SAAS,CAACM,OAAV,GAAoB,IAApB;UACAN,SAAS,CAACG,aAAV,GAA0BA,aAA1B,CAFqD,CAEZ;;UAEzC,IAAIL,OAAO,KAAKS,SAAZ,IAAyBT,OAAO,KAAK,SAAzC,EAAoD;YAClDE,SAAS,CAACjB,gBAAV,GAA6B,IAAIL,oBAAJ,CAAyBsB,SAAzB,EAAoCnB,UAApC,EAAgD,KAAI,CAACc,IAArD,EAA2DQ,aAAa,CAACK,UAAzE,EAAqF;cAChHC,SAAS,EAAE;YADqG,CAArF,CAA7B;UAGD,CAJD,MAIO,IAAIX,OAAO,KAAK,OAAhB,EAAyB;YAC9BE,SAAS,CAACjB,gBAAV,GAA6B,IAAIL,oBAAJ,CAAyBsB,SAAzB,EAAoCnB,UAApC,EAAgD,KAAI,CAACc,IAArD,EAA2DQ,aAAa,CAACK,UAAzE,EAAqF;cAChHC,SAAS,EAAE;YADqG,CAArF,CAA7B;UAGD,CAJM,MAIA,IAAIX,OAAO,KAAK,QAAhB,EAA0B;YAC/BE,SAAS,CAACjB,gBAAV,GAA6B,IAAIJ,qBAAJ,CAA0BqB,SAA1B,EAAqCnB,UAArC,EAAiD,KAAI,CAACc,IAAtD,EAA4DQ,aAAa,CAACK,UAA1E,EAAsFT,OAAtF,CAA7B;UACD;QACF;MACF,CAnBD;MAoBAlB,UAAU,CAACoB,gBAAX,CAA4B,cAA5B,EAA4C,YAAM,CAAC;QACjD;QACA;MACD,CAHD;MAIA,OAAOD,SAAP;IACD;EAjC4B,CAA/B;EAmCA,OAAON,kBAAP;AACD,CAzC0B,EAA3B;;AA2CA,SAASA,kBAAT"},"metadata":{},"sourceType":"module"}