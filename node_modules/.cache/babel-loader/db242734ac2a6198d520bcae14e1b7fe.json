{"ast":null,"code":"import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { DotScreenShader } from '../shaders/DotScreenShader.js';\n\nvar DotScreenPass = function DotScreenPass(center, angle, scale) {\n  if (DotScreenShader === undefined) console.error('THREE.DotScreenPass relies on DotScreenShader');\n  var shader = DotScreenShader;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  if (center !== undefined) this.uniforms['center'].value.copy(center);\n  if (angle !== undefined) this.uniforms['angle'].value = angle;\n  if (scale !== undefined) this.uniforms['scale'].value = scale;\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.fsQuad = new FullScreenQuad(this.material);\n};\n\nDotScreenPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: DotScreenPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['tSize'].value.set(readBuffer.width, readBuffer.height);\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n});\nexport { DotScreenPass };","map":{"version":3,"names":["UniformsUtils","ShaderMaterial","FullScreenQuad","Pass","DotScreenShader","DotScreenPass","center","angle","scale","undefined","console","error","shader","uniforms","clone","value","copy","material","vertexShader","fragmentShader","fsQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","texture","set","width","height","renderToScreen","setRenderTarget","clear"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/postprocessing/DotScreenPass.js"],"sourcesContent":["import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { DotScreenShader } from '../shaders/DotScreenShader.js';\n\nvar DotScreenPass = function (center, angle, scale) {\n  if (DotScreenShader === undefined) console.error('THREE.DotScreenPass relies on DotScreenShader');\n  var shader = DotScreenShader;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  if (center !== undefined) this.uniforms['center'].value.copy(center);\n  if (angle !== undefined) this.uniforms['angle'].value = angle;\n  if (scale !== undefined) this.uniforms['scale'].value = scale;\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.fsQuad = new FullScreenQuad(this.material);\n};\n\nDotScreenPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: DotScreenPass,\n  render: function (renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['tSize'].value.set(readBuffer.width, readBuffer.height);\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n});\n\nexport { DotScreenPass };\n"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,cAAxB,QAA8C,OAA9C;AACA,SAASC,cAAT,EAAyBC,IAAzB,QAAqC,WAArC;AACA,SAASC,eAAT,QAAgC,+BAAhC;;AAEA,IAAIC,aAAa,GAAG,SAAhBA,aAAgB,CAAUC,MAAV,EAAkBC,KAAlB,EAAyBC,KAAzB,EAAgC;EAClD,IAAIJ,eAAe,KAAKK,SAAxB,EAAmCC,OAAO,CAACC,KAAR,CAAc,+CAAd;EACnC,IAAIC,MAAM,GAAGR,eAAb;EACA,KAAKS,QAAL,GAAgBb,aAAa,CAACc,KAAd,CAAoBF,MAAM,CAACC,QAA3B,CAAhB;EACA,IAAIP,MAAM,KAAKG,SAAf,EAA0B,KAAKI,QAAL,CAAc,QAAd,EAAwBE,KAAxB,CAA8BC,IAA9B,CAAmCV,MAAnC;EAC1B,IAAIC,KAAK,KAAKE,SAAd,EAAyB,KAAKI,QAAL,CAAc,OAAd,EAAuBE,KAAvB,GAA+BR,KAA/B;EACzB,IAAIC,KAAK,KAAKC,SAAd,EAAyB,KAAKI,QAAL,CAAc,OAAd,EAAuBE,KAAvB,GAA+BP,KAA/B;EACzB,KAAKS,QAAL,GAAgB,IAAIhB,cAAJ,CAAmB;IACjCY,QAAQ,EAAE,KAAKA,QADkB;IAEjCK,YAAY,EAAEN,MAAM,CAACM,YAFY;IAGjCC,cAAc,EAAEP,MAAM,CAACO;EAHU,CAAnB,CAAhB;EAKA,KAAKC,MAAL,GAAc,IAAIlB,cAAJ,CAAmB,KAAKe,QAAxB,CAAd;AACD,CAbD;;AAeAZ,aAAa,CAACgB,SAAd,GAA0BC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAcrB,IAAI,CAACkB,SAAnB,CAAd,EAA6C;EACrEI,WAAW,EAAEpB,aADwD;EAErEqB,MAAM,EAAE,gBAAUC,QAAV,EAAoBC,WAApB,EAAiCC;EACzC;EADQ,EAEN;IACA,KAAKhB,QAAL,CAAc,UAAd,EAA0BE,KAA1B,GAAkCc,UAAU,CAACC,OAA7C;IACA,KAAKjB,QAAL,CAAc,OAAd,EAAuBE,KAAvB,CAA6BgB,GAA7B,CAAiCF,UAAU,CAACG,KAA5C,EAAmDH,UAAU,CAACI,MAA9D;;IAEA,IAAI,KAAKC,cAAT,EAAyB;MACvBP,QAAQ,CAACQ,eAAT,CAAyB,IAAzB;MACA,KAAKf,MAAL,CAAYM,MAAZ,CAAmBC,QAAnB;IACD,CAHD,MAGO;MACLA,QAAQ,CAACQ,eAAT,CAAyBP,WAAzB;MACA,IAAI,KAAKQ,KAAT,EAAgBT,QAAQ,CAACS,KAAT;MAChB,KAAKhB,MAAL,CAAYM,MAAZ,CAAmBC,QAAnB;IACD;EACF;AAhBoE,CAA7C,CAA1B;AAmBA,SAAStB,aAAT"},"metadata":{},"sourceType":"module"}