{"ast":null,"code":"import { EarlyExitException, isRecognitionException, NoViableAltException } from \"../../exceptions_public\";\nimport { cloneArr, has } from \"../../../utils/utils\";\nimport { getLookaheadPathsForOptionalProd, getLookaheadPathsForOr } from \"../../grammar/lookahead\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\n/**\n * Trait responsible for runtime parsing errors.\n */\n\nvar ErrorHandler =\n/** @class */\nfunction () {\n  function ErrorHandler() {}\n\n  ErrorHandler.prototype.initErrorHandler = function (config) {\n    this._errors = [];\n    this.errorMessageProvider = has(config, \"errorMessageProvider\") ? config.errorMessageProvider : DEFAULT_PARSER_CONFIG.errorMessageProvider;\n  };\n\n  ErrorHandler.prototype.SAVE_ERROR = function (error) {\n    if (isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: cloneArr(this.RULE_OCCURRENCE_STACK)\n      };\n\n      this._errors.push(error);\n\n      return error;\n    } else {\n      throw Error(\"Trying to save an Error which is not a RecognitionException\");\n    }\n  };\n\n  Object.defineProperty(ErrorHandler.prototype, \"errors\", {\n    get: function get() {\n      return cloneArr(this._errors);\n    },\n    set: function set(newErrors) {\n      this._errors = newErrors;\n    },\n    enumerable: false,\n    configurable: true\n  }); // TODO: consider caching the error message computed information\n\n  ErrorHandler.prototype.raiseEarlyExitException = function (occurrence, prodType, userDefinedErrMsg) {\n    var ruleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[ruleName];\n    var lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, this.maxLookahead);\n    var insideProdPaths = lookAheadPathsPerAlternative[0];\n    var actualTokens = [];\n\n    for (var i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n\n    var msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName\n    });\n    throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)));\n  }; // TODO: consider caching the error message computed information\n\n\n  ErrorHandler.prototype.raiseNoAltException = function (occurrence, errMsgTypes) {\n    var ruleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[ruleName]; // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n\n    var lookAheadPathsPerAlternative = getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead);\n    var actualTokens = [];\n\n    for (var i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n\n    var previousToken = this.LA(0);\n    var errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName()\n    });\n    throw this.SAVE_ERROR(new NoViableAltException(errMsg, this.LA(1), previousToken));\n  };\n\n  return ErrorHandler;\n}();\n\nexport { ErrorHandler };","map":{"version":3,"mappings":"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","names":["EarlyExitException","isRecognitionException","NoViableAltException","cloneArr","has","getLookaheadPathsForOptionalProd","getLookaheadPathsForOr","DEFAULT_PARSER_CONFIG","ErrorHandler","config","_errors","errorMessageProvider","error","context","ruleStack","getHumanReadableRuleStack","ruleOccurrenceStack","RULE_OCCURRENCE_STACK","push","Error","Object","newErrors","occurrence","prodType","userDefinedErrMsg","ruleName","getCurrRuleFullName","ruleGrammar","getGAstProductions","lookAheadPathsPerAlternative","maxLookahead","insideProdPaths","actualTokens","i","LA","msg","buildEarlyExitMessage","expectedIterationPaths","actual","previous","customUserDescription","SAVE_ERROR","errMsgTypes","previousToken","errMsg","buildNoViableAltMessage","expectedPathsPerAlt"],"sourceRoot":"","sources":["../../../../../src/parse/parser/traits/error_handler.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}