{"ast":null,"code":"import { CompressedTextureLoader, RGBAFormat, RGB_ETC1_Format, RGBA_S3TC_DXT5_Format, RGBA_S3TC_DXT3_Format, RGB_S3TC_DXT1_Format } from 'three';\n\nvar DDSLoader = function DDSLoader(manager) {\n  CompressedTextureLoader.call(this, manager);\n};\n\nDDSLoader.prototype = Object.assign(Object.create(CompressedTextureLoader.prototype), {\n  constructor: DDSLoader,\n  parse: function parse(buffer, loadMipmaps) {\n    var dds = {\n      mipmaps: [],\n      width: 0,\n      height: 0,\n      format: null,\n      mipmapCount: 1\n    }; // Adapted from @toji's DDS utils\n    // https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\n    // All values and structures referenced from:\n    // http://msdn.microsoft.com/en-us/library/bb943991.aspx/\n\n    var DDS_MAGIC = 0x20534444; // var DDSD_CAPS = 0x1;\n    // var DDSD_HEIGHT = 0x2;\n    // var DDSD_WIDTH = 0x4;\n    // var DDSD_PITCH = 0x8;\n    // var DDSD_PIXELFORMAT = 0x1000;\n\n    var DDSD_MIPMAPCOUNT = 0x20000; // var DDSD_LINEARSIZE = 0x80000;\n    // var DDSD_DEPTH = 0x800000;\n    // var DDSCAPS_COMPLEX = 0x8;\n    // var DDSCAPS_MIPMAP = 0x400000;\n    // var DDSCAPS_TEXTURE = 0x1000;\n\n    var DDSCAPS2_CUBEMAP = 0x200;\n    var DDSCAPS2_CUBEMAP_POSITIVEX = 0x400;\n    var DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800;\n    var DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000;\n    var DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000;\n    var DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000;\n    var DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000; // var DDSCAPS2_VOLUME = 0x200000;\n    // var DDPF_ALPHAPIXELS = 0x1;\n    // var DDPF_ALPHA = 0x2;\n\n    var DDPF_FOURCC = 0x4; // var DDPF_RGB = 0x40;\n    // var DDPF_YUV = 0x200;\n    // var DDPF_LUMINANCE = 0x20000;\n\n    function fourCCToInt32(value) {\n      return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n    }\n\n    function int32ToFourCC(value) {\n      return String.fromCharCode(value & 0xff, value >> 8 & 0xff, value >> 16 & 0xff, value >> 24 & 0xff);\n    }\n\n    function loadARGBMip(buffer, dataOffset, width, height) {\n      var dataLength = width * height * 4;\n      var srcBuffer = new Uint8Array(buffer, dataOffset, dataLength);\n      var byteArray = new Uint8Array(dataLength);\n      var dst = 0;\n      var src = 0;\n\n      for (var y = 0; y < height; y++) {\n        for (var x = 0; x < width; x++) {\n          var b = srcBuffer[src];\n          src++;\n          var g = srcBuffer[src];\n          src++;\n          var r = srcBuffer[src];\n          src++;\n          var a = srcBuffer[src];\n          src++;\n          byteArray[dst] = r;\n          dst++; //r\n\n          byteArray[dst] = g;\n          dst++; //g\n\n          byteArray[dst] = b;\n          dst++; //b\n\n          byteArray[dst] = a;\n          dst++; //a\n        }\n      }\n\n      return byteArray;\n    }\n\n    var FOURCC_DXT1 = fourCCToInt32('DXT1');\n    var FOURCC_DXT3 = fourCCToInt32('DXT3');\n    var FOURCC_DXT5 = fourCCToInt32('DXT5');\n    var FOURCC_ETC1 = fourCCToInt32('ETC1');\n    var headerLengthInt = 31; // The header length in 32 bit ints\n    // Offsets into the header array\n\n    var off_magic = 0;\n    var off_size = 1;\n    var off_flags = 2;\n    var off_height = 3;\n    var off_width = 4;\n    var off_mipmapCount = 7;\n    var off_pfFlags = 20;\n    var off_pfFourCC = 21;\n    var off_RGBBitCount = 22;\n    var off_RBitMask = 23;\n    var off_GBitMask = 24;\n    var off_BBitMask = 25;\n    var off_ABitMask = 26; // var off_caps = 27;\n\n    var off_caps2 = 28; // var off_caps3 = 29;\n    // var off_caps4 = 30;\n    // Parse header\n\n    var header = new Int32Array(buffer, 0, headerLengthInt);\n\n    if (header[off_magic] !== DDS_MAGIC) {\n      console.error('THREE.DDSLoader.parse: Invalid magic number in DDS header.');\n      return dds;\n    }\n\n    if (!header[off_pfFlags] & DDPF_FOURCC) {\n      console.error('THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.');\n      return dds;\n    }\n\n    var blockBytes;\n    var fourCC = header[off_pfFourCC];\n    var isRGBAUncompressed = false;\n\n    switch (fourCC) {\n      case FOURCC_DXT1:\n        blockBytes = 8;\n        dds.format = RGB_S3TC_DXT1_Format;\n        break;\n\n      case FOURCC_DXT3:\n        blockBytes = 16;\n        dds.format = RGBA_S3TC_DXT3_Format;\n        break;\n\n      case FOURCC_DXT5:\n        blockBytes = 16;\n        dds.format = RGBA_S3TC_DXT5_Format;\n        break;\n\n      case FOURCC_ETC1:\n        blockBytes = 8;\n        dds.format = RGB_ETC1_Format;\n        break;\n\n      default:\n        if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 0xff0000 && header[off_GBitMask] & 0xff00 && header[off_BBitMask] & 0xff && header[off_ABitMask] & 0xff000000) {\n          isRGBAUncompressed = true;\n          blockBytes = 64;\n          dds.format = RGBAFormat;\n        } else {\n          console.error('THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC(fourCC));\n          return dds;\n        }\n\n    }\n\n    dds.mipmapCount = 1;\n\n    if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\n      dds.mipmapCount = Math.max(1, header[off_mipmapCount]);\n    }\n\n    var caps2 = header[off_caps2];\n    dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n\n    if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {\n      console.error('THREE.DDSLoader.parse: Incomplete cubemap faces');\n      return dds;\n    }\n\n    dds.width = header[off_width];\n    dds.height = header[off_height];\n    var dataOffset = header[off_size] + 4; // Extract mipmaps buffers\n\n    var faces = dds.isCubemap ? 6 : 1;\n\n    for (var face = 0; face < faces; face++) {\n      var width = dds.width;\n      var height = dds.height;\n\n      for (var i = 0; i < dds.mipmapCount; i++) {\n        if (isRGBAUncompressed) {\n          var byteArray = loadARGBMip(buffer, dataOffset, width, height);\n          var dataLength = byteArray.length;\n        } else {\n          var dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;\n          var byteArray = new Uint8Array(buffer, dataOffset, dataLength);\n        }\n\n        var mipmap = {\n          data: byteArray,\n          width: width,\n          height: height\n        };\n        dds.mipmaps.push(mipmap);\n        dataOffset += dataLength;\n        width = Math.max(width >> 1, 1);\n        height = Math.max(height >> 1, 1);\n      }\n    }\n\n    return dds;\n  }\n});\nexport { DDSLoader };","map":{"version":3,"names":["CompressedTextureLoader","RGBAFormat","RGB_ETC1_Format","RGBA_S3TC_DXT5_Format","RGBA_S3TC_DXT3_Format","RGB_S3TC_DXT1_Format","DDSLoader","manager","call","prototype","Object","assign","create","constructor","parse","buffer","loadMipmaps","dds","mipmaps","width","height","format","mipmapCount","DDS_MAGIC","DDSD_MIPMAPCOUNT","DDSCAPS2_CUBEMAP","DDSCAPS2_CUBEMAP_POSITIVEX","DDSCAPS2_CUBEMAP_NEGATIVEX","DDSCAPS2_CUBEMAP_POSITIVEY","DDSCAPS2_CUBEMAP_NEGATIVEY","DDSCAPS2_CUBEMAP_POSITIVEZ","DDSCAPS2_CUBEMAP_NEGATIVEZ","DDPF_FOURCC","fourCCToInt32","value","charCodeAt","int32ToFourCC","String","fromCharCode","loadARGBMip","dataOffset","dataLength","srcBuffer","Uint8Array","byteArray","dst","src","y","x","b","g","r","a","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","FOURCC_ETC1","headerLengthInt","off_magic","off_size","off_flags","off_height","off_width","off_mipmapCount","off_pfFlags","off_pfFourCC","off_RGBBitCount","off_RBitMask","off_GBitMask","off_BBitMask","off_ABitMask","off_caps2","header","Int32Array","console","error","blockBytes","fourCC","isRGBAUncompressed","Math","max","caps2","isCubemap","faces","face","i","length","mipmap","data","push"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/loaders/DDSLoader.js"],"sourcesContent":["import { CompressedTextureLoader, RGBAFormat, RGB_ETC1_Format, RGBA_S3TC_DXT5_Format, RGBA_S3TC_DXT3_Format, RGB_S3TC_DXT1_Format } from 'three';\n\nvar DDSLoader = function (manager) {\n  CompressedTextureLoader.call(this, manager);\n};\n\nDDSLoader.prototype = Object.assign(Object.create(CompressedTextureLoader.prototype), {\n  constructor: DDSLoader,\n  parse: function (buffer, loadMipmaps) {\n    var dds = {\n      mipmaps: [],\n      width: 0,\n      height: 0,\n      format: null,\n      mipmapCount: 1\n    }; // Adapted from @toji's DDS utils\n    // https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\n    // All values and structures referenced from:\n    // http://msdn.microsoft.com/en-us/library/bb943991.aspx/\n\n    var DDS_MAGIC = 0x20534444; // var DDSD_CAPS = 0x1;\n    // var DDSD_HEIGHT = 0x2;\n    // var DDSD_WIDTH = 0x4;\n    // var DDSD_PITCH = 0x8;\n    // var DDSD_PIXELFORMAT = 0x1000;\n\n    var DDSD_MIPMAPCOUNT = 0x20000; // var DDSD_LINEARSIZE = 0x80000;\n    // var DDSD_DEPTH = 0x800000;\n    // var DDSCAPS_COMPLEX = 0x8;\n    // var DDSCAPS_MIPMAP = 0x400000;\n    // var DDSCAPS_TEXTURE = 0x1000;\n\n    var DDSCAPS2_CUBEMAP = 0x200;\n    var DDSCAPS2_CUBEMAP_POSITIVEX = 0x400;\n    var DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800;\n    var DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000;\n    var DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000;\n    var DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000;\n    var DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000; // var DDSCAPS2_VOLUME = 0x200000;\n    // var DDPF_ALPHAPIXELS = 0x1;\n    // var DDPF_ALPHA = 0x2;\n\n    var DDPF_FOURCC = 0x4; // var DDPF_RGB = 0x40;\n    // var DDPF_YUV = 0x200;\n    // var DDPF_LUMINANCE = 0x20000;\n\n    function fourCCToInt32(value) {\n      return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n    }\n\n    function int32ToFourCC(value) {\n      return String.fromCharCode(value & 0xff, value >> 8 & 0xff, value >> 16 & 0xff, value >> 24 & 0xff);\n    }\n\n    function loadARGBMip(buffer, dataOffset, width, height) {\n      var dataLength = width * height * 4;\n      var srcBuffer = new Uint8Array(buffer, dataOffset, dataLength);\n      var byteArray = new Uint8Array(dataLength);\n      var dst = 0;\n      var src = 0;\n\n      for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n          var b = srcBuffer[src];\n          src++;\n          var g = srcBuffer[src];\n          src++;\n          var r = srcBuffer[src];\n          src++;\n          var a = srcBuffer[src];\n          src++;\n          byteArray[dst] = r;\n          dst++; //r\n\n          byteArray[dst] = g;\n          dst++; //g\n\n          byteArray[dst] = b;\n          dst++; //b\n\n          byteArray[dst] = a;\n          dst++; //a\n        }\n      }\n\n      return byteArray;\n    }\n\n    var FOURCC_DXT1 = fourCCToInt32('DXT1');\n    var FOURCC_DXT3 = fourCCToInt32('DXT3');\n    var FOURCC_DXT5 = fourCCToInt32('DXT5');\n    var FOURCC_ETC1 = fourCCToInt32('ETC1');\n    var headerLengthInt = 31; // The header length in 32 bit ints\n    // Offsets into the header array\n\n    var off_magic = 0;\n    var off_size = 1;\n    var off_flags = 2;\n    var off_height = 3;\n    var off_width = 4;\n    var off_mipmapCount = 7;\n    var off_pfFlags = 20;\n    var off_pfFourCC = 21;\n    var off_RGBBitCount = 22;\n    var off_RBitMask = 23;\n    var off_GBitMask = 24;\n    var off_BBitMask = 25;\n    var off_ABitMask = 26; // var off_caps = 27;\n\n    var off_caps2 = 28; // var off_caps3 = 29;\n    // var off_caps4 = 30;\n    // Parse header\n\n    var header = new Int32Array(buffer, 0, headerLengthInt);\n\n    if (header[off_magic] !== DDS_MAGIC) {\n      console.error('THREE.DDSLoader.parse: Invalid magic number in DDS header.');\n      return dds;\n    }\n\n    if (!header[off_pfFlags] & DDPF_FOURCC) {\n      console.error('THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.');\n      return dds;\n    }\n\n    var blockBytes;\n    var fourCC = header[off_pfFourCC];\n    var isRGBAUncompressed = false;\n\n    switch (fourCC) {\n      case FOURCC_DXT1:\n        blockBytes = 8;\n        dds.format = RGB_S3TC_DXT1_Format;\n        break;\n\n      case FOURCC_DXT3:\n        blockBytes = 16;\n        dds.format = RGBA_S3TC_DXT3_Format;\n        break;\n\n      case FOURCC_DXT5:\n        blockBytes = 16;\n        dds.format = RGBA_S3TC_DXT5_Format;\n        break;\n\n      case FOURCC_ETC1:\n        blockBytes = 8;\n        dds.format = RGB_ETC1_Format;\n        break;\n\n      default:\n        if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 0xff0000 && header[off_GBitMask] & 0xff00 && header[off_BBitMask] & 0xff && header[off_ABitMask] & 0xff000000) {\n          isRGBAUncompressed = true;\n          blockBytes = 64;\n          dds.format = RGBAFormat;\n        } else {\n          console.error('THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC(fourCC));\n          return dds;\n        }\n\n    }\n\n    dds.mipmapCount = 1;\n\n    if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\n      dds.mipmapCount = Math.max(1, header[off_mipmapCount]);\n    }\n\n    var caps2 = header[off_caps2];\n    dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n\n    if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {\n      console.error('THREE.DDSLoader.parse: Incomplete cubemap faces');\n      return dds;\n    }\n\n    dds.width = header[off_width];\n    dds.height = header[off_height];\n    var dataOffset = header[off_size] + 4; // Extract mipmaps buffers\n\n    var faces = dds.isCubemap ? 6 : 1;\n\n    for (let face = 0; face < faces; face++) {\n      var width = dds.width;\n      var height = dds.height;\n\n      for (let i = 0; i < dds.mipmapCount; i++) {\n        if (isRGBAUncompressed) {\n          var byteArray = loadARGBMip(buffer, dataOffset, width, height);\n          var dataLength = byteArray.length;\n        } else {\n          var dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;\n          var byteArray = new Uint8Array(buffer, dataOffset, dataLength);\n        }\n\n        var mipmap = {\n          data: byteArray,\n          width: width,\n          height: height\n        };\n        dds.mipmaps.push(mipmap);\n        dataOffset += dataLength;\n        width = Math.max(width >> 1, 1);\n        height = Math.max(height >> 1, 1);\n      }\n    }\n\n    return dds;\n  }\n});\n\nexport { DDSLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}