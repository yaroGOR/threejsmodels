{"ast":null,"code":"import { Vector3, Loader, FileLoader, Matrix4, MeshStandardMaterial, Color, MeshPhongMaterial, LineBasicMaterial, ShaderMaterial, UniformsUtils, UniformsLib, Group, BufferGeometry, Float32BufferAttribute, LineSegments, Mesh, BufferAttribute } from 'three';\n\nvar LDrawLoader = function () {\n  var conditionalLineVertShader =\n  /* glsl */\n  \"\\n\\tattribute vec3 control0;\\n\\tattribute vec3 control1;\\n\\tattribute vec3 direction;\\n\\tvarying float discardFlag;\\n\\n\\t#include <common>\\n\\t#include <color_pars_vertex>\\n\\t#include <fog_pars_vertex>\\n\\t#include <logdepthbuf_pars_vertex>\\n\\t#include <clipping_planes_pars_vertex>\\n\\tvoid main() {\\n\\t\\t#include <color_vertex>\\n\\n\\t\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\t\\tgl_Position = projectionMatrix * mvPosition;\\n\\n\\t\\t// Transform the line segment ends and control points into camera clip space\\n\\t\\tvec4 c0 = projectionMatrix * modelViewMatrix * vec4( control0, 1.0 );\\n\\t\\tvec4 c1 = projectionMatrix * modelViewMatrix * vec4( control1, 1.0 );\\n\\t\\tvec4 p0 = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\t\\tvec4 p1 = projectionMatrix * modelViewMatrix * vec4( position + direction, 1.0 );\\n\\n\\t\\tc0.xy /= c0.w;\\n\\t\\tc1.xy /= c1.w;\\n\\t\\tp0.xy /= p0.w;\\n\\t\\tp1.xy /= p1.w;\\n\\n\\t\\t// Get the direction of the segment and an orthogonal vector\\n\\t\\tvec2 dir = p1.xy - p0.xy;\\n\\t\\tvec2 norm = vec2( -dir.y, dir.x );\\n\\n\\t\\t// Get control point directions from the line\\n\\t\\tvec2 c0dir = c0.xy - p1.xy;\\n\\t\\tvec2 c1dir = c1.xy - p1.xy;\\n\\n\\t\\t// If the vectors to the controls points are pointed in different directions away\\n\\t\\t// from the line segment then the line should not be drawn.\\n\\t\\tfloat d0 = dot( normalize( norm ), normalize( c0dir ) );\\n\\t\\tfloat d1 = dot( normalize( norm ), normalize( c1dir ) );\\n\\t\\tdiscardFlag = float( sign( d0 ) != sign( d1 ) );\\n\\n\\t\\t#include <logdepthbuf_vertex>\\n\\t\\t#include <clipping_planes_vertex>\\n\\t\\t#include <fog_vertex>\\n\\t}\\n\\t\";\n  var conditionalLineFragShader =\n  /* glsl */\n  \"\\n\\tuniform vec3 diffuse;\\n\\tuniform float opacity;\\n\\tvarying float discardFlag;\\n\\n\\t#include <common>\\n\\t#include <color_pars_fragment>\\n\\t#include <fog_pars_fragment>\\n\\t#include <logdepthbuf_pars_fragment>\\n\\t#include <clipping_planes_pars_fragment>\\n\\tvoid main() {\\n\\n\\t\\tif ( discardFlag > 0.5 ) discard;\\n\\n\\t\\t#include <clipping_planes_fragment>\\n\\t\\tvec3 outgoingLight = vec3( 0.0 );\\n\\t\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t\\t#include <logdepthbuf_fragment>\\n\\t\\t#include <color_fragment>\\n\\t\\toutgoingLight = diffuseColor.rgb; // simple shader\\n\\t\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t\\t#include <tonemapping_fragment>\\n\\t\\t#include <encodings_fragment>\\n\\t\\t#include <fog_fragment>\\n\\t\\t#include <premultiplied_alpha_fragment>\\n\\t}\\n\\t\";\n  var tempVec0 = new Vector3();\n  var tempVec1 = new Vector3();\n\n  function smoothNormals(triangles, lineSegments) {\n    function hashVertex(v) {\n      // NOTE: 1e2 is pretty coarse but was chosen because it allows edges\n      // to be smoothed as expected (see minifig arms). The errors between edges\n      // could be due to matrix multiplication.\n      var x = ~~(v.x * 1e2);\n      var y = ~~(v.y * 1e2);\n      var z = ~~(v.z * 1e2);\n      return \"\".concat(x, \",\").concat(y, \",\").concat(z);\n    }\n\n    function hashEdge(v0, v1) {\n      return \"\".concat(hashVertex(v0), \"_\").concat(hashVertex(v1));\n    }\n\n    var hardEdges = new Set();\n    var halfEdgeList = {};\n    var fullHalfEdgeList = {};\n    var normals = []; // Save the list of hard edges by hash\n\n    for (var _i = 0, l = lineSegments.length; _i < l; _i++) {\n      var ls = lineSegments[_i];\n      var v0 = ls.v0;\n      var v1 = ls.v1;\n      hardEdges.add(hashEdge(v0, v1));\n      hardEdges.add(hashEdge(v1, v0));\n    } // track the half edges associated with each triangle\n\n\n    for (var _i2 = 0, _l = triangles.length; _i2 < _l; _i2++) {\n      var tri = triangles[_i2];\n\n      for (var i2 = 0, l2 = 3; i2 < l2; i2++) {\n        var index = i2;\n        var next = (i2 + 1) % 3;\n        var v0 = tri[\"v\".concat(index)];\n        var v1 = tri[\"v\".concat(next)];\n        var hash = hashEdge(v0, v1); // don't add the triangle if the edge is supposed to be hard\n\n        if (hardEdges.has(hash)) continue;\n        halfEdgeList[hash] = tri;\n        fullHalfEdgeList[hash] = tri;\n      }\n    } // NOTE: Some of the normals wind up being skewed in an unexpected way because\n    // quads provide more \"influence\" to some vertex normals than a triangle due to\n    // the fact that a quad is made up of two triangles and all triangles are weighted\n    // equally. To fix this quads could be tracked separately so their vertex normals\n    // are weighted appropriately or we could try only adding a normal direction\n    // once per normal.\n    // Iterate until we've tried to connect all triangles to share normals\n\n\n    while (true) {\n      // Stop if there are no more triangles left\n      var halfEdges = Object.keys(halfEdgeList);\n      if (halfEdges.length === 0) break; // Exhaustively find all connected triangles\n\n      var i = 0;\n      var queue = [fullHalfEdgeList[halfEdges[0]]];\n\n      while (i < queue.length) {\n        // initialize all vertex normals in this triangle\n        var tri = queue[i];\n        i++;\n        var faceNormal = tri.faceNormal;\n\n        if (tri.n0 === null) {\n          tri.n0 = faceNormal.clone();\n          normals.push(tri.n0);\n        }\n\n        if (tri.n1 === null) {\n          tri.n1 = faceNormal.clone();\n          normals.push(tri.n1);\n        }\n\n        if (tri.n2 === null) {\n          tri.n2 = faceNormal.clone();\n          normals.push(tri.n2);\n        } // Check if any edge is connected to another triangle edge\n\n\n        for (var _i3 = 0, _l2 = 3; _i3 < _l2; _i3++) {\n          var index = _i3;\n          var next = (_i3 + 1) % 3;\n          var v0 = tri[\"v\".concat(index)];\n          var v1 = tri[\"v\".concat(next)]; // delete this triangle from the list so it won't be found again\n\n          var hash = hashEdge(v0, v1);\n          delete halfEdgeList[hash];\n          var reverseHash = hashEdge(v1, v0);\n          var otherTri = fullHalfEdgeList[reverseHash];\n\n          if (otherTri) {\n            // NOTE: If the angle between triangles is > 67.5 degrees then assume it's\n            // hard edge. There are some cases where the line segments do not line up exactly\n            // with or span multiple triangle edges (see Lunar Vehicle wheels).\n            if (Math.abs(otherTri.faceNormal.dot(tri.faceNormal)) < 0.25) {\n              continue;\n            } // if this triangle has already been traversed then it won't be in\n            // the halfEdgeList. If it has not then add it to the queue and delete\n            // it so it won't be found again.\n\n\n            if (reverseHash in halfEdgeList) {\n              queue.push(otherTri);\n              delete halfEdgeList[reverseHash];\n            } // Find the matching edge in this triangle and copy the normal vector over\n\n\n            for (var i3 = 0, l3 = 3; i3 < l3; i3++) {\n              var otherIndex = i3;\n              var otherNext = (i3 + 1) % 3;\n              var otherV0 = otherTri[\"v\".concat(otherIndex)];\n              var otherV1 = otherTri[\"v\".concat(otherNext)];\n              var otherHash = hashEdge(otherV0, otherV1);\n\n              if (otherHash === reverseHash) {\n                if (otherTri[\"n\".concat(otherIndex)] === null) {\n                  var norm = tri[\"n\".concat(next)];\n                  otherTri[\"n\".concat(otherIndex)] = norm;\n                  norm.add(otherTri.faceNormal);\n                }\n\n                if (otherTri[\"n\".concat(otherNext)] === null) {\n                  var norm = tri[\"n\".concat(index)];\n                  otherTri[\"n\".concat(otherNext)] = norm;\n                  norm.add(otherTri.faceNormal);\n                }\n\n                break;\n              }\n            }\n          }\n        }\n      }\n    } // The normals of each face have been added up so now we average them by normalizing the vector.\n\n\n    for (var _i4 = 0, _l3 = normals.length; _i4 < _l3; _i4++) {\n      normals[_i4].normalize();\n    }\n  }\n\n  function isPrimitiveType(type) {\n    return /primitive/i.test(type) || type === 'Subpart';\n  }\n\n  function LineParser(line, lineNumber) {\n    this.line = line;\n    this.lineLength = line.length;\n    this.currentCharIndex = 0;\n    this.currentChar = ' ';\n    this.lineNumber = lineNumber;\n  }\n\n  LineParser.prototype = {\n    constructor: LineParser,\n    seekNonSpace: function seekNonSpace() {\n      while (this.currentCharIndex < this.lineLength) {\n        this.currentChar = this.line.charAt(this.currentCharIndex);\n\n        if (this.currentChar !== ' ' && this.currentChar !== '\\t') {\n          return;\n        }\n\n        this.currentCharIndex++;\n      }\n    },\n    getToken: function getToken() {\n      var pos0 = this.currentCharIndex++; // Seek space\n\n      while (this.currentCharIndex < this.lineLength) {\n        this.currentChar = this.line.charAt(this.currentCharIndex);\n\n        if (this.currentChar === ' ' || this.currentChar === '\\t') {\n          break;\n        }\n\n        this.currentCharIndex++;\n      }\n\n      var pos1 = this.currentCharIndex;\n      this.seekNonSpace();\n      return this.line.substring(pos0, pos1);\n    },\n    getRemainingString: function getRemainingString() {\n      return this.line.substring(this.currentCharIndex, this.lineLength);\n    },\n    isAtTheEnd: function isAtTheEnd() {\n      return this.currentCharIndex >= this.lineLength;\n    },\n    setToEnd: function setToEnd() {\n      this.currentCharIndex = this.lineLength;\n    },\n    getLineNumberString: function getLineNumberString() {\n      return this.lineNumber >= 0 ? ' at line ' + this.lineNumber : '';\n    }\n  };\n\n  function sortByMaterial(a, b) {\n    if (a.colourCode === b.colourCode) {\n      return 0;\n    }\n\n    if (a.colourCode < b.colourCode) {\n      return -1;\n    }\n\n    return 1;\n  }\n\n  function createObject(elements, elementSize, isConditionalSegments) {\n    // Creates a LineSegments (elementSize = 2) or a Mesh (elementSize = 3 )\n    // With per face / segment material, implemented with mesh groups and materials array\n    // Sort the triangles or line segments by colour code to make later the mesh groups\n    elements.sort(sortByMaterial);\n    var positions = [];\n    var normals = [];\n    var materials = [];\n    var bufferGeometry = new BufferGeometry();\n    var prevMaterial = null;\n    var index0 = 0;\n    var numGroupVerts = 0;\n\n    for (var iElem = 0, nElem = elements.length; iElem < nElem; iElem++) {\n      var elem = elements[iElem];\n      var v0 = elem.v0;\n      var v1 = elem.v1; // Note that LDraw coordinate system is rotated 180 deg. in the X axis w.r.t. Three.js's one\n\n      positions.push(v0.x, v0.y, v0.z, v1.x, v1.y, v1.z);\n\n      if (elementSize === 3) {\n        positions.push(elem.v2.x, elem.v2.y, elem.v2.z);\n        var n0 = elem.n0 || elem.faceNormal;\n        var n1 = elem.n1 || elem.faceNormal;\n        var n2 = elem.n2 || elem.faceNormal;\n        normals.push(n0.x, n0.y, n0.z);\n        normals.push(n1.x, n1.y, n1.z);\n        normals.push(n2.x, n2.y, n2.z);\n      }\n\n      if (prevMaterial !== elem.material) {\n        if (prevMaterial !== null) {\n          bufferGeometry.addGroup(index0, numGroupVerts, materials.length - 1);\n        }\n\n        materials.push(elem.material);\n        prevMaterial = elem.material;\n        index0 = iElem * elementSize;\n        numGroupVerts = elementSize;\n      } else {\n        numGroupVerts += elementSize;\n      }\n    }\n\n    if (numGroupVerts > 0) {\n      bufferGeometry.addGroup(index0, Infinity, materials.length - 1);\n    }\n\n    bufferGeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\n    if (elementSize === 3) {\n      bufferGeometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    }\n\n    var object3d = null;\n\n    if (elementSize === 2) {\n      object3d = new LineSegments(bufferGeometry, materials);\n    } else if (elementSize === 3) {\n      object3d = new Mesh(bufferGeometry, materials);\n    }\n\n    if (isConditionalSegments) {\n      object3d.isConditionalLine = true;\n      var controlArray0 = new Float32Array(elements.length * 3 * 2);\n      var controlArray1 = new Float32Array(elements.length * 3 * 2);\n      var directionArray = new Float32Array(elements.length * 3 * 2);\n\n      for (var i = 0, l = elements.length; i < l; i++) {\n        var os = elements[i];\n        var c0 = os.c0;\n        var c1 = os.c1;\n        var v0 = os.v0;\n        var v1 = os.v1;\n        var index = i * 3 * 2;\n        controlArray0[index + 0] = c0.x;\n        controlArray0[index + 1] = c0.y;\n        controlArray0[index + 2] = c0.z;\n        controlArray0[index + 3] = c0.x;\n        controlArray0[index + 4] = c0.y;\n        controlArray0[index + 5] = c0.z;\n        controlArray1[index + 0] = c1.x;\n        controlArray1[index + 1] = c1.y;\n        controlArray1[index + 2] = c1.z;\n        controlArray1[index + 3] = c1.x;\n        controlArray1[index + 4] = c1.y;\n        controlArray1[index + 5] = c1.z;\n        directionArray[index + 0] = v1.x - v0.x;\n        directionArray[index + 1] = v1.y - v0.y;\n        directionArray[index + 2] = v1.z - v0.z;\n        directionArray[index + 3] = v1.x - v0.x;\n        directionArray[index + 4] = v1.y - v0.y;\n        directionArray[index + 5] = v1.z - v0.z;\n      }\n\n      bufferGeometry.setAttribute('control0', new BufferAttribute(controlArray0, 3, false));\n      bufferGeometry.setAttribute('control1', new BufferAttribute(controlArray1, 3, false));\n      bufferGeometry.setAttribute('direction', new BufferAttribute(directionArray, 3, false));\n    }\n\n    return object3d;\n  } //\n\n\n  function LDrawLoader(manager) {\n    Loader.call(this, manager); // This is a stack of 'parse scopes' with one level per subobject loaded file.\n    // Each level contains a material lib and also other runtime variables passed between parent and child subobjects\n    // When searching for a material code, the stack is read from top of the stack to bottom\n    // Each material library is an object map keyed by colour codes.\n\n    this.parseScopesStack = null; // Array of THREE.Material\n\n    this.materials = []; // Not using THREE.Cache here because it returns the previous HTML error response instead of calling onError()\n    // This also allows to handle the embedded text files (\"0 FILE\" lines)\n\n    this.subobjectCache = {}; // This object is a map from file names to paths. It agilizes the paths search. If it is not set then files will be searched by trial and error.\n\n    this.fileMap = null; // Add default main triangle and line edge materials (used in piecess that can be coloured with a main color)\n\n    this.setMaterials([this.parseColourMetaDirective(new LineParser('Main_Colour CODE 16 VALUE #FF8080 EDGE #333333')), this.parseColourMetaDirective(new LineParser('Edge_Colour CODE 24 VALUE #A0A0A0 EDGE #333333'))]); // If this flag is set to true, each subobject will be a Object.\n    // If not (the default), only one object which contains all the merged primitives will be created.\n\n    this.separateObjects = false; // If this flag is set to true the vertex normals will be smoothed.\n\n    this.smoothNormals = true;\n  } // Special surface finish tag types.\n  // Note: \"MATERIAL\" tag (e.g. GLITTER, SPECKLE) is not implemented\n\n\n  LDrawLoader.FINISH_TYPE_DEFAULT = 0;\n  LDrawLoader.FINISH_TYPE_CHROME = 1;\n  LDrawLoader.FINISH_TYPE_PEARLESCENT = 2;\n  LDrawLoader.FINISH_TYPE_RUBBER = 3;\n  LDrawLoader.FINISH_TYPE_MATTE_METALLIC = 4;\n  LDrawLoader.FINISH_TYPE_METAL = 5; // State machine to search a subobject path.\n  // The LDraw standard establishes these various possible subfolders.\n\n  LDrawLoader.FILE_LOCATION_AS_IS = 0;\n  LDrawLoader.FILE_LOCATION_TRY_PARTS = 1;\n  LDrawLoader.FILE_LOCATION_TRY_P = 2;\n  LDrawLoader.FILE_LOCATION_TRY_MODELS = 3;\n  LDrawLoader.FILE_LOCATION_TRY_RELATIVE = 4;\n  LDrawLoader.FILE_LOCATION_TRY_ABSOLUTE = 5;\n  LDrawLoader.FILE_LOCATION_NOT_FOUND = 6;\n  LDrawLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n    constructor: LDrawLoader,\n    load: function load(url, onLoad, onProgress, onError) {\n      if (!this.fileMap) {\n        this.fileMap = {};\n      }\n\n      var scope = this;\n      var fileLoader = new FileLoader(this.manager);\n      fileLoader.setPath(this.path);\n      fileLoader.setRequestHeader(this.requestHeader);\n      fileLoader.setWithCredentials(this.withCredentials);\n      fileLoader.load(url, function (text) {\n        scope.processObject(text, onLoad, null, url);\n      }, onProgress, onError);\n    },\n    parse: function parse(text, path, onLoad) {\n      // Async parse.  This function calls onParse with the parsed THREE.Object3D as parameter\n      this.processObject(text, onLoad, null, path);\n    },\n    setMaterials: function setMaterials(materials) {\n      // Clears parse scopes stack, adds new scope with material library\n      this.parseScopesStack = [];\n      this.newParseScopeLevel(materials);\n      this.getCurrentParseScope().isFromParse = false;\n      this.materials = materials;\n      return this;\n    },\n    setFileMap: function setFileMap(fileMap) {\n      this.fileMap = fileMap;\n      return this;\n    },\n    newParseScopeLevel: function newParseScopeLevel(materials) {\n      // Adds a new scope level, assign materials to it and returns it\n      var matLib = {};\n\n      if (materials) {\n        for (var i = 0, n = materials.length; i < n; i++) {\n          var material = materials[i];\n          matLib[material.userData.code] = material;\n        }\n      }\n\n      var topParseScope = this.getCurrentParseScope();\n      var newParseScope = {\n        lib: matLib,\n        url: null,\n        // Subobjects\n        subobjects: null,\n        numSubobjects: 0,\n        subobjectIndex: 0,\n        inverted: false,\n        category: null,\n        keywords: null,\n        // Current subobject\n        currentFileName: null,\n        mainColourCode: topParseScope ? topParseScope.mainColourCode : '16',\n        mainEdgeColourCode: topParseScope ? topParseScope.mainEdgeColourCode : '24',\n        currentMatrix: new Matrix4(),\n        matrix: new Matrix4(),\n        // If false, it is a root material scope previous to parse\n        isFromParse: true,\n        triangles: null,\n        lineSegments: null,\n        conditionalSegments: null,\n        // If true, this object is the start of a construction step\n        startingConstructionStep: false\n      };\n      this.parseScopesStack.push(newParseScope);\n      return newParseScope;\n    },\n    removeScopeLevel: function removeScopeLevel() {\n      this.parseScopesStack.pop();\n      return this;\n    },\n    addMaterial: function addMaterial(material) {\n      // Adds a material to the material library which is on top of the parse scopes stack. And also to the materials array\n      var matLib = this.getCurrentParseScope().lib;\n\n      if (!matLib[material.userData.code]) {\n        this.materials.push(material);\n      }\n\n      matLib[material.userData.code] = material;\n      return this;\n    },\n    getMaterial: function getMaterial(colourCode) {\n      // Given a colour code search its material in the parse scopes stack\n      if (colourCode.startsWith('0x2')) {\n        // Special 'direct' material value (RGB colour)\n        var colour = colourCode.substring(3);\n        return this.parseColourMetaDirective(new LineParser('Direct_Color_' + colour + ' CODE -1 VALUE #' + colour + ' EDGE #' + colour + ''));\n      }\n\n      for (var i = this.parseScopesStack.length - 1; i >= 0; i--) {\n        var material = this.parseScopesStack[i].lib[colourCode];\n\n        if (material) {\n          return material;\n        }\n      } // Material was not found\n\n\n      return null;\n    },\n    getParentParseScope: function getParentParseScope() {\n      if (this.parseScopesStack.length > 1) {\n        return this.parseScopesStack[this.parseScopesStack.length - 2];\n      }\n\n      return null;\n    },\n    getCurrentParseScope: function getCurrentParseScope() {\n      if (this.parseScopesStack.length > 0) {\n        return this.parseScopesStack[this.parseScopesStack.length - 1];\n      }\n\n      return null;\n    },\n    parseColourMetaDirective: function parseColourMetaDirective(lineParser) {\n      // Parses a colour definition and returns a THREE.Material or null if error\n      var code = null; // Triangle and line colours\n\n      var colour = 0xff00ff;\n      var edgeColour = 0xff00ff; // Transparency\n\n      var alpha = 1;\n      var isTransparent = false; // Self-illumination:\n\n      var luminance = 0;\n      var finishType = LDrawLoader.FINISH_TYPE_DEFAULT;\n      var canHaveEnvMap = true;\n      var edgeMaterial = null;\n      var name = lineParser.getToken();\n\n      if (!name) {\n        throw 'LDrawLoader: Material name was expected after \"!COLOUR tag' + lineParser.getLineNumberString() + '.';\n      } // Parse tag tokens and their parameters\n\n\n      var token = null;\n\n      while (true) {\n        token = lineParser.getToken();\n\n        if (!token) {\n          break;\n        }\n\n        switch (token.toUpperCase()) {\n          case 'CODE':\n            code = lineParser.getToken();\n            break;\n\n          case 'VALUE':\n            colour = lineParser.getToken();\n\n            if (colour.startsWith('0x')) {\n              colour = '#' + colour.substring(2);\n            } else if (!colour.startsWith('#')) {\n              throw 'LDrawLoader: Invalid colour while parsing material' + lineParser.getLineNumberString() + '.';\n            }\n\n            break;\n\n          case 'EDGE':\n            edgeColour = lineParser.getToken();\n\n            if (edgeColour.startsWith('0x')) {\n              edgeColour = '#' + edgeColour.substring(2);\n            } else if (!edgeColour.startsWith('#')) {\n              // Try to see if edge colour is a colour code\n              edgeMaterial = this.getMaterial(edgeColour);\n\n              if (!edgeMaterial) {\n                throw 'LDrawLoader: Invalid edge colour while parsing material' + lineParser.getLineNumberString() + '.';\n              } // Get the edge material for this triangle material\n\n\n              edgeMaterial = edgeMaterial.userData.edgeMaterial;\n            }\n\n            break;\n\n          case 'ALPHA':\n            alpha = parseInt(lineParser.getToken());\n\n            if (isNaN(alpha)) {\n              throw 'LDrawLoader: Invalid alpha value in material definition' + lineParser.getLineNumberString() + '.';\n            }\n\n            alpha = Math.max(0, Math.min(1, alpha / 255));\n\n            if (alpha < 1) {\n              isTransparent = true;\n            }\n\n            break;\n\n          case 'LUMINANCE':\n            luminance = parseInt(lineParser.getToken());\n\n            if (isNaN(luminance)) {\n              throw 'LDrawLoader: Invalid luminance value in material definition' + LineParser.getLineNumberString() + '.';\n            }\n\n            luminance = Math.max(0, Math.min(1, luminance / 255));\n            break;\n\n          case 'CHROME':\n            finishType = LDrawLoader.FINISH_TYPE_CHROME;\n            break;\n\n          case 'PEARLESCENT':\n            finishType = LDrawLoader.FINISH_TYPE_PEARLESCENT;\n            break;\n\n          case 'RUBBER':\n            finishType = LDrawLoader.FINISH_TYPE_RUBBER;\n            break;\n\n          case 'MATTE_METALLIC':\n            finishType = LDrawLoader.FINISH_TYPE_MATTE_METALLIC;\n            break;\n\n          case 'METAL':\n            finishType = LDrawLoader.FINISH_TYPE_METAL;\n            break;\n\n          case 'MATERIAL':\n            // Not implemented\n            lineParser.setToEnd();\n            break;\n\n          default:\n            throw 'LDrawLoader: Unknown token \"' + token + '\" while parsing material' + lineParser.getLineNumberString() + '.';\n        }\n      }\n\n      var material = null;\n\n      switch (finishType) {\n        case LDrawLoader.FINISH_TYPE_DEFAULT:\n          material = new MeshStandardMaterial({\n            color: colour,\n            roughness: 0.3,\n            envMapIntensity: 0.3,\n            metalness: 0\n          });\n          break;\n\n        case LDrawLoader.FINISH_TYPE_PEARLESCENT:\n          // Try to imitate pearlescency by setting the specular to the complementary of the color, and low shininess\n          var specular = new Color(colour);\n          var hsl = specular.getHSL({\n            h: 0,\n            s: 0,\n            l: 0\n          });\n          hsl.h = (hsl.h + 0.5) % 1;\n          hsl.l = Math.min(1, hsl.l + (1 - hsl.l) * 0.7);\n          specular.setHSL(hsl.h, hsl.s, hsl.l);\n          material = new MeshPhongMaterial({\n            color: colour,\n            specular: specular,\n            shininess: 10,\n            reflectivity: 0.3\n          });\n          break;\n\n        case LDrawLoader.FINISH_TYPE_CHROME:\n          // Mirror finish surface\n          material = new MeshStandardMaterial({\n            color: colour,\n            roughness: 0,\n            metalness: 1\n          });\n          break;\n\n        case LDrawLoader.FINISH_TYPE_RUBBER:\n          // Rubber finish\n          material = new MeshStandardMaterial({\n            color: colour,\n            roughness: 0.9,\n            metalness: 0\n          });\n          canHaveEnvMap = false;\n          break;\n\n        case LDrawLoader.FINISH_TYPE_MATTE_METALLIC:\n          // Brushed metal finish\n          material = new MeshStandardMaterial({\n            color: colour,\n            roughness: 0.8,\n            metalness: 0.4\n          });\n          break;\n\n        case LDrawLoader.FINISH_TYPE_METAL:\n          // Average metal finish\n          material = new MeshStandardMaterial({\n            color: colour,\n            roughness: 0.2,\n            metalness: 0.85\n          });\n          break;\n      }\n\n      material.transparent = isTransparent;\n      material.premultipliedAlpha = true;\n      material.opacity = alpha;\n      material.depthWrite = !isTransparent;\n      material.polygonOffset = true;\n      material.polygonOffsetFactor = 1;\n      material.userData.canHaveEnvMap = canHaveEnvMap;\n\n      if (luminance !== 0) {\n        material.emissive.set(material.color).multiplyScalar(luminance);\n      }\n\n      if (!edgeMaterial) {\n        // This is the material used for edges\n        edgeMaterial = new LineBasicMaterial({\n          color: edgeColour,\n          transparent: isTransparent,\n          opacity: alpha,\n          depthWrite: !isTransparent\n        });\n        edgeMaterial.userData.code = code;\n        edgeMaterial.name = name + ' - Edge';\n        edgeMaterial.userData.canHaveEnvMap = false; // This is the material used for conditional edges\n\n        edgeMaterial.userData.conditionalEdgeMaterial = new ShaderMaterial({\n          vertexShader: conditionalLineVertShader,\n          fragmentShader: conditionalLineFragShader,\n          uniforms: UniformsUtils.merge([UniformsLib.fog, {\n            diffuse: {\n              value: new Color(edgeColour)\n            },\n            opacity: {\n              value: alpha\n            }\n          }]),\n          fog: true,\n          transparent: isTransparent,\n          depthWrite: !isTransparent\n        });\n        edgeMaterial.userData.conditionalEdgeMaterial.userData.canHaveEnvMap = false;\n      }\n\n      material.userData.code = code;\n      material.name = name;\n      material.userData.edgeMaterial = edgeMaterial;\n      return material;\n    },\n    //\n    objectParse: function objectParse(text) {\n      // Retrieve data from the parent parse scope\n      var parentParseScope = this.getParentParseScope(); // Main colour codes passed to this subobject (or default codes 16 and 24 if it is the root object)\n\n      var mainColourCode = parentParseScope.mainColourCode;\n      var mainEdgeColourCode = parentParseScope.mainEdgeColourCode;\n      var currentParseScope = this.getCurrentParseScope(); // Parse result variables\n\n      var triangles;\n      var lineSegments;\n      var conditionalSegments;\n      var subobjects = [];\n      var category = null;\n      var keywords = null;\n\n      if (text.indexOf('\\r\\n') !== -1) {\n        // This is faster than String.split with regex that splits on both\n        text = text.replace(/\\r\\n/g, '\\n');\n      }\n\n      var lines = text.split('\\n');\n      var numLines = lines.length;\n      var lineIndex = 0;\n      var parsingEmbeddedFiles = false;\n      var currentEmbeddedFileName = null;\n      var currentEmbeddedText = null;\n      var bfcCertified = false;\n      var bfcCCW = true;\n      var bfcInverted = false;\n      var bfcCull = true;\n      var type = '';\n      var startingConstructionStep = false;\n      var scope = this;\n\n      function parseColourCode(lineParser, forEdge) {\n        // Parses next colour code and returns a THREE.Material\n        var colourCode = lineParser.getToken();\n\n        if (!forEdge && colourCode === '16') {\n          colourCode = mainColourCode;\n        }\n\n        if (forEdge && colourCode === '24') {\n          colourCode = mainEdgeColourCode;\n        }\n\n        var material = scope.getMaterial(colourCode);\n\n        if (!material) {\n          throw 'LDrawLoader: Unknown colour code \"' + colourCode + '\" is used' + lineParser.getLineNumberString() + ' but it was not defined previously.';\n        }\n\n        return material;\n      }\n\n      function parseVector(lp) {\n        var v = new Vector3(parseFloat(lp.getToken()), parseFloat(lp.getToken()), parseFloat(lp.getToken()));\n\n        if (!scope.separateObjects) {\n          v.applyMatrix4(currentParseScope.currentMatrix);\n        }\n\n        return v;\n      } // Parse all line commands\n\n\n      for (lineIndex = 0; lineIndex < numLines; lineIndex++) {\n        var line = lines[lineIndex];\n        if (line.length === 0) continue;\n\n        if (parsingEmbeddedFiles) {\n          if (line.startsWith('0 FILE ')) {\n            // Save previous embedded file in the cache\n            this.subobjectCache[currentEmbeddedFileName.toLowerCase()] = currentEmbeddedText; // New embedded text file\n\n            currentEmbeddedFileName = line.substring(7);\n            currentEmbeddedText = '';\n          } else {\n            currentEmbeddedText += line + '\\n';\n          }\n\n          continue;\n        }\n\n        var lp = new LineParser(line, lineIndex + 1);\n        lp.seekNonSpace();\n\n        if (lp.isAtTheEnd()) {\n          // Empty line\n          continue;\n        } // Parse the line type\n\n\n        var lineType = lp.getToken();\n\n        switch (lineType) {\n          // Line type 0: Comment or META\n          case '0':\n            // Parse meta directive\n            var meta = lp.getToken();\n\n            if (meta) {\n              switch (meta) {\n                case '!LDRAW_ORG':\n                  type = lp.getToken();\n                  currentParseScope.triangles = [];\n                  currentParseScope.lineSegments = [];\n                  currentParseScope.conditionalSegments = [];\n                  currentParseScope.type = type;\n                  var isRoot = !parentParseScope.isFromParse;\n\n                  if (isRoot || scope.separateObjects && !isPrimitiveType(type)) {\n                    currentParseScope.groupObject = new Group();\n                    currentParseScope.groupObject.userData.startingConstructionStep = currentParseScope.startingConstructionStep;\n                  } // If the scale of the object is negated then the triangle winding order\n                  // needs to be flipped.\n\n\n                  var matrix = currentParseScope.matrix;\n\n                  if (matrix.determinant() < 0 && (scope.separateObjects && isPrimitiveType(type) || !scope.separateObjects)) {\n                    currentParseScope.inverted = !currentParseScope.inverted;\n                  }\n\n                  triangles = currentParseScope.triangles;\n                  lineSegments = currentParseScope.lineSegments;\n                  conditionalSegments = currentParseScope.conditionalSegments;\n                  break;\n\n                case '!COLOUR':\n                  var material = this.parseColourMetaDirective(lp);\n\n                  if (material) {\n                    this.addMaterial(material);\n                  } else {\n                    console.warn('LDrawLoader: Error parsing material' + lp.getLineNumberString());\n                  }\n\n                  break;\n\n                case '!CATEGORY':\n                  category = lp.getToken();\n                  break;\n\n                case '!KEYWORDS':\n                  var newKeywords = lp.getRemainingString().split(',');\n\n                  if (newKeywords.length > 0) {\n                    if (!keywords) {\n                      keywords = [];\n                    }\n\n                    newKeywords.forEach(function (keyword) {\n                      keywords.push(keyword.trim());\n                    });\n                  }\n\n                  break;\n\n                case 'FILE':\n                  if (lineIndex > 0) {\n                    // Start embedded text files parsing\n                    parsingEmbeddedFiles = true;\n                    currentEmbeddedFileName = lp.getRemainingString();\n                    currentEmbeddedText = '';\n                    bfcCertified = false;\n                    bfcCCW = true;\n                  }\n\n                  break;\n\n                case 'BFC':\n                  // Changes to the backface culling state\n                  while (!lp.isAtTheEnd()) {\n                    var token = lp.getToken();\n\n                    switch (token) {\n                      case 'CERTIFY':\n                      case 'NOCERTIFY':\n                        bfcCertified = token === 'CERTIFY';\n                        bfcCCW = true;\n                        break;\n\n                      case 'CW':\n                      case 'CCW':\n                        bfcCCW = token === 'CCW';\n                        break;\n\n                      case 'INVERTNEXT':\n                        bfcInverted = true;\n                        break;\n\n                      case 'CLIP':\n                      case 'NOCLIP':\n                        bfcCull = token === 'CLIP';\n                        break;\n\n                      default:\n                        console.warn('THREE.LDrawLoader: BFC directive \"' + token + '\" is unknown.');\n                        break;\n                    }\n                  }\n\n                  break;\n\n                case 'STEP':\n                  startingConstructionStep = true;\n                  break;\n              }\n            }\n\n            break;\n          // Line type 1: Sub-object file\n\n          case '1':\n            var material = parseColourCode(lp);\n            var posX = parseFloat(lp.getToken());\n            var posY = parseFloat(lp.getToken());\n            var posZ = parseFloat(lp.getToken());\n            var m0 = parseFloat(lp.getToken());\n            var m1 = parseFloat(lp.getToken());\n            var m2 = parseFloat(lp.getToken());\n            var m3 = parseFloat(lp.getToken());\n            var m4 = parseFloat(lp.getToken());\n            var m5 = parseFloat(lp.getToken());\n            var m6 = parseFloat(lp.getToken());\n            var m7 = parseFloat(lp.getToken());\n            var m8 = parseFloat(lp.getToken());\n            var matrix = new Matrix4().set(m0, m1, m2, posX, m3, m4, m5, posY, m6, m7, m8, posZ, 0, 0, 0, 1);\n            var fileName = lp.getRemainingString().trim().replace(/\\\\/g, '/');\n\n            if (scope.fileMap[fileName]) {\n              // Found the subobject path in the preloaded file path map\n              fileName = scope.fileMap[fileName];\n            } else {\n              // Standardized subfolders\n              if (fileName.startsWith('s/')) {\n                fileName = 'parts/' + fileName;\n              } else if (fileName.startsWith('48/')) {\n                fileName = 'p/' + fileName;\n              }\n            }\n\n            subobjects.push({\n              material: material,\n              matrix: matrix,\n              fileName: fileName,\n              originalFileName: fileName,\n              locationState: LDrawLoader.FILE_LOCATION_AS_IS,\n              url: null,\n              triedLowerCase: false,\n              inverted: bfcInverted !== currentParseScope.inverted,\n              startingConstructionStep: startingConstructionStep\n            });\n            bfcInverted = false;\n            break;\n          // Line type 2: Line segment\n\n          case '2':\n            var material = parseColourCode(lp, true);\n            var segment = {\n              material: material.userData.edgeMaterial,\n              colourCode: material.userData.code,\n              v0: parseVector(lp),\n              v1: parseVector(lp)\n            };\n            lineSegments.push(segment);\n            break;\n          // Line type 5: Conditional Line segment\n\n          case '5':\n            var material = parseColourCode(lp, true);\n            var segment = {\n              material: material.userData.edgeMaterial.userData.conditionalEdgeMaterial,\n              colourCode: material.userData.code,\n              v0: parseVector(lp),\n              v1: parseVector(lp),\n              c0: parseVector(lp),\n              c1: parseVector(lp)\n            };\n            conditionalSegments.push(segment);\n            break;\n          // Line type 3: Triangle\n\n          case '3':\n            var material = parseColourCode(lp);\n            var inverted = currentParseScope.inverted;\n            var ccw = bfcCCW !== inverted;\n            var doubleSided = !bfcCertified || !bfcCull;\n            var v0, v1, v2, faceNormal;\n\n            if (ccw === true) {\n              v0 = parseVector(lp);\n              v1 = parseVector(lp);\n              v2 = parseVector(lp);\n            } else {\n              v2 = parseVector(lp);\n              v1 = parseVector(lp);\n              v0 = parseVector(lp);\n            }\n\n            tempVec0.subVectors(v1, v0);\n            tempVec1.subVectors(v2, v1);\n            faceNormal = new Vector3().crossVectors(tempVec0, tempVec1).normalize();\n            triangles.push({\n              material: material,\n              colourCode: material.userData.code,\n              v0: v0,\n              v1: v1,\n              v2: v2,\n              faceNormal: faceNormal,\n              n0: null,\n              n1: null,\n              n2: null\n            });\n\n            if (doubleSided === true) {\n              triangles.push({\n                material: material,\n                colourCode: material.userData.code,\n                v0: v0,\n                v1: v2,\n                v2: v1,\n                faceNormal: faceNormal,\n                n0: null,\n                n1: null,\n                n2: null\n              });\n            }\n\n            break;\n          // Line type 4: Quadrilateral\n\n          case '4':\n            var material = parseColourCode(lp);\n            var inverted = currentParseScope.inverted;\n            var ccw = bfcCCW !== inverted;\n            var doubleSided = !bfcCertified || !bfcCull;\n            var v0, v1, v2, v3, faceNormal;\n\n            if (ccw === true) {\n              v0 = parseVector(lp);\n              v1 = parseVector(lp);\n              v2 = parseVector(lp);\n              v3 = parseVector(lp);\n            } else {\n              v3 = parseVector(lp);\n              v2 = parseVector(lp);\n              v1 = parseVector(lp);\n              v0 = parseVector(lp);\n            }\n\n            tempVec0.subVectors(v1, v0);\n            tempVec1.subVectors(v2, v1);\n            faceNormal = new Vector3().crossVectors(tempVec0, tempVec1).normalize();\n            triangles.push({\n              material: material,\n              colourCode: material.userData.code,\n              v0: v0,\n              v1: v1,\n              v2: v2,\n              faceNormal: faceNormal,\n              n0: null,\n              n1: null,\n              n2: null\n            });\n            triangles.push({\n              material: material,\n              colourCode: material.userData.code,\n              v0: v0,\n              v1: v2,\n              v2: v3,\n              faceNormal: faceNormal,\n              n0: null,\n              n1: null,\n              n2: null\n            });\n\n            if (doubleSided === true) {\n              triangles.push({\n                material: material,\n                colourCode: material.userData.code,\n                v0: v0,\n                v1: v2,\n                v2: v1,\n                faceNormal: faceNormal,\n                n0: null,\n                n1: null,\n                n2: null\n              });\n              triangles.push({\n                material: material,\n                colourCode: material.userData.code,\n                v0: v0,\n                v1: v3,\n                v2: v2,\n                faceNormal: faceNormal,\n                n0: null,\n                n1: null,\n                n2: null\n              });\n            }\n\n            break;\n\n          default:\n            throw 'LDrawLoader: Unknown line type \"' + lineType + '\"' + lp.getLineNumberString() + '.';\n        }\n      }\n\n      if (parsingEmbeddedFiles) {\n        this.subobjectCache[currentEmbeddedFileName.toLowerCase()] = currentEmbeddedText;\n      }\n\n      currentParseScope.category = category;\n      currentParseScope.keywords = keywords;\n      currentParseScope.subobjects = subobjects;\n      currentParseScope.numSubobjects = subobjects.length;\n      currentParseScope.subobjectIndex = 0;\n    },\n    computeConstructionSteps: function computeConstructionSteps(model) {\n      // Sets userdata.constructionStep number in Group objects and userData.numConstructionSteps number in the root Group object.\n      var stepNumber = 0;\n      model.traverse(function (c) {\n        if (c.isGroup) {\n          if (c.userData.startingConstructionStep) {\n            stepNumber++;\n          }\n\n          c.userData.constructionStep = stepNumber;\n        }\n      });\n      model.userData.numConstructionSteps = stepNumber + 1;\n    },\n    processObject: function processObject(text, onProcessed, subobject, url) {\n      var scope = this;\n      var parseScope = scope.newParseScopeLevel();\n      parseScope.url = url;\n      var parentParseScope = scope.getParentParseScope(); // Set current matrix\n\n      if (subobject) {\n        parseScope.currentMatrix.multiplyMatrices(parentParseScope.currentMatrix, subobject.matrix);\n        parseScope.matrix.copy(subobject.matrix);\n        parseScope.inverted = subobject.inverted;\n        parseScope.startingConstructionStep = subobject.startingConstructionStep;\n      } // Add to cache\n\n\n      var currentFileName = parentParseScope.currentFileName;\n\n      if (currentFileName !== null) {\n        currentFileName = parentParseScope.currentFileName.toLowerCase();\n      }\n\n      if (scope.subobjectCache[currentFileName] === undefined) {\n        scope.subobjectCache[currentFileName] = text;\n      } // Parse the object (returns a Group)\n\n\n      scope.objectParse(text);\n      var finishedCount = 0;\n      onSubobjectFinish();\n\n      function onSubobjectFinish() {\n        finishedCount++;\n\n        if (finishedCount === parseScope.subobjects.length + 1) {\n          finalizeObject();\n        } else {\n          // Once the previous subobject has finished we can start processing the next one in the list.\n          // The subobject processing shares scope in processing so it's important that they be loaded serially\n          // to avoid race conditions.\n          // Promise.resolve is used as an approach to asynchronously schedule a task _before_ this frame ends to\n          // avoid stack overflow exceptions when loading many subobjects from the cache. RequestAnimationFrame\n          // will work but causes the load to happen after the next frame which causes the load to take significantly longer.\n          var subobject = parseScope.subobjects[parseScope.subobjectIndex];\n          Promise.resolve().then(function () {\n            loadSubobject(subobject);\n          });\n          parseScope.subobjectIndex++;\n        }\n      }\n\n      function finalizeObject() {\n        if (scope.smoothNormals && parseScope.type === 'Part') {\n          smoothNormals(parseScope.triangles, parseScope.lineSegments);\n        }\n\n        var isRoot = !parentParseScope.isFromParse;\n\n        if (scope.separateObjects && !isPrimitiveType(parseScope.type) || isRoot) {\n          var objGroup = parseScope.groupObject;\n\n          if (parseScope.triangles.length > 0) {\n            objGroup.add(createObject(parseScope.triangles, 3));\n          }\n\n          if (parseScope.lineSegments.length > 0) {\n            objGroup.add(createObject(parseScope.lineSegments, 2));\n          }\n\n          if (parseScope.conditionalSegments.length > 0) {\n            objGroup.add(createObject(parseScope.conditionalSegments, 2, true));\n          }\n\n          if (parentParseScope.groupObject) {\n            objGroup.name = parseScope.fileName;\n            objGroup.userData.category = parseScope.category;\n            objGroup.userData.keywords = parseScope.keywords;\n            parseScope.matrix.decompose(objGroup.position, objGroup.quaternion, objGroup.scale);\n            parentParseScope.groupObject.add(objGroup);\n          }\n        } else {\n          var separateObjects = scope.separateObjects;\n          var parentLineSegments = parentParseScope.lineSegments;\n          var parentConditionalSegments = parentParseScope.conditionalSegments;\n          var parentTriangles = parentParseScope.triangles;\n          var lineSegments = parseScope.lineSegments;\n          var conditionalSegments = parseScope.conditionalSegments;\n          var triangles = parseScope.triangles;\n\n          for (var i = 0, l = lineSegments.length; i < l; i++) {\n            var ls = lineSegments[i];\n\n            if (separateObjects) {\n              ls.v0.applyMatrix4(parseScope.matrix);\n              ls.v1.applyMatrix4(parseScope.matrix);\n            }\n\n            parentLineSegments.push(ls);\n          }\n\n          for (var _i5 = 0, _l4 = conditionalSegments.length; _i5 < _l4; _i5++) {\n            var os = conditionalSegments[_i5];\n\n            if (separateObjects) {\n              os.v0.applyMatrix4(parseScope.matrix);\n              os.v1.applyMatrix4(parseScope.matrix);\n              os.c0.applyMatrix4(parseScope.matrix);\n              os.c1.applyMatrix4(parseScope.matrix);\n            }\n\n            parentConditionalSegments.push(os);\n          }\n\n          for (var _i6 = 0, _l5 = triangles.length; _i6 < _l5; _i6++) {\n            var tri = triangles[_i6];\n\n            if (separateObjects) {\n              tri.v0 = tri.v0.clone().applyMatrix4(parseScope.matrix);\n              tri.v1 = tri.v1.clone().applyMatrix4(parseScope.matrix);\n              tri.v2 = tri.v2.clone().applyMatrix4(parseScope.matrix);\n              tempVec0.subVectors(tri.v1, tri.v0);\n              tempVec1.subVectors(tri.v2, tri.v1);\n              tri.faceNormal.crossVectors(tempVec0, tempVec1).normalize();\n            }\n\n            parentTriangles.push(tri);\n          }\n        }\n\n        scope.removeScopeLevel(); // If it is root object, compute construction steps\n\n        if (!parentParseScope.isFromParse) {\n          scope.computeConstructionSteps(parseScope.groupObject);\n        }\n\n        if (onProcessed) {\n          onProcessed(parseScope.groupObject);\n        }\n      }\n\n      function loadSubobject(subobject) {\n        parseScope.mainColourCode = subobject.material.userData.code;\n        parseScope.mainEdgeColourCode = subobject.material.userData.edgeMaterial.userData.code;\n        parseScope.currentFileName = subobject.originalFileName; // If subobject was cached previously, use the cached one\n\n        var cached = scope.subobjectCache[subobject.originalFileName.toLowerCase()];\n\n        if (cached) {\n          scope.processObject(cached, function (subobjectGroup) {\n            onSubobjectLoaded(subobjectGroup, subobject);\n            onSubobjectFinish();\n          }, subobject, url);\n          return;\n        } // Adjust file name to locate the subobject file path in standard locations (always under directory scope.path)\n        // Update also subobject.locationState for the next try if this load fails.\n\n\n        var subobjectURL = subobject.fileName;\n        var newLocationState = LDrawLoader.FILE_LOCATION_NOT_FOUND;\n\n        switch (subobject.locationState) {\n          case LDrawLoader.FILE_LOCATION_AS_IS:\n            newLocationState = subobject.locationState + 1;\n            break;\n\n          case LDrawLoader.FILE_LOCATION_TRY_PARTS:\n            subobjectURL = 'parts/' + subobjectURL;\n            newLocationState = subobject.locationState + 1;\n            break;\n\n          case LDrawLoader.FILE_LOCATION_TRY_P:\n            subobjectURL = 'p/' + subobjectURL;\n            newLocationState = subobject.locationState + 1;\n            break;\n\n          case LDrawLoader.FILE_LOCATION_TRY_MODELS:\n            subobjectURL = 'models/' + subobjectURL;\n            newLocationState = subobject.locationState + 1;\n            break;\n\n          case LDrawLoader.FILE_LOCATION_TRY_RELATIVE:\n            subobjectURL = url.substring(0, url.lastIndexOf('/') + 1) + subobjectURL;\n            newLocationState = subobject.locationState + 1;\n            break;\n\n          case LDrawLoader.FILE_LOCATION_TRY_ABSOLUTE:\n            if (subobject.triedLowerCase) {\n              // Try absolute path\n              newLocationState = LDrawLoader.FILE_LOCATION_NOT_FOUND;\n            } else {\n              // Next attempt is lower case\n              subobject.fileName = subobject.fileName.toLowerCase();\n              subobjectURL = subobject.fileName;\n              subobject.triedLowerCase = true;\n              newLocationState = LDrawLoader.FILE_LOCATION_AS_IS;\n            }\n\n            break;\n\n          case LDrawLoader.FILE_LOCATION_NOT_FOUND:\n            // All location possibilities have been tried, give up loading this object\n            console.warn('LDrawLoader: Subobject \"' + subobject.originalFileName + '\" could not be found.');\n            return;\n        }\n\n        subobject.locationState = newLocationState;\n        subobject.url = subobjectURL; // Load the subobject\n        // Use another file loader here so we can keep track of the subobject information\n        // and use it when processing the next model.\n\n        var fileLoader = new FileLoader(scope.manager);\n        fileLoader.setPath(scope.path);\n        fileLoader.setRequestHeader(scope.requestHeader);\n        fileLoader.setWithCredentials(scope.withCredentials);\n        fileLoader.load(subobjectURL, function (text) {\n          scope.processObject(text, function (subobjectGroup) {\n            onSubobjectLoaded(subobjectGroup, subobject);\n            onSubobjectFinish();\n          }, subobject, url);\n        }, undefined, function (err) {\n          onSubobjectError(err, subobject);\n        }, subobject);\n      }\n\n      function onSubobjectLoaded(subobjectGroup, subobject) {\n        if (subobjectGroup === null) {\n          // Try to reload\n          loadSubobject(subobject);\n          return;\n        }\n\n        scope.fileMap[subobject.originalFileName] = subobject.url;\n      }\n\n      function onSubobjectError(err, subobject) {\n        // Retry download from a different default possible location\n        loadSubobject(subobject);\n      }\n    }\n  });\n  return LDrawLoader;\n}();\n\nexport { LDrawLoader };","map":{"version":3,"names":["Vector3","Loader","FileLoader","Matrix4","MeshStandardMaterial","Color","MeshPhongMaterial","LineBasicMaterial","ShaderMaterial","UniformsUtils","UniformsLib","Group","BufferGeometry","Float32BufferAttribute","LineSegments","Mesh","BufferAttribute","LDrawLoader","conditionalLineVertShader","conditionalLineFragShader","tempVec0","tempVec1","smoothNormals","triangles","lineSegments","hashVertex","v","x","y","z","hashEdge","v0","v1","hardEdges","Set","halfEdgeList","fullHalfEdgeList","normals","i","l","length","ls","add","tri","i2","l2","index","next","hash","has","halfEdges","Object","keys","queue","faceNormal","n0","clone","push","n1","n2","reverseHash","otherTri","Math","abs","dot","i3","l3","otherIndex","otherNext","otherV0","otherV1","otherHash","norm","normalize","isPrimitiveType","type","test","LineParser","line","lineNumber","lineLength","currentCharIndex","currentChar","prototype","constructor","seekNonSpace","charAt","getToken","pos0","pos1","substring","getRemainingString","isAtTheEnd","setToEnd","getLineNumberString","sortByMaterial","a","b","colourCode","createObject","elements","elementSize","isConditionalSegments","sort","positions","materials","bufferGeometry","prevMaterial","index0","numGroupVerts","iElem","nElem","elem","v2","material","addGroup","Infinity","setAttribute","object3d","isConditionalLine","controlArray0","Float32Array","controlArray1","directionArray","os","c0","c1","manager","call","parseScopesStack","subobjectCache","fileMap","setMaterials","parseColourMetaDirective","separateObjects","FINISH_TYPE_DEFAULT","FINISH_TYPE_CHROME","FINISH_TYPE_PEARLESCENT","FINISH_TYPE_RUBBER","FINISH_TYPE_MATTE_METALLIC","FINISH_TYPE_METAL","FILE_LOCATION_AS_IS","FILE_LOCATION_TRY_PARTS","FILE_LOCATION_TRY_P","FILE_LOCATION_TRY_MODELS","FILE_LOCATION_TRY_RELATIVE","FILE_LOCATION_TRY_ABSOLUTE","FILE_LOCATION_NOT_FOUND","assign","create","load","url","onLoad","onProgress","onError","scope","fileLoader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","processObject","parse","newParseScopeLevel","getCurrentParseScope","isFromParse","setFileMap","matLib","n","userData","code","topParseScope","newParseScope","lib","subobjects","numSubobjects","subobjectIndex","inverted","category","keywords","currentFileName","mainColourCode","mainEdgeColourCode","currentMatrix","matrix","conditionalSegments","startingConstructionStep","removeScopeLevel","pop","addMaterial","getMaterial","startsWith","colour","getParentParseScope","lineParser","edgeColour","alpha","isTransparent","luminance","finishType","canHaveEnvMap","edgeMaterial","name","token","toUpperCase","parseInt","isNaN","max","min","color","roughness","envMapIntensity","metalness","specular","hsl","getHSL","h","s","setHSL","shininess","reflectivity","transparent","premultipliedAlpha","opacity","depthWrite","polygonOffset","polygonOffsetFactor","emissive","set","multiplyScalar","conditionalEdgeMaterial","vertexShader","fragmentShader","uniforms","merge","fog","diffuse","value","objectParse","parentParseScope","currentParseScope","indexOf","replace","lines","split","numLines","lineIndex","parsingEmbeddedFiles","currentEmbeddedFileName","currentEmbeddedText","bfcCertified","bfcCCW","bfcInverted","bfcCull","parseColourCode","forEdge","parseVector","lp","parseFloat","applyMatrix4","toLowerCase","lineType","meta","isRoot","groupObject","determinant","console","warn","newKeywords","forEach","keyword","trim","posX","posY","posZ","m0","m1","m2","m3","m4","m5","m6","m7","m8","fileName","originalFileName","locationState","triedLowerCase","segment","ccw","doubleSided","subVectors","crossVectors","v3","computeConstructionSteps","model","stepNumber","traverse","c","isGroup","constructionStep","numConstructionSteps","onProcessed","subobject","parseScope","multiplyMatrices","copy","undefined","finishedCount","onSubobjectFinish","finalizeObject","Promise","resolve","then","loadSubobject","objGroup","decompose","position","quaternion","scale","parentLineSegments","parentConditionalSegments","parentTriangles","cached","subobjectGroup","onSubobjectLoaded","subobjectURL","newLocationState","lastIndexOf","err","onSubobjectError"],"sources":["/Users/98yaroslavgorban/Desktop/gltfjsx-forked/node_modules/three-stdlib/loaders/LDrawLoader.js"],"sourcesContent":["import { Vector3, Loader, FileLoader, Matrix4, MeshStandardMaterial, Color, MeshPhongMaterial, LineBasicMaterial, ShaderMaterial, UniformsUtils, UniformsLib, Group, BufferGeometry, Float32BufferAttribute, LineSegments, Mesh, BufferAttribute } from 'three';\n\nvar LDrawLoader = function () {\n  var conditionalLineVertShader =\n  /* glsl */\n  `\n\tattribute vec3 control0;\n\tattribute vec3 control1;\n\tattribute vec3 direction;\n\tvarying float discardFlag;\n\n\t#include <common>\n\t#include <color_pars_vertex>\n\t#include <fog_pars_vertex>\n\t#include <logdepthbuf_pars_vertex>\n\t#include <clipping_planes_pars_vertex>\n\tvoid main() {\n\t\t#include <color_vertex>\n\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t// Transform the line segment ends and control points into camera clip space\n\t\tvec4 c0 = projectionMatrix * modelViewMatrix * vec4( control0, 1.0 );\n\t\tvec4 c1 = projectionMatrix * modelViewMatrix * vec4( control1, 1.0 );\n\t\tvec4 p0 = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\tvec4 p1 = projectionMatrix * modelViewMatrix * vec4( position + direction, 1.0 );\n\n\t\tc0.xy /= c0.w;\n\t\tc1.xy /= c1.w;\n\t\tp0.xy /= p0.w;\n\t\tp1.xy /= p1.w;\n\n\t\t// Get the direction of the segment and an orthogonal vector\n\t\tvec2 dir = p1.xy - p0.xy;\n\t\tvec2 norm = vec2( -dir.y, dir.x );\n\n\t\t// Get control point directions from the line\n\t\tvec2 c0dir = c0.xy - p1.xy;\n\t\tvec2 c1dir = c1.xy - p1.xy;\n\n\t\t// If the vectors to the controls points are pointed in different directions away\n\t\t// from the line segment then the line should not be drawn.\n\t\tfloat d0 = dot( normalize( norm ), normalize( c0dir ) );\n\t\tfloat d1 = dot( normalize( norm ), normalize( c1dir ) );\n\t\tdiscardFlag = float( sign( d0 ) != sign( d1 ) );\n\n\t\t#include <logdepthbuf_vertex>\n\t\t#include <clipping_planes_vertex>\n\t\t#include <fog_vertex>\n\t}\n\t`;\n  var conditionalLineFragShader =\n  /* glsl */\n  `\n\tuniform vec3 diffuse;\n\tuniform float opacity;\n\tvarying float discardFlag;\n\n\t#include <common>\n\t#include <color_pars_fragment>\n\t#include <fog_pars_fragment>\n\t#include <logdepthbuf_pars_fragment>\n\t#include <clipping_planes_pars_fragment>\n\tvoid main() {\n\n\t\tif ( discardFlag > 0.5 ) discard;\n\n\t\t#include <clipping_planes_fragment>\n\t\tvec3 outgoingLight = vec3( 0.0 );\n\t\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t\t#include <logdepthbuf_fragment>\n\t\t#include <color_fragment>\n\t\toutgoingLight = diffuseColor.rgb; // simple shader\n\t\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t\t#include <tonemapping_fragment>\n\t\t#include <encodings_fragment>\n\t\t#include <fog_fragment>\n\t\t#include <premultiplied_alpha_fragment>\n\t}\n\t`;\n  var tempVec0 = new Vector3();\n  var tempVec1 = new Vector3();\n\n  function smoothNormals(triangles, lineSegments) {\n    function hashVertex(v) {\n      // NOTE: 1e2 is pretty coarse but was chosen because it allows edges\n      // to be smoothed as expected (see minifig arms). The errors between edges\n      // could be due to matrix multiplication.\n      var x = ~~(v.x * 1e2);\n      var y = ~~(v.y * 1e2);\n      var z = ~~(v.z * 1e2);\n      return `${x},${y},${z}`;\n    }\n\n    function hashEdge(v0, v1) {\n      return `${hashVertex(v0)}_${hashVertex(v1)}`;\n    }\n\n    var hardEdges = new Set();\n    var halfEdgeList = {};\n    var fullHalfEdgeList = {};\n    var normals = []; // Save the list of hard edges by hash\n\n    for (let i = 0, l = lineSegments.length; i < l; i++) {\n      var ls = lineSegments[i];\n      var v0 = ls.v0;\n      var v1 = ls.v1;\n      hardEdges.add(hashEdge(v0, v1));\n      hardEdges.add(hashEdge(v1, v0));\n    } // track the half edges associated with each triangle\n\n\n    for (let i = 0, l = triangles.length; i < l; i++) {\n      var tri = triangles[i];\n\n      for (let i2 = 0, l2 = 3; i2 < l2; i2++) {\n        var index = i2;\n        var next = (i2 + 1) % 3;\n        var v0 = tri[`v${index}`];\n        var v1 = tri[`v${next}`];\n        var hash = hashEdge(v0, v1); // don't add the triangle if the edge is supposed to be hard\n\n        if (hardEdges.has(hash)) continue;\n        halfEdgeList[hash] = tri;\n        fullHalfEdgeList[hash] = tri;\n      }\n    } // NOTE: Some of the normals wind up being skewed in an unexpected way because\n    // quads provide more \"influence\" to some vertex normals than a triangle due to\n    // the fact that a quad is made up of two triangles and all triangles are weighted\n    // equally. To fix this quads could be tracked separately so their vertex normals\n    // are weighted appropriately or we could try only adding a normal direction\n    // once per normal.\n    // Iterate until we've tried to connect all triangles to share normals\n\n\n    while (true) {\n      // Stop if there are no more triangles left\n      var halfEdges = Object.keys(halfEdgeList);\n      if (halfEdges.length === 0) break; // Exhaustively find all connected triangles\n\n      var i = 0;\n      var queue = [fullHalfEdgeList[halfEdges[0]]];\n\n      while (i < queue.length) {\n        // initialize all vertex normals in this triangle\n        var tri = queue[i];\n        i++;\n        var faceNormal = tri.faceNormal;\n\n        if (tri.n0 === null) {\n          tri.n0 = faceNormal.clone();\n          normals.push(tri.n0);\n        }\n\n        if (tri.n1 === null) {\n          tri.n1 = faceNormal.clone();\n          normals.push(tri.n1);\n        }\n\n        if (tri.n2 === null) {\n          tri.n2 = faceNormal.clone();\n          normals.push(tri.n2);\n        } // Check if any edge is connected to another triangle edge\n\n\n        for (let i2 = 0, l2 = 3; i2 < l2; i2++) {\n          var index = i2;\n          var next = (i2 + 1) % 3;\n          var v0 = tri[`v${index}`];\n          var v1 = tri[`v${next}`]; // delete this triangle from the list so it won't be found again\n\n          var hash = hashEdge(v0, v1);\n          delete halfEdgeList[hash];\n          var reverseHash = hashEdge(v1, v0);\n          var otherTri = fullHalfEdgeList[reverseHash];\n\n          if (otherTri) {\n            // NOTE: If the angle between triangles is > 67.5 degrees then assume it's\n            // hard edge. There are some cases where the line segments do not line up exactly\n            // with or span multiple triangle edges (see Lunar Vehicle wheels).\n            if (Math.abs(otherTri.faceNormal.dot(tri.faceNormal)) < 0.25) {\n              continue;\n            } // if this triangle has already been traversed then it won't be in\n            // the halfEdgeList. If it has not then add it to the queue and delete\n            // it so it won't be found again.\n\n\n            if (reverseHash in halfEdgeList) {\n              queue.push(otherTri);\n              delete halfEdgeList[reverseHash];\n            } // Find the matching edge in this triangle and copy the normal vector over\n\n\n            for (let i3 = 0, l3 = 3; i3 < l3; i3++) {\n              var otherIndex = i3;\n              var otherNext = (i3 + 1) % 3;\n              var otherV0 = otherTri[`v${otherIndex}`];\n              var otherV1 = otherTri[`v${otherNext}`];\n              var otherHash = hashEdge(otherV0, otherV1);\n\n              if (otherHash === reverseHash) {\n                if (otherTri[`n${otherIndex}`] === null) {\n                  var norm = tri[`n${next}`];\n                  otherTri[`n${otherIndex}`] = norm;\n                  norm.add(otherTri.faceNormal);\n                }\n\n                if (otherTri[`n${otherNext}`] === null) {\n                  var norm = tri[`n${index}`];\n                  otherTri[`n${otherNext}`] = norm;\n                  norm.add(otherTri.faceNormal);\n                }\n\n                break;\n              }\n            }\n          }\n        }\n      }\n    } // The normals of each face have been added up so now we average them by normalizing the vector.\n\n\n    for (let i = 0, l = normals.length; i < l; i++) {\n      normals[i].normalize();\n    }\n  }\n\n  function isPrimitiveType(type) {\n    return /primitive/i.test(type) || type === 'Subpart';\n  }\n\n  function LineParser(line, lineNumber) {\n    this.line = line;\n    this.lineLength = line.length;\n    this.currentCharIndex = 0;\n    this.currentChar = ' ';\n    this.lineNumber = lineNumber;\n  }\n\n  LineParser.prototype = {\n    constructor: LineParser,\n    seekNonSpace: function () {\n      while (this.currentCharIndex < this.lineLength) {\n        this.currentChar = this.line.charAt(this.currentCharIndex);\n\n        if (this.currentChar !== ' ' && this.currentChar !== '\\t') {\n          return;\n        }\n\n        this.currentCharIndex++;\n      }\n    },\n    getToken: function () {\n      var pos0 = this.currentCharIndex++; // Seek space\n\n      while (this.currentCharIndex < this.lineLength) {\n        this.currentChar = this.line.charAt(this.currentCharIndex);\n\n        if (this.currentChar === ' ' || this.currentChar === '\\t') {\n          break;\n        }\n\n        this.currentCharIndex++;\n      }\n\n      var pos1 = this.currentCharIndex;\n      this.seekNonSpace();\n      return this.line.substring(pos0, pos1);\n    },\n    getRemainingString: function () {\n      return this.line.substring(this.currentCharIndex, this.lineLength);\n    },\n    isAtTheEnd: function () {\n      return this.currentCharIndex >= this.lineLength;\n    },\n    setToEnd: function () {\n      this.currentCharIndex = this.lineLength;\n    },\n    getLineNumberString: function () {\n      return this.lineNumber >= 0 ? ' at line ' + this.lineNumber : '';\n    }\n  };\n\n  function sortByMaterial(a, b) {\n    if (a.colourCode === b.colourCode) {\n      return 0;\n    }\n\n    if (a.colourCode < b.colourCode) {\n      return -1;\n    }\n\n    return 1;\n  }\n\n  function createObject(elements, elementSize, isConditionalSegments) {\n    // Creates a LineSegments (elementSize = 2) or a Mesh (elementSize = 3 )\n    // With per face / segment material, implemented with mesh groups and materials array\n    // Sort the triangles or line segments by colour code to make later the mesh groups\n    elements.sort(sortByMaterial);\n    var positions = [];\n    var normals = [];\n    var materials = [];\n    var bufferGeometry = new BufferGeometry();\n    var prevMaterial = null;\n    var index0 = 0;\n    var numGroupVerts = 0;\n\n    for (let iElem = 0, nElem = elements.length; iElem < nElem; iElem++) {\n      var elem = elements[iElem];\n      var v0 = elem.v0;\n      var v1 = elem.v1; // Note that LDraw coordinate system is rotated 180 deg. in the X axis w.r.t. Three.js's one\n\n      positions.push(v0.x, v0.y, v0.z, v1.x, v1.y, v1.z);\n\n      if (elementSize === 3) {\n        positions.push(elem.v2.x, elem.v2.y, elem.v2.z);\n        var n0 = elem.n0 || elem.faceNormal;\n        var n1 = elem.n1 || elem.faceNormal;\n        var n2 = elem.n2 || elem.faceNormal;\n        normals.push(n0.x, n0.y, n0.z);\n        normals.push(n1.x, n1.y, n1.z);\n        normals.push(n2.x, n2.y, n2.z);\n      }\n\n      if (prevMaterial !== elem.material) {\n        if (prevMaterial !== null) {\n          bufferGeometry.addGroup(index0, numGroupVerts, materials.length - 1);\n        }\n\n        materials.push(elem.material);\n        prevMaterial = elem.material;\n        index0 = iElem * elementSize;\n        numGroupVerts = elementSize;\n      } else {\n        numGroupVerts += elementSize;\n      }\n    }\n\n    if (numGroupVerts > 0) {\n      bufferGeometry.addGroup(index0, Infinity, materials.length - 1);\n    }\n\n    bufferGeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\n    if (elementSize === 3) {\n      bufferGeometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    }\n\n    var object3d = null;\n\n    if (elementSize === 2) {\n      object3d = new LineSegments(bufferGeometry, materials);\n    } else if (elementSize === 3) {\n      object3d = new Mesh(bufferGeometry, materials);\n    }\n\n    if (isConditionalSegments) {\n      object3d.isConditionalLine = true;\n      var controlArray0 = new Float32Array(elements.length * 3 * 2);\n      var controlArray1 = new Float32Array(elements.length * 3 * 2);\n      var directionArray = new Float32Array(elements.length * 3 * 2);\n\n      for (let i = 0, l = elements.length; i < l; i++) {\n        var os = elements[i];\n        var c0 = os.c0;\n        var c1 = os.c1;\n        var v0 = os.v0;\n        var v1 = os.v1;\n        var index = i * 3 * 2;\n        controlArray0[index + 0] = c0.x;\n        controlArray0[index + 1] = c0.y;\n        controlArray0[index + 2] = c0.z;\n        controlArray0[index + 3] = c0.x;\n        controlArray0[index + 4] = c0.y;\n        controlArray0[index + 5] = c0.z;\n        controlArray1[index + 0] = c1.x;\n        controlArray1[index + 1] = c1.y;\n        controlArray1[index + 2] = c1.z;\n        controlArray1[index + 3] = c1.x;\n        controlArray1[index + 4] = c1.y;\n        controlArray1[index + 5] = c1.z;\n        directionArray[index + 0] = v1.x - v0.x;\n        directionArray[index + 1] = v1.y - v0.y;\n        directionArray[index + 2] = v1.z - v0.z;\n        directionArray[index + 3] = v1.x - v0.x;\n        directionArray[index + 4] = v1.y - v0.y;\n        directionArray[index + 5] = v1.z - v0.z;\n      }\n\n      bufferGeometry.setAttribute('control0', new BufferAttribute(controlArray0, 3, false));\n      bufferGeometry.setAttribute('control1', new BufferAttribute(controlArray1, 3, false));\n      bufferGeometry.setAttribute('direction', new BufferAttribute(directionArray, 3, false));\n    }\n\n    return object3d;\n  } //\n\n\n  function LDrawLoader(manager) {\n    Loader.call(this, manager); // This is a stack of 'parse scopes' with one level per subobject loaded file.\n    // Each level contains a material lib and also other runtime variables passed between parent and child subobjects\n    // When searching for a material code, the stack is read from top of the stack to bottom\n    // Each material library is an object map keyed by colour codes.\n\n    this.parseScopesStack = null; // Array of THREE.Material\n\n    this.materials = []; // Not using THREE.Cache here because it returns the previous HTML error response instead of calling onError()\n    // This also allows to handle the embedded text files (\"0 FILE\" lines)\n\n    this.subobjectCache = {}; // This object is a map from file names to paths. It agilizes the paths search. If it is not set then files will be searched by trial and error.\n\n    this.fileMap = null; // Add default main triangle and line edge materials (used in piecess that can be coloured with a main color)\n\n    this.setMaterials([this.parseColourMetaDirective(new LineParser('Main_Colour CODE 16 VALUE #FF8080 EDGE #333333')), this.parseColourMetaDirective(new LineParser('Edge_Colour CODE 24 VALUE #A0A0A0 EDGE #333333'))]); // If this flag is set to true, each subobject will be a Object.\n    // If not (the default), only one object which contains all the merged primitives will be created.\n\n    this.separateObjects = false; // If this flag is set to true the vertex normals will be smoothed.\n\n    this.smoothNormals = true;\n  } // Special surface finish tag types.\n  // Note: \"MATERIAL\" tag (e.g. GLITTER, SPECKLE) is not implemented\n\n\n  LDrawLoader.FINISH_TYPE_DEFAULT = 0;\n  LDrawLoader.FINISH_TYPE_CHROME = 1;\n  LDrawLoader.FINISH_TYPE_PEARLESCENT = 2;\n  LDrawLoader.FINISH_TYPE_RUBBER = 3;\n  LDrawLoader.FINISH_TYPE_MATTE_METALLIC = 4;\n  LDrawLoader.FINISH_TYPE_METAL = 5; // State machine to search a subobject path.\n  // The LDraw standard establishes these various possible subfolders.\n\n  LDrawLoader.FILE_LOCATION_AS_IS = 0;\n  LDrawLoader.FILE_LOCATION_TRY_PARTS = 1;\n  LDrawLoader.FILE_LOCATION_TRY_P = 2;\n  LDrawLoader.FILE_LOCATION_TRY_MODELS = 3;\n  LDrawLoader.FILE_LOCATION_TRY_RELATIVE = 4;\n  LDrawLoader.FILE_LOCATION_TRY_ABSOLUTE = 5;\n  LDrawLoader.FILE_LOCATION_NOT_FOUND = 6;\n  LDrawLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n    constructor: LDrawLoader,\n    load: function (url, onLoad, onProgress, onError) {\n      if (!this.fileMap) {\n        this.fileMap = {};\n      }\n\n      var scope = this;\n      var fileLoader = new FileLoader(this.manager);\n      fileLoader.setPath(this.path);\n      fileLoader.setRequestHeader(this.requestHeader);\n      fileLoader.setWithCredentials(this.withCredentials);\n      fileLoader.load(url, function (text) {\n        scope.processObject(text, onLoad, null, url);\n      }, onProgress, onError);\n    },\n    parse: function (text, path, onLoad) {\n      // Async parse.  This function calls onParse with the parsed THREE.Object3D as parameter\n      this.processObject(text, onLoad, null, path);\n    },\n    setMaterials: function (materials) {\n      // Clears parse scopes stack, adds new scope with material library\n      this.parseScopesStack = [];\n      this.newParseScopeLevel(materials);\n      this.getCurrentParseScope().isFromParse = false;\n      this.materials = materials;\n      return this;\n    },\n    setFileMap: function (fileMap) {\n      this.fileMap = fileMap;\n      return this;\n    },\n    newParseScopeLevel: function (materials) {\n      // Adds a new scope level, assign materials to it and returns it\n      var matLib = {};\n\n      if (materials) {\n        for (let i = 0, n = materials.length; i < n; i++) {\n          var material = materials[i];\n          matLib[material.userData.code] = material;\n        }\n      }\n\n      var topParseScope = this.getCurrentParseScope();\n      var newParseScope = {\n        lib: matLib,\n        url: null,\n        // Subobjects\n        subobjects: null,\n        numSubobjects: 0,\n        subobjectIndex: 0,\n        inverted: false,\n        category: null,\n        keywords: null,\n        // Current subobject\n        currentFileName: null,\n        mainColourCode: topParseScope ? topParseScope.mainColourCode : '16',\n        mainEdgeColourCode: topParseScope ? topParseScope.mainEdgeColourCode : '24',\n        currentMatrix: new Matrix4(),\n        matrix: new Matrix4(),\n        // If false, it is a root material scope previous to parse\n        isFromParse: true,\n        triangles: null,\n        lineSegments: null,\n        conditionalSegments: null,\n        // If true, this object is the start of a construction step\n        startingConstructionStep: false\n      };\n      this.parseScopesStack.push(newParseScope);\n      return newParseScope;\n    },\n    removeScopeLevel: function () {\n      this.parseScopesStack.pop();\n      return this;\n    },\n    addMaterial: function (material) {\n      // Adds a material to the material library which is on top of the parse scopes stack. And also to the materials array\n      var matLib = this.getCurrentParseScope().lib;\n\n      if (!matLib[material.userData.code]) {\n        this.materials.push(material);\n      }\n\n      matLib[material.userData.code] = material;\n      return this;\n    },\n    getMaterial: function (colourCode) {\n      // Given a colour code search its material in the parse scopes stack\n      if (colourCode.startsWith('0x2')) {\n        // Special 'direct' material value (RGB colour)\n        var colour = colourCode.substring(3);\n        return this.parseColourMetaDirective(new LineParser('Direct_Color_' + colour + ' CODE -1 VALUE #' + colour + ' EDGE #' + colour + ''));\n      }\n\n      for (let i = this.parseScopesStack.length - 1; i >= 0; i--) {\n        var material = this.parseScopesStack[i].lib[colourCode];\n\n        if (material) {\n          return material;\n        }\n      } // Material was not found\n\n\n      return null;\n    },\n    getParentParseScope: function () {\n      if (this.parseScopesStack.length > 1) {\n        return this.parseScopesStack[this.parseScopesStack.length - 2];\n      }\n\n      return null;\n    },\n    getCurrentParseScope: function () {\n      if (this.parseScopesStack.length > 0) {\n        return this.parseScopesStack[this.parseScopesStack.length - 1];\n      }\n\n      return null;\n    },\n    parseColourMetaDirective: function (lineParser) {\n      // Parses a colour definition and returns a THREE.Material or null if error\n      var code = null; // Triangle and line colours\n\n      var colour = 0xff00ff;\n      var edgeColour = 0xff00ff; // Transparency\n\n      var alpha = 1;\n      var isTransparent = false; // Self-illumination:\n\n      var luminance = 0;\n      var finishType = LDrawLoader.FINISH_TYPE_DEFAULT;\n      var canHaveEnvMap = true;\n      var edgeMaterial = null;\n      var name = lineParser.getToken();\n\n      if (!name) {\n        throw 'LDrawLoader: Material name was expected after \"!COLOUR tag' + lineParser.getLineNumberString() + '.';\n      } // Parse tag tokens and their parameters\n\n\n      var token = null;\n\n      while (true) {\n        token = lineParser.getToken();\n\n        if (!token) {\n          break;\n        }\n\n        switch (token.toUpperCase()) {\n          case 'CODE':\n            code = lineParser.getToken();\n            break;\n\n          case 'VALUE':\n            colour = lineParser.getToken();\n\n            if (colour.startsWith('0x')) {\n              colour = '#' + colour.substring(2);\n            } else if (!colour.startsWith('#')) {\n              throw 'LDrawLoader: Invalid colour while parsing material' + lineParser.getLineNumberString() + '.';\n            }\n\n            break;\n\n          case 'EDGE':\n            edgeColour = lineParser.getToken();\n\n            if (edgeColour.startsWith('0x')) {\n              edgeColour = '#' + edgeColour.substring(2);\n            } else if (!edgeColour.startsWith('#')) {\n              // Try to see if edge colour is a colour code\n              edgeMaterial = this.getMaterial(edgeColour);\n\n              if (!edgeMaterial) {\n                throw 'LDrawLoader: Invalid edge colour while parsing material' + lineParser.getLineNumberString() + '.';\n              } // Get the edge material for this triangle material\n\n\n              edgeMaterial = edgeMaterial.userData.edgeMaterial;\n            }\n\n            break;\n\n          case 'ALPHA':\n            alpha = parseInt(lineParser.getToken());\n\n            if (isNaN(alpha)) {\n              throw 'LDrawLoader: Invalid alpha value in material definition' + lineParser.getLineNumberString() + '.';\n            }\n\n            alpha = Math.max(0, Math.min(1, alpha / 255));\n\n            if (alpha < 1) {\n              isTransparent = true;\n            }\n\n            break;\n\n          case 'LUMINANCE':\n            luminance = parseInt(lineParser.getToken());\n\n            if (isNaN(luminance)) {\n              throw 'LDrawLoader: Invalid luminance value in material definition' + LineParser.getLineNumberString() + '.';\n            }\n\n            luminance = Math.max(0, Math.min(1, luminance / 255));\n            break;\n\n          case 'CHROME':\n            finishType = LDrawLoader.FINISH_TYPE_CHROME;\n            break;\n\n          case 'PEARLESCENT':\n            finishType = LDrawLoader.FINISH_TYPE_PEARLESCENT;\n            break;\n\n          case 'RUBBER':\n            finishType = LDrawLoader.FINISH_TYPE_RUBBER;\n            break;\n\n          case 'MATTE_METALLIC':\n            finishType = LDrawLoader.FINISH_TYPE_MATTE_METALLIC;\n            break;\n\n          case 'METAL':\n            finishType = LDrawLoader.FINISH_TYPE_METAL;\n            break;\n\n          case 'MATERIAL':\n            // Not implemented\n            lineParser.setToEnd();\n            break;\n\n          default:\n            throw 'LDrawLoader: Unknown token \"' + token + '\" while parsing material' + lineParser.getLineNumberString() + '.';\n        }\n      }\n\n      var material = null;\n\n      switch (finishType) {\n        case LDrawLoader.FINISH_TYPE_DEFAULT:\n          material = new MeshStandardMaterial({\n            color: colour,\n            roughness: 0.3,\n            envMapIntensity: 0.3,\n            metalness: 0\n          });\n          break;\n\n        case LDrawLoader.FINISH_TYPE_PEARLESCENT:\n          // Try to imitate pearlescency by setting the specular to the complementary of the color, and low shininess\n          var specular = new Color(colour);\n          var hsl = specular.getHSL({\n            h: 0,\n            s: 0,\n            l: 0\n          });\n          hsl.h = (hsl.h + 0.5) % 1;\n          hsl.l = Math.min(1, hsl.l + (1 - hsl.l) * 0.7);\n          specular.setHSL(hsl.h, hsl.s, hsl.l);\n          material = new MeshPhongMaterial({\n            color: colour,\n            specular: specular,\n            shininess: 10,\n            reflectivity: 0.3\n          });\n          break;\n\n        case LDrawLoader.FINISH_TYPE_CHROME:\n          // Mirror finish surface\n          material = new MeshStandardMaterial({\n            color: colour,\n            roughness: 0,\n            metalness: 1\n          });\n          break;\n\n        case LDrawLoader.FINISH_TYPE_RUBBER:\n          // Rubber finish\n          material = new MeshStandardMaterial({\n            color: colour,\n            roughness: 0.9,\n            metalness: 0\n          });\n          canHaveEnvMap = false;\n          break;\n\n        case LDrawLoader.FINISH_TYPE_MATTE_METALLIC:\n          // Brushed metal finish\n          material = new MeshStandardMaterial({\n            color: colour,\n            roughness: 0.8,\n            metalness: 0.4\n          });\n          break;\n\n        case LDrawLoader.FINISH_TYPE_METAL:\n          // Average metal finish\n          material = new MeshStandardMaterial({\n            color: colour,\n            roughness: 0.2,\n            metalness: 0.85\n          });\n          break;\n      }\n\n      material.transparent = isTransparent;\n      material.premultipliedAlpha = true;\n      material.opacity = alpha;\n      material.depthWrite = !isTransparent;\n      material.polygonOffset = true;\n      material.polygonOffsetFactor = 1;\n      material.userData.canHaveEnvMap = canHaveEnvMap;\n\n      if (luminance !== 0) {\n        material.emissive.set(material.color).multiplyScalar(luminance);\n      }\n\n      if (!edgeMaterial) {\n        // This is the material used for edges\n        edgeMaterial = new LineBasicMaterial({\n          color: edgeColour,\n          transparent: isTransparent,\n          opacity: alpha,\n          depthWrite: !isTransparent\n        });\n        edgeMaterial.userData.code = code;\n        edgeMaterial.name = name + ' - Edge';\n        edgeMaterial.userData.canHaveEnvMap = false; // This is the material used for conditional edges\n\n        edgeMaterial.userData.conditionalEdgeMaterial = new ShaderMaterial({\n          vertexShader: conditionalLineVertShader,\n          fragmentShader: conditionalLineFragShader,\n          uniforms: UniformsUtils.merge([UniformsLib.fog, {\n            diffuse: {\n              value: new Color(edgeColour)\n            },\n            opacity: {\n              value: alpha\n            }\n          }]),\n          fog: true,\n          transparent: isTransparent,\n          depthWrite: !isTransparent\n        });\n        edgeMaterial.userData.conditionalEdgeMaterial.userData.canHaveEnvMap = false;\n      }\n\n      material.userData.code = code;\n      material.name = name;\n      material.userData.edgeMaterial = edgeMaterial;\n      return material;\n    },\n    //\n    objectParse: function (text) {\n      // Retrieve data from the parent parse scope\n      var parentParseScope = this.getParentParseScope(); // Main colour codes passed to this subobject (or default codes 16 and 24 if it is the root object)\n\n      var mainColourCode = parentParseScope.mainColourCode;\n      var mainEdgeColourCode = parentParseScope.mainEdgeColourCode;\n      var currentParseScope = this.getCurrentParseScope(); // Parse result variables\n\n      var triangles;\n      var lineSegments;\n      var conditionalSegments;\n      var subobjects = [];\n      var category = null;\n      var keywords = null;\n\n      if (text.indexOf('\\r\\n') !== -1) {\n        // This is faster than String.split with regex that splits on both\n        text = text.replace(/\\r\\n/g, '\\n');\n      }\n\n      var lines = text.split('\\n');\n      var numLines = lines.length;\n      var lineIndex = 0;\n      var parsingEmbeddedFiles = false;\n      var currentEmbeddedFileName = null;\n      var currentEmbeddedText = null;\n      var bfcCertified = false;\n      var bfcCCW = true;\n      var bfcInverted = false;\n      var bfcCull = true;\n      var type = '';\n      var startingConstructionStep = false;\n      var scope = this;\n\n      function parseColourCode(lineParser, forEdge) {\n        // Parses next colour code and returns a THREE.Material\n        var colourCode = lineParser.getToken();\n\n        if (!forEdge && colourCode === '16') {\n          colourCode = mainColourCode;\n        }\n\n        if (forEdge && colourCode === '24') {\n          colourCode = mainEdgeColourCode;\n        }\n\n        var material = scope.getMaterial(colourCode);\n\n        if (!material) {\n          throw 'LDrawLoader: Unknown colour code \"' + colourCode + '\" is used' + lineParser.getLineNumberString() + ' but it was not defined previously.';\n        }\n\n        return material;\n      }\n\n      function parseVector(lp) {\n        var v = new Vector3(parseFloat(lp.getToken()), parseFloat(lp.getToken()), parseFloat(lp.getToken()));\n\n        if (!scope.separateObjects) {\n          v.applyMatrix4(currentParseScope.currentMatrix);\n        }\n\n        return v;\n      } // Parse all line commands\n\n\n      for (lineIndex = 0; lineIndex < numLines; lineIndex++) {\n        var line = lines[lineIndex];\n        if (line.length === 0) continue;\n\n        if (parsingEmbeddedFiles) {\n          if (line.startsWith('0 FILE ')) {\n            // Save previous embedded file in the cache\n            this.subobjectCache[currentEmbeddedFileName.toLowerCase()] = currentEmbeddedText; // New embedded text file\n\n            currentEmbeddedFileName = line.substring(7);\n            currentEmbeddedText = '';\n          } else {\n            currentEmbeddedText += line + '\\n';\n          }\n\n          continue;\n        }\n\n        var lp = new LineParser(line, lineIndex + 1);\n        lp.seekNonSpace();\n\n        if (lp.isAtTheEnd()) {\n          // Empty line\n          continue;\n        } // Parse the line type\n\n\n        var lineType = lp.getToken();\n\n        switch (lineType) {\n          // Line type 0: Comment or META\n          case '0':\n            // Parse meta directive\n            var meta = lp.getToken();\n\n            if (meta) {\n              switch (meta) {\n                case '!LDRAW_ORG':\n                  type = lp.getToken();\n                  currentParseScope.triangles = [];\n                  currentParseScope.lineSegments = [];\n                  currentParseScope.conditionalSegments = [];\n                  currentParseScope.type = type;\n                  var isRoot = !parentParseScope.isFromParse;\n\n                  if (isRoot || scope.separateObjects && !isPrimitiveType(type)) {\n                    currentParseScope.groupObject = new Group();\n                    currentParseScope.groupObject.userData.startingConstructionStep = currentParseScope.startingConstructionStep;\n                  } // If the scale of the object is negated then the triangle winding order\n                  // needs to be flipped.\n\n\n                  var matrix = currentParseScope.matrix;\n\n                  if (matrix.determinant() < 0 && (scope.separateObjects && isPrimitiveType(type) || !scope.separateObjects)) {\n                    currentParseScope.inverted = !currentParseScope.inverted;\n                  }\n\n                  triangles = currentParseScope.triangles;\n                  lineSegments = currentParseScope.lineSegments;\n                  conditionalSegments = currentParseScope.conditionalSegments;\n                  break;\n\n                case '!COLOUR':\n                  var material = this.parseColourMetaDirective(lp);\n\n                  if (material) {\n                    this.addMaterial(material);\n                  } else {\n                    console.warn('LDrawLoader: Error parsing material' + lp.getLineNumberString());\n                  }\n\n                  break;\n\n                case '!CATEGORY':\n                  category = lp.getToken();\n                  break;\n\n                case '!KEYWORDS':\n                  var newKeywords = lp.getRemainingString().split(',');\n\n                  if (newKeywords.length > 0) {\n                    if (!keywords) {\n                      keywords = [];\n                    }\n\n                    newKeywords.forEach(function (keyword) {\n                      keywords.push(keyword.trim());\n                    });\n                  }\n\n                  break;\n\n                case 'FILE':\n                  if (lineIndex > 0) {\n                    // Start embedded text files parsing\n                    parsingEmbeddedFiles = true;\n                    currentEmbeddedFileName = lp.getRemainingString();\n                    currentEmbeddedText = '';\n                    bfcCertified = false;\n                    bfcCCW = true;\n                  }\n\n                  break;\n\n                case 'BFC':\n                  // Changes to the backface culling state\n                  while (!lp.isAtTheEnd()) {\n                    var token = lp.getToken();\n\n                    switch (token) {\n                      case 'CERTIFY':\n                      case 'NOCERTIFY':\n                        bfcCertified = token === 'CERTIFY';\n                        bfcCCW = true;\n                        break;\n\n                      case 'CW':\n                      case 'CCW':\n                        bfcCCW = token === 'CCW';\n                        break;\n\n                      case 'INVERTNEXT':\n                        bfcInverted = true;\n                        break;\n\n                      case 'CLIP':\n                      case 'NOCLIP':\n                        bfcCull = token === 'CLIP';\n                        break;\n\n                      default:\n                        console.warn('THREE.LDrawLoader: BFC directive \"' + token + '\" is unknown.');\n                        break;\n                    }\n                  }\n\n                  break;\n\n                case 'STEP':\n                  startingConstructionStep = true;\n                  break;\n              }\n            }\n\n            break;\n          // Line type 1: Sub-object file\n\n          case '1':\n            var material = parseColourCode(lp);\n            var posX = parseFloat(lp.getToken());\n            var posY = parseFloat(lp.getToken());\n            var posZ = parseFloat(lp.getToken());\n            var m0 = parseFloat(lp.getToken());\n            var m1 = parseFloat(lp.getToken());\n            var m2 = parseFloat(lp.getToken());\n            var m3 = parseFloat(lp.getToken());\n            var m4 = parseFloat(lp.getToken());\n            var m5 = parseFloat(lp.getToken());\n            var m6 = parseFloat(lp.getToken());\n            var m7 = parseFloat(lp.getToken());\n            var m8 = parseFloat(lp.getToken());\n            var matrix = new Matrix4().set(m0, m1, m2, posX, m3, m4, m5, posY, m6, m7, m8, posZ, 0, 0, 0, 1);\n            var fileName = lp.getRemainingString().trim().replace(/\\\\/g, '/');\n\n            if (scope.fileMap[fileName]) {\n              // Found the subobject path in the preloaded file path map\n              fileName = scope.fileMap[fileName];\n            } else {\n              // Standardized subfolders\n              if (fileName.startsWith('s/')) {\n                fileName = 'parts/' + fileName;\n              } else if (fileName.startsWith('48/')) {\n                fileName = 'p/' + fileName;\n              }\n            }\n\n            subobjects.push({\n              material: material,\n              matrix: matrix,\n              fileName: fileName,\n              originalFileName: fileName,\n              locationState: LDrawLoader.FILE_LOCATION_AS_IS,\n              url: null,\n              triedLowerCase: false,\n              inverted: bfcInverted !== currentParseScope.inverted,\n              startingConstructionStep: startingConstructionStep\n            });\n            bfcInverted = false;\n            break;\n          // Line type 2: Line segment\n\n          case '2':\n            var material = parseColourCode(lp, true);\n            var segment = {\n              material: material.userData.edgeMaterial,\n              colourCode: material.userData.code,\n              v0: parseVector(lp),\n              v1: parseVector(lp)\n            };\n            lineSegments.push(segment);\n            break;\n          // Line type 5: Conditional Line segment\n\n          case '5':\n            var material = parseColourCode(lp, true);\n            var segment = {\n              material: material.userData.edgeMaterial.userData.conditionalEdgeMaterial,\n              colourCode: material.userData.code,\n              v0: parseVector(lp),\n              v1: parseVector(lp),\n              c0: parseVector(lp),\n              c1: parseVector(lp)\n            };\n            conditionalSegments.push(segment);\n            break;\n          // Line type 3: Triangle\n\n          case '3':\n            var material = parseColourCode(lp);\n            var inverted = currentParseScope.inverted;\n            var ccw = bfcCCW !== inverted;\n            var doubleSided = !bfcCertified || !bfcCull;\n            var v0, v1, v2, faceNormal;\n\n            if (ccw === true) {\n              v0 = parseVector(lp);\n              v1 = parseVector(lp);\n              v2 = parseVector(lp);\n            } else {\n              v2 = parseVector(lp);\n              v1 = parseVector(lp);\n              v0 = parseVector(lp);\n            }\n\n            tempVec0.subVectors(v1, v0);\n            tempVec1.subVectors(v2, v1);\n            faceNormal = new Vector3().crossVectors(tempVec0, tempVec1).normalize();\n            triangles.push({\n              material: material,\n              colourCode: material.userData.code,\n              v0: v0,\n              v1: v1,\n              v2: v2,\n              faceNormal: faceNormal,\n              n0: null,\n              n1: null,\n              n2: null\n            });\n\n            if (doubleSided === true) {\n              triangles.push({\n                material: material,\n                colourCode: material.userData.code,\n                v0: v0,\n                v1: v2,\n                v2: v1,\n                faceNormal: faceNormal,\n                n0: null,\n                n1: null,\n                n2: null\n              });\n            }\n\n            break;\n          // Line type 4: Quadrilateral\n\n          case '4':\n            var material = parseColourCode(lp);\n            var inverted = currentParseScope.inverted;\n            var ccw = bfcCCW !== inverted;\n            var doubleSided = !bfcCertified || !bfcCull;\n            var v0, v1, v2, v3, faceNormal;\n\n            if (ccw === true) {\n              v0 = parseVector(lp);\n              v1 = parseVector(lp);\n              v2 = parseVector(lp);\n              v3 = parseVector(lp);\n            } else {\n              v3 = parseVector(lp);\n              v2 = parseVector(lp);\n              v1 = parseVector(lp);\n              v0 = parseVector(lp);\n            }\n\n            tempVec0.subVectors(v1, v0);\n            tempVec1.subVectors(v2, v1);\n            faceNormal = new Vector3().crossVectors(tempVec0, tempVec1).normalize();\n            triangles.push({\n              material: material,\n              colourCode: material.userData.code,\n              v0: v0,\n              v1: v1,\n              v2: v2,\n              faceNormal: faceNormal,\n              n0: null,\n              n1: null,\n              n2: null\n            });\n            triangles.push({\n              material: material,\n              colourCode: material.userData.code,\n              v0: v0,\n              v1: v2,\n              v2: v3,\n              faceNormal: faceNormal,\n              n0: null,\n              n1: null,\n              n2: null\n            });\n\n            if (doubleSided === true) {\n              triangles.push({\n                material: material,\n                colourCode: material.userData.code,\n                v0: v0,\n                v1: v2,\n                v2: v1,\n                faceNormal: faceNormal,\n                n0: null,\n                n1: null,\n                n2: null\n              });\n              triangles.push({\n                material: material,\n                colourCode: material.userData.code,\n                v0: v0,\n                v1: v3,\n                v2: v2,\n                faceNormal: faceNormal,\n                n0: null,\n                n1: null,\n                n2: null\n              });\n            }\n\n            break;\n\n          default:\n            throw 'LDrawLoader: Unknown line type \"' + lineType + '\"' + lp.getLineNumberString() + '.';\n        }\n      }\n\n      if (parsingEmbeddedFiles) {\n        this.subobjectCache[currentEmbeddedFileName.toLowerCase()] = currentEmbeddedText;\n      }\n\n      currentParseScope.category = category;\n      currentParseScope.keywords = keywords;\n      currentParseScope.subobjects = subobjects;\n      currentParseScope.numSubobjects = subobjects.length;\n      currentParseScope.subobjectIndex = 0;\n    },\n    computeConstructionSteps: function (model) {\n      // Sets userdata.constructionStep number in Group objects and userData.numConstructionSteps number in the root Group object.\n      var stepNumber = 0;\n      model.traverse(c => {\n        if (c.isGroup) {\n          if (c.userData.startingConstructionStep) {\n            stepNumber++;\n          }\n\n          c.userData.constructionStep = stepNumber;\n        }\n      });\n      model.userData.numConstructionSteps = stepNumber + 1;\n    },\n    processObject: function (text, onProcessed, subobject, url) {\n      var scope = this;\n      var parseScope = scope.newParseScopeLevel();\n      parseScope.url = url;\n      var parentParseScope = scope.getParentParseScope(); // Set current matrix\n\n      if (subobject) {\n        parseScope.currentMatrix.multiplyMatrices(parentParseScope.currentMatrix, subobject.matrix);\n        parseScope.matrix.copy(subobject.matrix);\n        parseScope.inverted = subobject.inverted;\n        parseScope.startingConstructionStep = subobject.startingConstructionStep;\n      } // Add to cache\n\n\n      var currentFileName = parentParseScope.currentFileName;\n\n      if (currentFileName !== null) {\n        currentFileName = parentParseScope.currentFileName.toLowerCase();\n      }\n\n      if (scope.subobjectCache[currentFileName] === undefined) {\n        scope.subobjectCache[currentFileName] = text;\n      } // Parse the object (returns a Group)\n\n\n      scope.objectParse(text);\n      var finishedCount = 0;\n      onSubobjectFinish();\n\n      function onSubobjectFinish() {\n        finishedCount++;\n\n        if (finishedCount === parseScope.subobjects.length + 1) {\n          finalizeObject();\n        } else {\n          // Once the previous subobject has finished we can start processing the next one in the list.\n          // The subobject processing shares scope in processing so it's important that they be loaded serially\n          // to avoid race conditions.\n          // Promise.resolve is used as an approach to asynchronously schedule a task _before_ this frame ends to\n          // avoid stack overflow exceptions when loading many subobjects from the cache. RequestAnimationFrame\n          // will work but causes the load to happen after the next frame which causes the load to take significantly longer.\n          var subobject = parseScope.subobjects[parseScope.subobjectIndex];\n          Promise.resolve().then(function () {\n            loadSubobject(subobject);\n          });\n          parseScope.subobjectIndex++;\n        }\n      }\n\n      function finalizeObject() {\n        if (scope.smoothNormals && parseScope.type === 'Part') {\n          smoothNormals(parseScope.triangles, parseScope.lineSegments);\n        }\n\n        var isRoot = !parentParseScope.isFromParse;\n\n        if (scope.separateObjects && !isPrimitiveType(parseScope.type) || isRoot) {\n          const objGroup = parseScope.groupObject;\n\n          if (parseScope.triangles.length > 0) {\n            objGroup.add(createObject(parseScope.triangles, 3));\n          }\n\n          if (parseScope.lineSegments.length > 0) {\n            objGroup.add(createObject(parseScope.lineSegments, 2));\n          }\n\n          if (parseScope.conditionalSegments.length > 0) {\n            objGroup.add(createObject(parseScope.conditionalSegments, 2, true));\n          }\n\n          if (parentParseScope.groupObject) {\n            objGroup.name = parseScope.fileName;\n            objGroup.userData.category = parseScope.category;\n            objGroup.userData.keywords = parseScope.keywords;\n            parseScope.matrix.decompose(objGroup.position, objGroup.quaternion, objGroup.scale);\n            parentParseScope.groupObject.add(objGroup);\n          }\n        } else {\n          var separateObjects = scope.separateObjects;\n          var parentLineSegments = parentParseScope.lineSegments;\n          var parentConditionalSegments = parentParseScope.conditionalSegments;\n          var parentTriangles = parentParseScope.triangles;\n          var lineSegments = parseScope.lineSegments;\n          var conditionalSegments = parseScope.conditionalSegments;\n          var triangles = parseScope.triangles;\n\n          for (let i = 0, l = lineSegments.length; i < l; i++) {\n            var ls = lineSegments[i];\n\n            if (separateObjects) {\n              ls.v0.applyMatrix4(parseScope.matrix);\n              ls.v1.applyMatrix4(parseScope.matrix);\n            }\n\n            parentLineSegments.push(ls);\n          }\n\n          for (let i = 0, l = conditionalSegments.length; i < l; i++) {\n            var os = conditionalSegments[i];\n\n            if (separateObjects) {\n              os.v0.applyMatrix4(parseScope.matrix);\n              os.v1.applyMatrix4(parseScope.matrix);\n              os.c0.applyMatrix4(parseScope.matrix);\n              os.c1.applyMatrix4(parseScope.matrix);\n            }\n\n            parentConditionalSegments.push(os);\n          }\n\n          for (let i = 0, l = triangles.length; i < l; i++) {\n            var tri = triangles[i];\n\n            if (separateObjects) {\n              tri.v0 = tri.v0.clone().applyMatrix4(parseScope.matrix);\n              tri.v1 = tri.v1.clone().applyMatrix4(parseScope.matrix);\n              tri.v2 = tri.v2.clone().applyMatrix4(parseScope.matrix);\n              tempVec0.subVectors(tri.v1, tri.v0);\n              tempVec1.subVectors(tri.v2, tri.v1);\n              tri.faceNormal.crossVectors(tempVec0, tempVec1).normalize();\n            }\n\n            parentTriangles.push(tri);\n          }\n        }\n\n        scope.removeScopeLevel(); // If it is root object, compute construction steps\n\n        if (!parentParseScope.isFromParse) {\n          scope.computeConstructionSteps(parseScope.groupObject);\n        }\n\n        if (onProcessed) {\n          onProcessed(parseScope.groupObject);\n        }\n      }\n\n      function loadSubobject(subobject) {\n        parseScope.mainColourCode = subobject.material.userData.code;\n        parseScope.mainEdgeColourCode = subobject.material.userData.edgeMaterial.userData.code;\n        parseScope.currentFileName = subobject.originalFileName; // If subobject was cached previously, use the cached one\n\n        var cached = scope.subobjectCache[subobject.originalFileName.toLowerCase()];\n\n        if (cached) {\n          scope.processObject(cached, function (subobjectGroup) {\n            onSubobjectLoaded(subobjectGroup, subobject);\n            onSubobjectFinish();\n          }, subobject, url);\n          return;\n        } // Adjust file name to locate the subobject file path in standard locations (always under directory scope.path)\n        // Update also subobject.locationState for the next try if this load fails.\n\n\n        var subobjectURL = subobject.fileName;\n        var newLocationState = LDrawLoader.FILE_LOCATION_NOT_FOUND;\n\n        switch (subobject.locationState) {\n          case LDrawLoader.FILE_LOCATION_AS_IS:\n            newLocationState = subobject.locationState + 1;\n            break;\n\n          case LDrawLoader.FILE_LOCATION_TRY_PARTS:\n            subobjectURL = 'parts/' + subobjectURL;\n            newLocationState = subobject.locationState + 1;\n            break;\n\n          case LDrawLoader.FILE_LOCATION_TRY_P:\n            subobjectURL = 'p/' + subobjectURL;\n            newLocationState = subobject.locationState + 1;\n            break;\n\n          case LDrawLoader.FILE_LOCATION_TRY_MODELS:\n            subobjectURL = 'models/' + subobjectURL;\n            newLocationState = subobject.locationState + 1;\n            break;\n\n          case LDrawLoader.FILE_LOCATION_TRY_RELATIVE:\n            subobjectURL = url.substring(0, url.lastIndexOf('/') + 1) + subobjectURL;\n            newLocationState = subobject.locationState + 1;\n            break;\n\n          case LDrawLoader.FILE_LOCATION_TRY_ABSOLUTE:\n            if (subobject.triedLowerCase) {\n              // Try absolute path\n              newLocationState = LDrawLoader.FILE_LOCATION_NOT_FOUND;\n            } else {\n              // Next attempt is lower case\n              subobject.fileName = subobject.fileName.toLowerCase();\n              subobjectURL = subobject.fileName;\n              subobject.triedLowerCase = true;\n              newLocationState = LDrawLoader.FILE_LOCATION_AS_IS;\n            }\n\n            break;\n\n          case LDrawLoader.FILE_LOCATION_NOT_FOUND:\n            // All location possibilities have been tried, give up loading this object\n            console.warn('LDrawLoader: Subobject \"' + subobject.originalFileName + '\" could not be found.');\n            return;\n        }\n\n        subobject.locationState = newLocationState;\n        subobject.url = subobjectURL; // Load the subobject\n        // Use another file loader here so we can keep track of the subobject information\n        // and use it when processing the next model.\n\n        var fileLoader = new FileLoader(scope.manager);\n        fileLoader.setPath(scope.path);\n        fileLoader.setRequestHeader(scope.requestHeader);\n        fileLoader.setWithCredentials(scope.withCredentials);\n        fileLoader.load(subobjectURL, function (text) {\n          scope.processObject(text, function (subobjectGroup) {\n            onSubobjectLoaded(subobjectGroup, subobject);\n            onSubobjectFinish();\n          }, subobject, url);\n        }, undefined, function (err) {\n          onSubobjectError(err, subobject);\n        }, subobject);\n      }\n\n      function onSubobjectLoaded(subobjectGroup, subobject) {\n        if (subobjectGroup === null) {\n          // Try to reload\n          loadSubobject(subobject);\n          return;\n        }\n\n        scope.fileMap[subobject.originalFileName] = subobject.url;\n      }\n\n      function onSubobjectError(err, subobject) {\n        // Retry download from a different default possible location\n        loadSubobject(subobject);\n      }\n    }\n  });\n  return LDrawLoader;\n}();\n\nexport { LDrawLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}